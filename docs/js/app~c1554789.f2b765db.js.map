{"version":3,"sources":["webpack:///./node_modules/@firebase/database/dist/index.cjs.js"],"names":["_interopDefault","ex","Object","defineProperty","exports","value","firebase","tslib","util","logger$1","component","DOMStorageWrapper","domStorage_","this","prefix_","prototype","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","_i","arguments","length","message","i","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","__spread","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","ebits","fbits","bias","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","e_1","_a","results","charAt","_b","__values","_c","next","done","segment","kv","e_1_1","return","call","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","repoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","queryParams","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","setMaxNode","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","setNodeFromJSON","setMaxNode$1","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","__assign","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON$1","json","jsonLeaf","node_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","__referenceConstructor","ValueIndex","valueNode","VALUE_INDEX","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","forEach","childrenNode","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","thisCount","otherKey","thisKey","every","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","endName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","DeferredValueProvider","syncTree","syncTree_","calcCompleteEventCache","generateWithValues","values","Date","getTime","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","SparseSnapshotTree","children","Map","find","size","childKey","has","remember","clear","forget","self_1","tree","safeToRemove","delete","forEachTree","prefixPath","func","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","concat","generateEventsForChanges_","getInitialEvents","initialChanges","eventNode","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","e_2","removed","hadCompleteView","hasCompleteView","entries","_d","__read","viewQueryId","e_2_1","getQueryViews","e_3","e_3_1","e_4","e_4_1","viewForQuery","getCompleteView","viewExistsForQuery","e_5","e_5_1","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","newWriteTree","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","write","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","needToReevaluate","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","maybeChildSyncPoint","childMap","completeView","views_1","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","authProvider_","auth_","getImmediate","then","auth","getToken","forceRefresh","Promise","addTokenChangeListener","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","add","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","state_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","_e","_f","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","status_1","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","forceRestClient","app","authProvider","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","appId","statsReporter_","transactionsInit_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offsetNode","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolved","showDelta","console","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","oldChildSnap","compareNext","remainsInWindow","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","unwatcher","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","_staticInstance","DATABASE_URL_OPTION","FIREBASE_DATABASE_EMULATOR_HOST_VAR","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","dbEmulatorHost","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","__awaiter","__generator","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","freeze","__proto__","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","TEST_ACCESS","registerDatabase","instance","registerComponent","Component","getProvider","setServiceProps","setMultipleInstances","registerVersion","module"],"mappings":"+GAAA,YAIA,SAASA,EAAiBC,GAAM,OAAQA,GAAqB,kBAAPA,GAAoB,YAAaA,EAAMA,EAAG,WAAaA,EAF7GC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAItD,IAAIC,EAAWN,EAAgB,EAAQ,SACnCO,EAAQ,EAAQ,QAChBC,EAAO,EAAQ,QACfC,EAAW,EAAQ,QACnBC,EAAY,EAAQ,QA4BpBC,EAAmC,WAInC,SAASA,EAAkBC,GACvBC,KAAKD,YAAcA,EAEnBC,KAAKC,QAAU,YA2CnB,OArCAH,EAAkBI,UAAUC,IAAM,SAAUC,EAAKZ,GAChC,MAATA,EACAQ,KAAKD,YAAYM,WAAWL,KAAKM,cAAcF,IAG/CJ,KAAKD,YAAYQ,QAAQP,KAAKM,cAAcF,GAAMT,EAAKa,UAAUhB,KAOzEM,EAAkBI,UAAUO,IAAM,SAAUL,GACxC,IAAIM,EAAYV,KAAKD,YAAYY,QAAQX,KAAKM,cAAcF,IAC5D,OAAiB,MAAbM,EACO,KAGAf,EAAKiB,SAASF,IAM7BZ,EAAkBI,UAAUW,OAAS,SAAUT,GAC3CJ,KAAKD,YAAYM,WAAWL,KAAKM,cAAcF,KAMnDN,EAAkBI,UAAUI,cAAgB,SAAUQ,GAClD,OAAOd,KAAKC,QAAUa,GAE1BhB,EAAkBI,UAAUa,SAAW,WACnC,OAAOf,KAAKD,YAAYgB,YAErBjB,EAlD2B,GA2ElCkB,EAA+B,WAC/B,SAASA,IACLhB,KAAKiB,OAAS,GACdjB,KAAKkB,mBAAoB,EAmB7B,OAjBAF,EAAcd,UAAUC,IAAM,SAAUC,EAAKZ,GAC5B,MAATA,SACOQ,KAAKiB,OAAOb,GAGnBJ,KAAKiB,OAAOb,GAAOZ,GAG3BwB,EAAcd,UAAUO,IAAM,SAAUL,GACpC,OAAIT,EAAKwB,SAASnB,KAAKiB,OAAQb,GACpBJ,KAAKiB,OAAOb,GAEhB,MAEXY,EAAcd,UAAUW,OAAS,SAAUT,UAChCJ,KAAKiB,OAAOb,IAEhBY,EAtBuB,GAkD9BI,EAAmB,SAAUC,GAC7B,IAGI,GAAsB,qBAAXC,QAC2B,qBAA3BA,OAAOD,GAAiC,CAE/C,IAAIE,EAAaD,OAAOD,GAGxB,OAFAE,EAAWhB,QAAQ,oBAAqB,SACxCgB,EAAWlB,WAAW,qBACf,IAAIP,EAAkByB,IAGrC,MAAOC,IAGP,OAAO,IAAIR,GAGXS,EAAoBL,EAAiB,gBAErCM,EAAiBN,EAAiB,kBAkBlCO,EAAY,IAAI/B,EAASgC,OAAO,sBAKhCC,EAAgB,WAChB,IAAIC,EAAK,EACT,OAAO,WACH,OAAOA,KAHK,GAWhBC,EAAO,SAAUC,GACjB,IAAIC,EAAYtC,EAAKuC,kBAAkBF,GACnCD,EAAO,IAAIpC,EAAKwC,KACpBJ,EAAKK,OAAOH,GACZ,IAAII,EAAYN,EAAKO,SACrB,OAAO3C,EAAK4C,OAAOC,gBAAgBH,IAOnCI,EAAmB,WAEnB,IADA,IAAIC,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAG5B,IADA,IAAIG,EAAU,GACLC,EAAI,EAAGA,EAAIL,EAAQG,OAAQE,IAAK,CACrC,IAAIC,EAAMN,EAAQK,GACdE,MAAMC,QAAQF,IACbA,GACkB,kBAARA,GAEe,kBAAfA,EAAIH,OACfC,GAAWL,EAAiBU,MAAM,KAAMH,GAGxCF,GADoB,kBAARE,EACDrD,EAAKa,UAAUwC,GAGfA,EAEfF,GAAW,IAEf,OAAOA,GAMPM,EAAS,KAMTC,GAAY,EAMZC,EAAgB,SAAUC,EAASC,GACnC7D,EAAK8D,QAAQD,IAA0B,IAAZD,IAAgC,IAAZA,EAAmB,+CAClD,IAAZA,GACA5B,EAAU+B,SAAW9D,EAAS+D,SAASC,QACvCR,EAASzB,EAAUkC,IAAIC,KAAKnC,GACxB6B,GACA9B,EAAevB,IAAI,mBAAmB,IAGlB,oBAAZoD,EACZH,EAASG,GAGTH,EAAS,KACT1B,EAAeb,OAAO,qBAO1BgD,EAAM,WAEN,IADA,IAAInB,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAQ5B,IANkB,IAAdU,IACAA,GAAY,EACG,OAAXD,IAA6D,IAA1C1B,EAAejB,IAAI,oBACtC6C,GAAc,IAGlBF,EAAQ,CACR,IAAIN,EAAUL,EAAiBU,MAAM,KAAMT,GAC3CU,EAAON,KAOXiB,EAAa,SAAUC,GACvB,OAAO,WAEH,IADA,IAAItB,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5BkB,EAAIV,WAAM,EAAQzD,EAAMuE,SAAS,CAACD,GAAStB,MAM/CwB,EAAQ,WAER,IADA,IAAIxB,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,IAAIG,EAAU,4BAA8BL,EAAiBU,WAAM,EAAQzD,EAAMuE,SAASvB,IAC1Ff,EAAUuC,MAAMpB,IAKhBqB,EAAQ,WAER,IADA,IAAIzB,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,IAAIG,EAAU,yBAA2BL,EAAiBU,WAAM,EAAQzD,EAAMuE,SAASvB,IAEvF,MADAf,EAAUuC,MAAMpB,GACV,IAAIsB,MAAMtB,IAKhBuB,EAAO,WAEP,IADA,IAAI3B,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,IAAIG,EAAU,qBAAuBL,EAAiBU,WAAM,EAAQzD,EAAMuE,SAASvB,IACnFf,EAAU0C,KAAKvB,IAMfwB,EAAqB,WAEC,qBAAXhD,QACPA,OAAOiD,UACPjD,OAAOiD,SAASC,WACgC,IAAhDlD,OAAOiD,SAASC,SAASC,QAAQ,WACjCJ,EAAK,8FASTK,EAAsB,SAAUC,GAChC,MAAwB,kBAATA,IACVA,IAASA,GACNA,IAASC,OAAOC,mBAChBF,IAASC,OAAOE,oBAKxBC,EAAsB,SAAUC,GAChC,GAAIrF,EAAKsF,aAAuC,aAAxBC,SAASC,WAC7BH,QAEC,CAGD,IAAII,GAAW,EACXC,EAAc,WACTH,SAASI,KAITF,IACDA,GAAW,EACXJ,KALAO,WAAWF,EAAaG,KAAKC,MAAM,MAQvCP,SAASQ,kBACTR,SAASQ,iBAAiB,mBAAoBL,GAAa,GAE3D/D,OAAOoE,iBAAiB,OAAQL,GAAa,IAGxCH,SAASS,cAGdT,SAASS,YAAY,sBAAsB,WACX,aAAxBT,SAASC,YACTE,OAKR/D,OAAOqE,YAAY,SAAUN,MAWrCO,EAAW,aAKXC,EAAW,aAOXC,EAAc,SAAUC,EAAGC,GAC3B,GAAID,IAAMC,EACN,OAAO,EAEN,GAAID,IAAMH,GAAYI,IAAMH,EAC7B,OAAQ,EAEP,GAAIG,IAAMJ,GAAYG,IAAMF,EAC7B,OAAO,EAGP,IAAII,EAASC,EAAYH,GAAII,EAASD,EAAYF,GAClD,OAAe,OAAXC,EACe,OAAXE,EACOF,EAASE,IAAW,EAAIJ,EAAElD,OAASmD,EAAEnD,OAASoD,EAASE,GAGtD,EAGI,OAAXA,EACE,EAGAJ,EAAIC,GAAK,EAAI,GAS5BI,EAAgB,SAAUL,EAAGC,GAC7B,OAAID,IAAMC,EACC,EAEFD,EAAIC,GACD,EAGD,GAQXK,EAAa,SAAUjG,EAAKkG,GAC5B,GAAIA,GAAOlG,KAAOkG,EACd,OAAOA,EAAIlG,GAGX,MAAM,IAAIgE,MAAM,yBAA2BhE,EAAM,gBAAkBT,EAAKa,UAAU8F,KAOtFC,EAAoB,SAAUD,GAC9B,GAAmB,kBAARA,GAA4B,OAARA,EAC3B,OAAO3G,EAAKa,UAAU8F,GAE1B,IAAIE,EAAO,GAEX,IAAK,IAAIC,KAAKH,EACVE,EAAKE,KAAKD,GAGdD,EAAKG,OAEL,IADA,IAAIvG,EAAM,IACD2C,EAAI,EAAGA,EAAIyD,EAAK3D,OAAQE,IACnB,IAANA,IACA3C,GAAO,KAEXA,GAAOT,EAAKa,UAAUgG,EAAKzD,IAC3B3C,GAAO,IACPA,GAAOmG,EAAkBD,EAAIE,EAAKzD,KAGtC,OADA3C,GAAO,IACAA,GAQPwG,EAAoB,SAAU5E,EAAK6E,GACnC,IAAIC,EAAM9E,EAAIa,OACd,GAAIiE,GAAOD,EACP,MAAO,CAAC7E,GAGZ,IADA,IAAI+E,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAKE,GAAKH,EACtBG,EAAIH,EAAUC,EACdC,EAASL,KAAK1E,EAAIiF,UAAUD,EAAGF,IAG/BC,EAASL,KAAK1E,EAAIiF,UAAUD,EAAGA,EAAIH,IAG3C,OAAOE,GAQX,SAASG,EAAKZ,EAAKtB,GACf,IAAK,IAAI5E,KAAOkG,EACRA,EAAIa,eAAe/G,IACnB4E,EAAG5E,EAAKkG,EAAIlG,IAWxB,IAAIgH,EAAwB,SAAUC,GAClC1H,EAAK8D,QAAQiB,EAAoB2C,GAAI,uBACrC,IAEIC,EAAG9F,EAAG+F,EAAGC,EAAIzE,EAFb0E,EAAQ,GAAIC,EAAQ,GACpBC,GAAQ,GAAMF,EAAQ,GAAM,EAItB,IAANJ,GACA7F,EAAI,EACJ+F,EAAI,EACJD,EAAI,EAAID,KAAOO,IAAW,EAAI,IAG9BN,EAAID,EAAI,EACRA,EAAI7B,KAAKqC,IAAIR,GACTA,GAAK7B,KAAKsC,IAAI,EAAG,EAAIH,IAErBH,EAAKhC,KAAKuC,IAAIvC,KAAKC,MAAMD,KAAK3B,IAAIwD,GAAK7B,KAAKwC,KAAML,GAClDnG,EAAIgG,EAAKG,EACTJ,EAAI/B,KAAKyC,MAAMZ,EAAI7B,KAAKsC,IAAI,EAAGJ,EAAQF,GAAMhC,KAAKsC,IAAI,EAAGJ,MAIzDlG,EAAI,EACJ+F,EAAI/B,KAAKyC,MAAMZ,EAAI7B,KAAKsC,IAAI,EAAG,EAAIH,EAAOD,MAIlD,IAAIQ,EAAO,GACX,IAAKnF,EAAI2E,EAAO3E,EAAGA,GAAK,EACpBmF,EAAKxB,KAAKa,EAAI,EAAI,EAAI,GACtBA,EAAI/B,KAAKC,MAAM8B,EAAI,GAEvB,IAAKxE,EAAI0E,EAAO1E,EAAGA,GAAK,EACpBmF,EAAKxB,KAAKlF,EAAI,EAAI,EAAI,GACtBA,EAAIgE,KAAKC,MAAMjE,EAAI,GAEvB0G,EAAKxB,KAAKY,EAAI,EAAI,GAClBY,EAAKC,UACL,IAAInG,EAAMkG,EAAKE,KAAK,IAEhBC,EAAgB,GACpB,IAAKtF,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CACxB,IAAIuF,EAAUC,SAASvG,EAAIwG,OAAOzF,EAAG,GAAI,GAAGhC,SAAS,IAC9B,IAAnBuH,EAAQzF,SACRyF,EAAU,IAAMA,GAEpBD,GAAgCC,EAEpC,OAAOD,EAAcI,eAOrBC,EAAiC,WACjC,QAA4B,kBAAXpH,SACbA,OAAO,YACPA,OAAO,UAAU,cAChB,UAAUqH,KAAKrH,OAAOiD,SAASqE,QAMpCC,EAAoB,WAEpB,MAA0B,kBAAZC,SAA8C,kBAAfA,QAAQC,IAQrDC,EAAqB,SAAUC,EAAMC,GACrC,IAAIC,EAAS,gBACA,YAATF,EACAE,EACI,0FAGU,sBAATF,EACLE,EAAS,6DAEK,gBAATF,IACLE,EAAS,8BAEb,IAAIjF,EAAQ,IAAIE,MAAM6E,EAAO,OAASC,EAAME,KAAKrI,WAAa,KAAOoI,GAGrE,OADAjF,EAAM+E,KAAOA,EAAKI,cACXnF,GAOPoF,EAAkB,IAAIC,OAAO,qBAM7BrD,EAAc,SAAUlE,GACxB,GAAIsH,EAAgBX,KAAK3G,GAAM,CAC3B,IAAIwH,EAAS5E,OAAO5C,GACpB,GAAIwH,IAAW,YAAcA,GAAU,WACnC,OAAOA,EAGf,OAAO,MAmBPC,EAAiB,SAAUzE,GAC3B,IACIA,IAEJ,MAAOxD,GAEH+D,YAAW,WAKP,IAAImE,EAAQlI,EAAEkI,OAAS,GAEvB,MADArF,EAAK,yCAA0CqF,GACzClI,IACPgE,KAAKC,MAAM,MAMlBkE,EAAe,WACf,IAAIC,EAA+B,kBAAXtI,QACpBA,OAAO,cACPA,OAAO,aAAa,cACpB,GAKJ,OAAQsI,EAAUC,OAAO,6FAA+F,GAWxHC,EAAwB,SAAU9E,EAAI+E,GACtC,IAAIC,EAAUzE,WAAWP,EAAI+E,GAM7B,MAJuB,kBAAZC,GAAwBA,EAAQ,UAEvCA,EAAQ,WAELA,GAwBPC,EAAsB,WAMtB,SAASA,EAAKC,EAAcC,GACxB,QAAiB,IAAbA,EAAqB,CACrBnK,KAAKoK,QAAUF,EAAaG,MAAM,KAGlC,IADA,IAAIC,EAAS,EACJvH,EAAI,EAAGA,EAAI/C,KAAKoK,QAAQvH,OAAQE,IACjC/C,KAAKoK,QAAQrH,GAAGF,OAAS,IACzB7C,KAAKoK,QAAQE,GAAUtK,KAAKoK,QAAQrH,GACpCuH,KAGRtK,KAAKoK,QAAQvH,OAASyH,EACtBtK,KAAKuK,UAAY,OAGjBvK,KAAKoK,QAAUF,EACflK,KAAKuK,UAAYJ,EAkMzB,OA/LA9K,OAAOC,eAAe2K,EAAM,QAAS,CAMjCxJ,IAAK,WACD,OAAO,IAAIwJ,EAAK,KAEpBO,YAAY,EACZC,cAAc,IAElBR,EAAK/J,UAAUwK,SAAW,WACtB,OAAI1K,KAAKuK,WAAavK,KAAKoK,QAAQvH,OACxB,KAEJ7C,KAAKoK,QAAQpK,KAAKuK,YAK7BN,EAAK/J,UAAUyK,UAAY,WACvB,OAAO3K,KAAKoK,QAAQvH,OAAS7C,KAAKuK,WAKtCN,EAAK/J,UAAU0K,SAAW,WACtB,IAAIT,EAAWnK,KAAKuK,UAIpB,OAHIJ,EAAWnK,KAAKoK,QAAQvH,QACxBsH,IAEG,IAAIF,EAAKjK,KAAKoK,QAASD,IAKlCF,EAAK/J,UAAU2K,QAAU,WACrB,OAAI7K,KAAKuK,UAAYvK,KAAKoK,QAAQvH,OACvB7C,KAAKoK,QAAQpK,KAAKoK,QAAQvH,OAAS,GAEvC,MAEXoH,EAAK/J,UAAUa,SAAW,WAEtB,IADA,IAAI+J,EAAa,GACR/H,EAAI/C,KAAKuK,UAAWxH,EAAI/C,KAAKoK,QAAQvH,OAAQE,IAC1B,KAApB/C,KAAKoK,QAAQrH,KACb+H,GAAc,IAAM9K,KAAKoK,QAAQrH,IAGzC,OAAO+H,GAAc,KAEzBb,EAAK/J,UAAU6K,mBAAqB,WAEhC,IADA,IAAID,EAAa,GACR/H,EAAI/C,KAAKuK,UAAWxH,EAAI/C,KAAKoK,QAAQvH,OAAQE,IAC1B,KAApB/C,KAAKoK,QAAQrH,KACb+H,GAAc,IAAME,mBAAmBC,OAAOjL,KAAKoK,QAAQrH,MAGnE,OAAO+H,GAAc,KAQzBb,EAAK/J,UAAUgL,MAAQ,SAAUC,GAE7B,YADc,IAAVA,IAAoBA,EAAQ,GACzBnL,KAAKoK,QAAQc,MAAMlL,KAAKuK,UAAYY,IAK/ClB,EAAK/J,UAAUkL,OAAS,WACpB,GAAIpL,KAAKuK,WAAavK,KAAKoK,QAAQvH,OAC/B,OAAO,KAGX,IADA,IAAIwI,EAAS,GACJtI,EAAI/C,KAAKuK,UAAWxH,EAAI/C,KAAKoK,QAAQvH,OAAS,EAAGE,IACtDsI,EAAO3E,KAAK1G,KAAKoK,QAAQrH,IAE7B,OAAO,IAAIkH,EAAKoB,EAAQ,IAM5BpB,EAAK/J,UAAUoL,MAAQ,SAAUC,GAE7B,IADA,IAAIF,EAAS,GACJtI,EAAI/C,KAAKuK,UAAWxH,EAAI/C,KAAKoK,QAAQvH,OAAQE,IAClDsI,EAAO3E,KAAK1G,KAAKoK,QAAQrH,IAE7B,GAAIwI,aAAwBtB,EACxB,IAASlH,EAAIwI,EAAahB,UAAWxH,EAAIwI,EAAanB,QAAQvH,OAAQE,IAClEsI,EAAO3E,KAAK6E,EAAanB,QAAQrH,QAIrC,KAAIyI,EAAcD,EAAalB,MAAM,KACrC,IAAStH,EAAI,EAAGA,EAAIyI,EAAY3I,OAAQE,IAChCyI,EAAYzI,GAAGF,OAAS,GACxBwI,EAAO3E,KAAK8E,EAAYzI,IAIpC,OAAO,IAAIkH,EAAKoB,EAAQ,IAK5BpB,EAAK/J,UAAUuL,QAAU,WACrB,OAAOzL,KAAKuK,WAAavK,KAAKoK,QAAQvH,QAO1CoH,EAAKyB,aAAe,SAAUC,EAAWC,GACrC,IAAIC,EAAQF,EAAUjB,WAAYoB,EAAQF,EAAUlB,WACpD,GAAc,OAAVmB,EACA,OAAOD,EAEN,GAAIC,IAAUC,EACf,OAAO7B,EAAKyB,aAAaC,EAAUf,WAAYgB,EAAUhB,YAGzD,MAAM,IAAIxG,MAAM,8BACZwH,EADY,8BAIZD,EACA,MAQZ1B,EAAK8B,aAAe,SAAUC,EAAMC,GAGhC,IAFA,IAAIC,EAAWF,EAAKd,QAChBiB,EAAYF,EAAMf,QACbnI,EAAI,EAAGA,EAAImJ,EAASrJ,QAAUE,EAAIoJ,EAAUtJ,OAAQE,IAAK,CAC9D,IAAIqJ,EAAMtG,EAAYoG,EAASnJ,GAAIoJ,EAAUpJ,IAC7C,GAAY,IAARqJ,EACA,OAAOA,EAGf,OAAIF,EAASrJ,SAAWsJ,EAAUtJ,OACvB,EAEJqJ,EAASrJ,OAASsJ,EAAUtJ,QAAU,EAAI,GAOrDoH,EAAK/J,UAAUmM,OAAS,SAAUC,GAC9B,GAAItM,KAAK2K,cAAgB2B,EAAM3B,YAC3B,OAAO,EAEX,IAAK,IAAI5H,EAAI/C,KAAKuK,UAAWgC,EAAID,EAAM/B,UAAWxH,GAAK/C,KAAKoK,QAAQvH,OAAQE,IAAKwJ,IAC7E,GAAIvM,KAAKoK,QAAQrH,KAAOuJ,EAAMlC,QAAQmC,GAClC,OAAO,EAGf,OAAO,GAOXtC,EAAK/J,UAAUiB,SAAW,SAAUmL,GAChC,IAAIvJ,EAAI/C,KAAKuK,UACTgC,EAAID,EAAM/B,UACd,GAAIvK,KAAK2K,YAAc2B,EAAM3B,YACzB,OAAO,EAEX,MAAO5H,EAAI/C,KAAKoK,QAAQvH,OAAQ,CAC5B,GAAI7C,KAAKoK,QAAQrH,KAAOuJ,EAAMlC,QAAQmC,GAClC,OAAO,IAETxJ,IACAwJ,EAEN,OAAO,GAEJtC,EAxNc,GAoOrBuC,EAAgC,WAKhC,SAASA,EAAepD,EAAMqD,GAC1BzM,KAAKyM,aAAeA,EAEpBzM,KAAK0M,OAAStD,EAAK8B,QAEnBlL,KAAK2M,YAAcnH,KAAKoH,IAAI,EAAG5M,KAAK0M,OAAO7J,QAC3C,IAAK,IAAIE,EAAI,EAAGA,EAAI/C,KAAK0M,OAAO7J,OAAQE,IACpC/C,KAAK2M,aAAehN,EAAKkN,aAAa7M,KAAK0M,OAAO3J,IAEtD/C,KAAK8M,cAgET,OA9DAzN,OAAOC,eAAekN,EAAgB,iBAAkB,CAEpD/L,IAAK,WACD,OAAO,IAEX+J,YAAY,EACZC,cAAc,IAElBpL,OAAOC,eAAekN,EAAgB,wBAAyB,CAE3D/L,IAAK,WACD,OAAO,KAEX+J,YAAY,EACZC,cAAc,IAGlB+B,EAAetM,UAAUwG,KAAO,SAAU4E,GAElCtL,KAAK0M,OAAO7J,OAAS,IACrB7C,KAAK2M,aAAe,GAExB3M,KAAK0M,OAAOhG,KAAK4E,GACjBtL,KAAK2M,aAAehN,EAAKkN,aAAavB,GACtCtL,KAAK8M,eAETN,EAAetM,UAAU6M,IAAM,WAC3B,IAAIC,EAAOhN,KAAK0M,OAAOK,MACvB/M,KAAK2M,aAAehN,EAAKkN,aAAaG,GAElChN,KAAK0M,OAAO7J,OAAS,IACrB7C,KAAK2M,aAAe,IAG5BH,EAAetM,UAAU4M,YAAc,WACnC,GAAI9M,KAAK2M,YAAcH,EAAeS,sBAClC,MAAM,IAAI7I,MAAMpE,KAAKyM,aACjB,8BACAD,EAAeS,sBACf,WACAjN,KAAK2M,YACL,MAER,GAAI3M,KAAK0M,OAAO7J,OAAS2J,EAAeU,eACpC,MAAM,IAAI9I,MAAMpE,KAAKyM,aACjB,iEACAD,EAAeU,eACf,gCACAlN,KAAKmN,kBAQjBX,EAAetM,UAAUiN,cAAgB,WACrC,OAA2B,IAAvBnN,KAAK0M,OAAO7J,OACL,GAEJ,gBAAkB7C,KAAK0M,OAAOtE,KAAK,KAAO,KAE9CoE,EA9EwB,GAiG/BY,EAAmB,IACnBC,EAAgB,IAChBC,EAA0B,IAC1BC,EAAgB,IAChBC,EAAY,IACZC,GAAe,iBACfC,GAAqB,KACrBC,GAAuB,IACvBC,GAAY,YACZC,GAAe,eAuBfC,GAA0B,WAQ1B,SAASA,EAASC,EAAMC,EAAQC,EAAWC,EAAeC,EAAgBC,QAC/C,IAAnBD,IAA6BA,EAAiB,SACZ,IAAlCC,IAA4CA,GAAgC,GAChFpO,KAAKgO,OAASA,EACdhO,KAAKiO,UAAYA,EACjBjO,KAAKkO,cAAgBA,EACrBlO,KAAKmO,eAAiBA,EACtBnO,KAAKoO,8BAAgCA,EACrCpO,KAAK+N,KAAOA,EAAKtF,cACjBzI,KAAKqO,OAASrO,KAAK+N,KAAKvF,OAAOxI,KAAK+N,KAAKtJ,QAAQ,KAAO,GACxDzE,KAAKsO,aACD7M,EAAkBhB,IAAI,QAAUsN,IAAS/N,KAAK+N,KAkEtD,OAhEAD,EAAS5N,UAAUqO,gBAAkB,WACjC,OAAQvO,KAAK+N,OAAS/N,KAAKsO,cACvBtO,KAAKwO,gBACLxO,KAAKoO,+BAEbN,EAAS5N,UAAUuO,gBAAkB,WACjC,MAA0C,OAAnCzO,KAAKsO,aAAa9F,OAAO,EAAG,IAEvCsF,EAAS5N,UAAUwO,WAAa,WAC5B,MAAuB,wBAAhB1O,KAAKqO,QAEhBP,EAAS5N,UAAUsO,aAAe,WAC9B,MAAwB,mBAAhBxO,KAAKqO,QAA+C,wBAAhBrO,KAAKqO,QAErDP,EAAS5N,UAAUyO,WAAa,SAAUC,GAClCA,IAAY5O,KAAKsO,eACjBtO,KAAKsO,aAAeM,EAChB5O,KAAKyO,mBACLhN,EAAkBtB,IAAI,QAAUH,KAAK+N,KAAM/N,KAAKsO,gBAU5DR,EAAS5N,UAAU2O,cAAgB,SAAUC,EAAMC,GAG/C,IAAIC,EACJ,GAHArP,EAAK8D,OAAuB,kBAATqL,EAAmB,8BACtCnP,EAAK8D,OAAyB,kBAAXsL,EAAqB,gCAEpCD,IAASlB,GACToB,GACKhP,KAAKgO,OAAS,SAAW,SAAWhO,KAAKsO,aAAe,YAE5D,IAAIQ,IAASjB,GAKd,MAAM,IAAIzJ,MAAM,4BAA8B0K,GAJ9CE,GACKhP,KAAKgO,OAAS,WAAa,WAAahO,KAAKsO,aAAe,QAKjEtO,KAAKuO,oBACLQ,EAAO,MAAQ/O,KAAKiO,WAExB,IAAIgB,EAAQ,GAIZ,OAHA/H,EAAK6H,GAAQ,SAAU3O,EAAKZ,GACxByP,EAAMvI,KAAKtG,EAAM,IAAMZ,MAEpBwP,EAAUC,EAAM7G,KAAK,MAGhC0F,EAAS5N,UAAUa,SAAW,WAC1B,IAAIiB,EAAMhC,KAAKkP,cAIf,OAHIlP,KAAKmO,iBACLnM,GAAO,IAAMhC,KAAKmO,eAAiB,KAEhCnM,GAGX8L,EAAS5N,UAAUgP,YAAc,WAC7B,OAAQlP,KAAKgO,OAAS,WAAa,WAAahO,KAAK+N,MAElDD,EArFkB;;;;;;;;;;;;;;;;;AA4G7B,SAASqB,GAAWrE,GAGhB,IAFA,IAAIsE,EAAoB,GACpB/D,EAASP,EAAWT,MAAM,KACrBtH,EAAI,EAAGA,EAAIsI,EAAOxI,OAAQE,IAC/B,GAAIsI,EAAOtI,GAAGF,OAAS,EAAG,CACtB,IAAIwM,EAAQhE,EAAOtI,GACnB,IACIsM,EAAQC,mBAAmBD,EAAME,QAAQ,MAAO,MAEpD,MAAO/N,IACP4N,GAAqB,IAAMC,EAGnC,OAAOD,EAMX,SAASI,GAAYC,GACjB,IAAIC,EAAKC,EACLC,EAAU,GACgB,MAA1BH,EAAYI,OAAO,KACnBJ,EAAcA,EAAYxI,UAAU,IAExC,IACI,IAAK,IAAI6I,EAAKpQ,EAAMqQ,SAASN,EAAYpF,MAAM,MAAO2F,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CAC5F,IAAIE,EAAUH,EAAGxQ,MACjB,GAAuB,IAAnB2Q,EAAQtN,OAAZ,CAGA,IAAIuN,EAAKD,EAAQ9F,MAAM,KACL,IAAd+F,EAAGvN,OACH+M,EAAQN,mBAAmBc,EAAG,KAAOd,mBAAmBc,EAAG,IAG3D/L,EAAK,0BAA4B8L,EAAU,eAAiBV,EAAc,OAItF,MAAOY,GAASX,EAAM,CAAExL,MAAOmM,GAC/B,QACI,IACQL,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIJ,EAAK,MAAMA,EAAIxL,OAEjC,OAAO0L,EAOX,IAivBIY,GAuFAC,GAx0BAC,GAAgB,SAAUC,GAC1B,IAAIC,EAAYC,GAAiBF,GAAU1C,EAAY2C,EAAU3C,UACxC,iBAArB2C,EAAUvC,QACVlK,EAAMyM,EAAU7C,KAAV6C,8EAKJ3C,GAA2B,cAAdA,GACM,cAArB2C,EAAUvC,QACVlK,EAAM,gFAELyM,EAAU5C,QACX1J,IAEJ,IAAI4J,EAAqC,OAArB0C,EAAUE,QAAwC,QAArBF,EAAUE,OAC3D,MAAO,CACHC,SAAU,IAAIjD,GAAS8C,EAAU7C,KAAM6C,EAAU5C,OAAQC,EAAWC,EAChD,GACeD,IAAc2C,EAAUI,WAC3D5H,KAAM,IAAIa,EAAK2G,EAAU9F,cAQ7B+F,GAAmB,SAAUF,GAE7B,IAAI5C,EAAO,GAAIM,EAAS,GAAI2C,EAAY,GAAIlG,EAAa,GAAImD,EAAY,GAErED,GAAS,EAAM8C,EAAS,QAASG,EAAO,IAE5C,GAAuB,kBAAZN,EAAsB,CAE7B,IAAIO,EAAWP,EAAQlM,QAAQ,MAC3ByM,GAAY,IACZJ,EAASH,EAAQ1J,UAAU,EAAGiK,EAAW,GACzCP,EAAUA,EAAQ1J,UAAUiK,EAAW,IAG3C,IAAIC,EAAWR,EAAQlM,QAAQ,MACb,IAAd0M,IACAA,EAAWR,EAAQ9N,QAEvB,IAAIuO,EAAkBT,EAAQlM,QAAQ,MACb,IAArB2M,IACAA,EAAkBT,EAAQ9N,QAE9BkL,EAAO4C,EAAQ1J,UAAU,EAAGzB,KAAKuC,IAAIoJ,EAAUC,IAC3CD,EAAWC,IAEXtG,EAAaqE,GAAWwB,EAAQ1J,UAAUkK,EAAUC,KAExD,IAAIC,EAAc7B,GAAYmB,EAAQ1J,UAAUzB,KAAKuC,IAAI4I,EAAQ9N,OAAQuO,KAEzEF,EAAWnD,EAAKtJ,QAAQ,KACpByM,GAAY,GACZlD,EAAoB,UAAX8C,GAAiC,QAAXA,EAC/BG,EAAO1I,SAASwF,EAAK9G,UAAUiK,EAAW,GAAI,KAG9CA,EAAWnD,EAAKlL,OAEpB,IAAIyO,EAAkBvD,EAAK7C,MAAM,EAAGgG,GACpC,GAAsC,cAAlCI,EAAgB7I,cAChB4F,EAAS,iBAER,GAAIiD,EAAgBjH,MAAM,KAAKxH,QAAU,EAC1CwL,EAASiD,MAER,CAED,IAAIC,EAASxD,EAAKtJ,QAAQ,KAC1BuM,EAAYjD,EAAK9G,UAAU,EAAGsK,GAAQ9I,cACtC4F,EAASN,EAAK9G,UAAUsK,EAAS,GAEjCtD,EAAY+C,EAGZ,OAAQK,IACRpD,EAAYoD,EAAY,OAGhC,MAAO,CACHtD,KAAMA,EACNkD,KAAMA,EACN5C,OAAQA,EACR2C,UAAWA,EACXhD,OAAQA,EACR8C,OAAQA,EACRhG,WAAYA,EACZmD,UAAWA,IAyBfuD,GAAqB,iCAOrBC,GAAsB,+BAMtBC,GAAiB,SAKjBC,GAAa,SAAUvR,GACvB,MAAuB,kBAARA,GAAmC,IAAfA,EAAIyC,SAAiB2O,GAAmB7I,KAAKvI,IAMhFwR,GAAoB,SAAU9G,GAC9B,MAA8B,kBAAfA,GACW,IAAtBA,EAAWjI,SACV4O,GAAoB9I,KAAKmC,IAM9B+G,GAAwB,SAAU/G,GAKlC,OAJIA,IAEAA,EAAaA,EAAWyE,QAAQ,mBAAoB,MAEjDqC,GAAkB9G,IAMzBgH,GAAkB,SAAUC,GAC5B,OAAqB,OAAbA,GACgB,kBAAbA,GACc,kBAAbA,IAA0BrN,EAAoBqN,IACrDA,GACuB,kBAAbA,GAEPpS,EAAKwB,SAAS4Q,EAAU,QAWhCC,GAA0B,SAAUC,EAAQC,EAAgBvN,EAAMyE,EAAM+I,GACpEA,QAAqBC,IAATzN,GAGhB0N,GAAqB1S,EAAK2S,YAAYL,EAAQC,EAAgBC,GAAWxN,EAAMyE,IAS/EiJ,GAAuB,SAAUC,EAAa3N,EAAM4N,GACpD,IAAInJ,EAAOmJ,aAAiBtI,EAAO,IAAIuC,EAAe+F,EAAOD,GAAeC,EAC5E,QAAaH,IAATzN,EACA,MAAM,IAAIP,MAAMkO,EAAc,sBAAwBlJ,EAAK+D,iBAE/D,GAAoB,oBAATxI,EACP,MAAM,IAAIP,MAAMkO,EACZ,uBACAlJ,EAAK+D,gBACL,oBACAxI,EAAK5D,YAEb,GAAI2D,EAAoBC,GACpB,MAAM,IAAIP,MAAMkO,EAAc,YAAc3N,EAAK5D,WAAa,IAAMqI,EAAK+D,iBAG7E,GAAoB,kBAATxI,GACPA,EAAK9B,OAAS6O,GAAiB,GAC/B/R,EAAKkN,aAAalI,GAAQ+M,GAC1B,MAAM,IAAItN,MAAMkO,EACZ,kCACAZ,GACA,eACAtI,EAAK+D,gBACL,MACAxI,EAAKsC,UAAU,EAAG,IAClB,SAIR,GAAItC,GAAwB,kBAATA,EAAmB,CAClC,IAAI6N,GAAgB,EAChBC,GAAmB,EAqBvB,GApBAvL,EAAKvC,GAAM,SAAUvE,EAAKZ,GACtB,GAAY,WAARY,EACAoS,GAAgB,OAEf,GAAY,cAARpS,GAA+B,QAARA,IAC5BqS,GAAmB,GACdd,GAAWvR,IACZ,MAAM,IAAIgE,MAAMkO,EACZ,6BACAlS,EACA,KACAgJ,EAAK+D,gBAJOmF,wFASxBlJ,EAAK1C,KAAKtG,GACViS,GAAqBC,EAAa9S,EAAO4J,GACzCA,EAAK2D,SAELyF,GAAiBC,EACjB,MAAM,IAAIrO,MAAMkO,EACZ,4BACAlJ,EAAK+D,gBACL,sCAUZuF,GAA6B,SAAUJ,EAAaK,GACpD,IAAI5P,EAAG6P,EACP,IAAK7P,EAAI,EAAGA,EAAI4P,EAAW9P,OAAQE,IAAK,CACpC6P,EAAUD,EAAW5P,GAErB,IADA,IAAIyD,EAAOoM,EAAQ1H,QACVqB,EAAI,EAAGA,EAAI/F,EAAK3D,OAAQ0J,IAC7B,GAAgB,cAAZ/F,EAAK+F,IAAsBA,IAAM/F,EAAK3D,OAAS,QAC9C,IAAK8O,GAAWnL,EAAK+F,IACtB,MAAM,IAAInI,MAAMkO,EACZ,4BACA9L,EAAK+F,GACL,aACAqG,EAAQ7R,WAJIuR,uFAa5BK,EAAWhM,KAAKsD,EAAK8B,cACrB,IAAI8G,EAAW,KACf,IAAK9P,EAAI,EAAGA,EAAI4P,EAAW9P,OAAQE,IAAK,CAEpC,GADA6P,EAAUD,EAAW5P,GACJ,OAAb8P,GAAqBA,EAAS1R,SAASyR,GACvC,MAAM,IAAIxO,MAAMkO,EACZ,mBACAO,EAAS9R,WACT,qCACA6R,EAAQ7R,YAEhB8R,EAAWD,IAafE,GAA+B,SAAUb,EAAQC,EAAgBvN,EAAMyE,EAAM+I,GAC7E,IAAIA,QAAqBC,IAATzN,EAAhB,CAGA,IAAI2N,EAAc3S,EAAK2S,YAAYL,EAAQC,EAAgBC,GAC3D,IAAMxN,GAAwB,kBAATA,GAAsB1B,MAAMC,QAAQyB,GACrD,MAAM,IAAIP,MAAMkO,EAAc,0DAElC,IAAIK,EAAa,GACjBzL,EAAKvC,GAAM,SAAUvE,EAAKZ,GACtB,IAAIoT,EAAU,IAAI3I,EAAK7J,GAEvB,GADAiS,GAAqBC,EAAa9S,EAAO4J,EAAKkC,MAAMsH,IAC1B,cAAtBA,EAAQ/H,YACHiH,GAAgBtS,GACjB,MAAM,IAAI4E,MAAMkO,EACZ,kCACAM,EAAQ7R,WAFIuR,gGAOxBK,EAAWjM,KAAKkM,MAEpBF,GAA2BJ,EAAaK,KAExCI,GAAmB,SAAUd,EAAQC,EAAgBH,EAAUI,GAC/D,IAAIA,QAAyBC,IAAbL,EAAhB,CAGA,GAAIrN,EAAoBqN,GACpB,MAAM,IAAI3N,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GACrD,MACAJ,EAAShR,WAFGpB,6FAOpB,IAAKmS,GAAgBC,GACjB,MAAM,IAAI3N,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GAAzCxS,yFAKpBqT,GAAoB,SAAUf,EAAQC,EAAgBe,EAAWd,GACjE,IAAIA,QAA0BC,IAAda,EAGhB,OAAQA,GACJ,IAAK,QACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,cACD,MACJ,QACI,MAAM,IAAI7O,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GAAzCxS,8GAKxBuT,GAAc,SAAUjB,EAAQC,EAAgB9R,EAAK+R,GACrD,KAAIA,QAAoBC,IAARhS,KAGXuR,GAAWvR,GACZ,MAAM,IAAIgE,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GACrD,yBACA/R,EAFYT,qGAOpBwT,GAAqB,SAAUlB,EAAQC,EAAgBpH,EAAYqH,GACnE,KAAIA,QAA2BC,IAAftH,KAGX8G,GAAkB9G,GACnB,MAAM,IAAI1G,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GACrD,0BACArH,EAFYnL,qFAOpByT,GAAyB,SAAUnB,EAAQC,EAAgBpH,EAAYqH,GACnErH,IAEAA,EAAaA,EAAWyE,QAAQ,mBAAoB,MAExD4D,GAAmBlB,EAAQC,EAAgBpH,EAAYqH,IAEvDkB,GAAuB,SAAUpB,EAAQ7I,GACzC,GAAwB,UAApBA,EAAKsB,WACL,MAAM,IAAItG,MAAM6N,EAAS,8CAG7BqB,GAAc,SAAUrB,EAAQC,EAAgBtB,GAEhD,IAAI9F,EAAa8F,EAAUxH,KAAKrI,WAChC,GAAyC,kBAA5B6P,EAAUG,SAAShD,MACO,IAAnC6C,EAAUG,SAAShD,KAAKlL,SACtB8O,GAAWf,EAAUG,SAAS9C,YACc,cAA1C2C,EAAUG,SAAShD,KAAK1D,MAAM,KAAK,IAChB,IAAtBS,EAAWjI,SAAiBgP,GAAsB/G,GACnD,MAAM,IAAI1G,MAAMzE,EAAK2S,YAAYL,EAAQC,GAAgB,GAAzCvS,yFAKpB4T,GAAkB,SAAUtB,EAAQC,EAAgBsB,EAAMrB,GAC1D,KAAIA,QAAqBC,IAAToB,IAGI,mBAATA,EACP,MAAM,IAAIpP,MAAMzE,EAAK2S,YAAYL,EAAQC,EAAgBC,GAAY,uBAuBzEsB,GAA8B,WAK9B,SAASA,EAAaC,EAAOnB,GACzBvS,KAAK0T,MAAQA,EACb1T,KAAKuS,MAAQA,EA8EjB,OAxEAkB,EAAavT,UAAUyT,OAAS,SAAUC,GACtCjU,EAAKkU,iBAAiB,sBAAuB,EAAG,EAAGjR,UAAUC,QAC7DlD,EAAKmU,iBAAiB,sBAAuB,EAAGF,GAAY,GAC5D,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAK0T,MAAMO,mBAAmBjU,KAAKuS,MAAOwB,EAASG,aAAaN,IACzDG,EAASI,SAMpBV,EAAavT,UAAUW,OAAS,SAAU+S,GACtCjU,EAAKkU,iBAAiB,sBAAuB,EAAG,EAAGjR,UAAUC,QAC7DwQ,GAAqB,sBAAuBrT,KAAKuS,OACjD5S,EAAKmU,iBAAiB,sBAAuB,EAAGF,GAAY,GAC5D,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAK0T,MAAMU,gBAAgBpU,KAAKuS,MAAO,KAAMwB,EAASG,aAAaN,IAC5DG,EAASI,SAOpBV,EAAavT,UAAUC,IAAM,SAAUX,EAAOoU,GAC1CjU,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QAC1DwQ,GAAqB,mBAAoBrT,KAAKuS,OAC9CP,GAAwB,mBAAoB,EAAGxS,EAAOQ,KAAKuS,OAAO,GAClE5S,EAAKmU,iBAAiB,mBAAoB,EAAGF,GAAY,GACzD,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAK0T,MAAMU,gBAAgBpU,KAAKuS,MAAO/S,EAAOuU,EAASG,aAAaN,IAC7DG,EAASI,SAQpBV,EAAavT,UAAUmU,gBAAkB,SAAU7U,EAAOuS,EAAU6B,GAChEjU,EAAKkU,iBAAiB,+BAAgC,EAAG,EAAGjR,UAAUC,QACtEwQ,GAAqB,+BAAgCrT,KAAKuS,OAC1DP,GAAwB,+BAAgC,EAAGxS,EAAOQ,KAAKuS,OAAO,GAC9EQ,GAAiB,+BAAgC,EAAGhB,GAAU,GAC9DpS,EAAKmU,iBAAiB,+BAAgC,EAAGF,GAAY,GACrE,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAK0T,MAAMY,4BAA4BtU,KAAKuS,MAAO/S,EAAOuS,EAAUgC,EAASG,aAAaN,IACnFG,EAASI,SAOpBV,EAAavT,UAAUkC,OAAS,SAAUmS,EAAeX,GAGrD,GAFAjU,EAAKkU,iBAAiB,sBAAuB,EAAG,EAAGjR,UAAUC,QAC7DwQ,GAAqB,sBAAuBrT,KAAKuS,OAC7CtP,MAAMC,QAAQqR,GAAgB,CAE9B,IADA,IAAIC,EAAmB,GACdzR,EAAI,EAAGA,EAAIwR,EAAc1R,SAAUE,EACxCyR,EAAiB,GAAKzR,GAAKwR,EAAcxR,GAE7CwR,EAAgBC,EAChBnQ,EAAK,gOAGTyO,GAA6B,sBAAuB,EAAGyB,EAAevU,KAAKuS,OAAO,GAClF5S,EAAKmU,iBAAiB,sBAAuB,EAAGF,GAAY,GAC5D,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAK0T,MAAMe,mBAAmBzU,KAAKuS,MAAOgC,EAAeR,EAASG,aAAaN,IACxEG,EAASI,SAEbV,EArFsB,GAwG7BiB,GAAmC,WAQnC,SAASA,EAAkBC,EAAWC,GAClC5U,KAAK2U,UAAYA,EACjB3U,KAAK4U,SAAWA,EAQpB,OAJAF,EAAkBxU,UAAU2U,OAAS,WAEjC,OADAlV,EAAKkU,iBAAiB,2BAA4B,EAAG,EAAGjR,UAAUC,QAC3D,CAAE8R,UAAW3U,KAAK2U,UAAWC,SAAU5U,KAAK4U,SAASC,WAEzDH,EAlB2B,GAmDlCI,GAAa,WAEb,IAAIC,EAAa,mEAGbC,EAAe,EAKfC,EAAgB,GACpB,OAAO,SAAUC,GACb,IAEInS,EAFAoS,EAAgBD,IAAQF,EAC5BA,EAAeE,EAEf,IAAIE,EAAiB,IAAInS,MAAM,GAC/B,IAAKF,EAAI,EAAGA,GAAK,EAAGA,IAChBqS,EAAerS,GAAKgS,EAAWlF,OAAOqF,EAAM,IAG5CA,EAAM1P,KAAKC,MAAMyP,EAAM,IAE3BvV,EAAK8D,OAAe,IAARyR,EAAW,4BACvB,IAAIpT,EAAKsT,EAAehN,KAAK,IAC7B,GAAK+M,EAKA,CAGD,IAAKpS,EAAI,GAAIA,GAAK,GAA0B,KAArBkS,EAAclS,GAAWA,IAC5CkS,EAAclS,GAAK,EAEvBkS,EAAclS,UAVd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAChBkS,EAAclS,GAAKyC,KAAKC,MAAsB,GAAhBD,KAAK6P,UAW3C,IAAKtS,EAAI,EAAGA,EAAI,GAAIA,IAChBjB,GAAMiT,EAAWlF,OAAOoF,EAAclS,IAG1C,OADApD,EAAK8D,OAAqB,KAAd3B,EAAGe,OAAe,oCACvBf,GAzCE,GAoEbwT,GAA2B,WAC3B,SAASA,EAAUxU,EAAMyU,GACrBvV,KAAKc,KAAOA,EACZd,KAAKuV,KAAOA,EAWhB,OAHAD,EAAUE,KAAO,SAAU1U,EAAMyU,GAC7B,OAAO,IAAID,EAAUxU,EAAMyU,IAExBD,EAdmB,GAqC1BG,GAAuB,WACvB,SAASA,KA8BT,OAxBAA,EAAMvV,UAAUwV,WAAa,WACzB,OAAO1V,KAAK2V,QAAQ7R,KAAK9D,OAU7ByV,EAAMvV,UAAU0V,oBAAsB,SAAUC,EAASC,GACrD,IAAIC,EAAa,IAAIT,GAAU1P,EAAUiQ,GACrCG,EAAa,IAAIV,GAAU1P,EAAUkQ,GACzC,OAAgD,IAAzC9V,KAAK2V,QAAQI,EAAYC,IAMpCP,EAAMvV,UAAU+V,QAAU,WAEtB,OAAOX,GAAUY,KAEdT,EA/Be,GAmDtBU,GAA0B,SAAUC,GAEpC,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAOjT,MAAMnD,KAAM4C,YAAc5C,KA+D/D,OAjEAN,EAAM2W,UAAUF,EAAUC,GAI1B/W,OAAOC,eAAe6W,EAAU,eAAgB,CAC5C1V,IAAK,WACD,OAAO+P,IAEXrQ,IAAK,SAAUmW,GACX9F,GAAe8F,GAEnB9L,YAAY,EACZC,cAAc,IAKlB0L,EAASjW,UAAUyV,QAAU,SAAU5P,EAAGC,GACtC,OAAOF,EAAYC,EAAEjF,KAAMkF,EAAElF,OAKjCqV,EAASjW,UAAUqW,YAAc,SAAUhB,GAGvC,MAAM5V,EAAK6W,eAAe,oDAK9BL,EAASjW,UAAU0V,oBAAsB,SAAUC,EAASC,GACxD,OAAO,GAKXK,EAASjW,UAAU+V,QAAU,WAEzB,OAAOX,GAAUY,KAKrBC,EAASjW,UAAUuW,QAAU,WAGzB,OAAO,IAAInB,GAAUzP,EAAU2K,KAOnC2F,EAASjW,UAAUwW,SAAW,SAAUC,EAAY7V,GAGhD,OAFAnB,EAAK8D,OAA6B,kBAAfkT,EAAyB,gDAErC,IAAIrB,GAAUqB,EAAYnG,KAKrC2F,EAASjW,UAAUa,SAAW,WAC1B,MAAO,QAEJoV,EAlEkB,CAmE3BV,IACEmB,GAAY,IAAIT,GAmBpB,SAASU,GAAWP,GAChB7F,GAAW6F,EAMf,IA2CIQ,GAwQAC,GACAC,GApTAC,GAAmB,SAAUlF,GAC7B,MAAwB,kBAAbA,EACA,UAAY3K,EAAsB2K,GAGlC,UAAYA,GAQvBmF,GAAuB,SAAUC,GACjC,GAAIA,EAAaC,aAAc,CAC3B,IAAId,EAAMa,EAAab,MACvB3W,EAAK8D,OAAsB,kBAAR6S,GACA,kBAARA,GACS,kBAARA,GAAoB3W,EAAKwB,SAASmV,EAAK,OAAS,6CAG5D3W,EAAK8D,OAAO0T,IAAiB1G,IAAY0G,EAAa1L,UAAW,gCAGrE9L,EAAK8D,OAAO0T,IAAiB1G,IAAY0G,EAAaE,cAAc5L,UAAW,uDAyB/E6L,GAA0B,WAO1B,SAASA,EAASC,EAAQC,QACA,IAAlBA,IAA4BA,EAAgBF,EAASR,0BAA0BW,YACnFzX,KAAKuX,OAASA,EACdvX,KAAKwX,cAAgBA,EACrBxX,KAAK0X,UAAY,KACjB/X,EAAK8D,YAAuB2O,IAAhBpS,KAAKuX,QAAwC,OAAhBvX,KAAKuX,OAAiB,4DAC/DL,GAAqBlX,KAAKwX,eAkO9B,OAhOAnY,OAAOC,eAAegY,EAAU,4BAA6B,CACzD7W,IAAK,WACD,OAAOqW,IAEX3W,IAAK,SAAUmW,GACXQ,GAA4BR,GAEhC9L,YAAY,EACZC,cAAc,IAGlB6M,EAASpX,UAAUkX,WAAa,WAC5B,OAAO,GAGXE,EAASpX,UAAUmX,YAAc,WAC7B,OAAOrX,KAAKwX,eAGhBF,EAASpX,UAAUyX,eAAiB,SAAUC,GAC1C,OAAO,IAAIN,EAAStX,KAAKuX,OAAQK,IAGrCN,EAASpX,UAAU2X,kBAAoB,SAAUC,GAE7C,MAAkB,cAAdA,EACO9X,KAAKwX,cAGLF,EAASR,0BAA0BW,YAIlDH,EAASpX,UAAU6X,SAAW,SAAU3O,GACpC,OAAIA,EAAKqC,UACEzL,KAEkB,cAApBoJ,EAAKsB,WACH1K,KAAKwX,cAGLF,EAASR,0BAA0BW,YAMlDH,EAASpX,UAAU8X,SAAW,WAC1B,OAAO,GAGXV,EAASpX,UAAU+X,wBAA0B,SAAUH,EAAWI,GAC9D,OAAO,MAGXZ,EAASpX,UAAUiY,qBAAuB,SAAUL,EAAWM,GAC3D,MAAkB,cAAdN,EACO9X,KAAK2X,eAAeS,GAEtBA,EAAa3M,WAA2B,cAAdqM,EACxB9X,KAGAsX,EAASR,0BAA0BW,WAAWU,qBAAqBL,EAAWM,GAAcT,eAAe3X,KAAKwX,gBAI/HF,EAASpX,UAAUmY,YAAc,SAAUjP,EAAMgP,GAC7C,IAAIE,EAAQlP,EAAKsB,WACjB,OAAc,OAAV4N,EACOF,EAEFA,EAAa3M,WAAuB,cAAV6M,EACxBtY,MAGPL,EAAK8D,OAAiB,cAAV6U,GAA8C,IAArBlP,EAAKuB,YAAmB,8CACtD3K,KAAKmY,qBAAqBG,EAAOhB,EAASR,0BAA0BW,WAAWY,YAAYjP,EAAKwB,WAAYwN,MAI3Hd,EAASpX,UAAUuL,QAAU,WACzB,OAAO,GAGX6L,EAASpX,UAAUqY,YAAc,WAC7B,OAAO,GAGXjB,EAASpX,UAAUsY,aAAe,SAAUC,EAAOC,GAC/C,OAAO,GAKXpB,EAASpX,UAAUoW,IAAM,SAAUqC,GAC/B,OAAIA,IAAiB3Y,KAAKqX,cAAc5L,UAC7B,CACH,SAAUzL,KAAK4Y,WACf,YAAa5Y,KAAKqX,cAAcf,OAI7BtW,KAAK4Y,YAIpBtB,EAASpX,UAAU2Y,KAAO,WACtB,GAAuB,OAAnB7Y,KAAK0X,UAAoB,CACzB,IAAIoB,EAAS,GACR9Y,KAAKwX,cAAc/L,YACpBqN,GACI,YACI7B,GAAiBjX,KAAKwX,cAAclB,OACpC,KAEZ,IAAIxH,SAAc9O,KAAKuX,OACvBuB,GAAUhK,EAAO,IAEbgK,GADS,WAAThK,EACU1H,EAAsBpH,KAAKuX,QAG3BvX,KAAKuX,OAEnBvX,KAAK0X,UAAY3V,EAAK+W,GAE1B,OAAO9Y,KAAK0X,WAMhBJ,EAASpX,UAAU0Y,SAAW,WAC1B,OAAO5Y,KAAKuX,QAKhBD,EAASpX,UAAU6Y,UAAY,SAAUzM,GACrC,OAAIA,IAAUgL,EAASR,0BAA0BW,WACtC,EAEFnL,aAAiBgL,EAASR,2BACvB,GAGRnX,EAAK8D,OAAO6I,EAAM8K,aAAc,qBACzBpX,KAAKgZ,mBAAmB1M,KASvCgL,EAASpX,UAAU8Y,mBAAqB,SAAUC,GAC9C,IAAIC,SAAuBD,EAAU1B,OACjC4B,SAAsBnZ,KAAKuX,OAC3B6B,EAAa9B,EAAS+B,iBAAiB5U,QAAQyU,GAC/CI,EAAYhC,EAAS+B,iBAAiB5U,QAAQ0U,GAGlD,OAFAxZ,EAAK8D,OAAO2V,GAAc,EAAG,sBAAwBF,GACrDvZ,EAAK8D,OAAO6V,GAAa,EAAG,sBAAwBH,GAChDC,IAAeE,EAEM,WAAjBH,EAEO,EAIHnZ,KAAKuX,OAAS0B,EAAU1B,QAChB,EAEHvX,KAAKuX,SAAW0B,EAAU1B,OACxB,EAGA,EAKR+B,EAAYF,GAM3B9B,EAASpX,UAAUqZ,UAAY,WAC3B,OAAOvZ,MAKXsX,EAASpX,UAAUsZ,UAAY,WAC3B,OAAO,GAKXlC,EAASpX,UAAUmM,OAAS,SAAUC,GAIlC,GAAIA,IAAUtM,KACV,OAAO,EAEN,GAAIsM,EAAM8K,aAAc,CACzB,IAAI6B,EAAY3M,EAChB,OAAQtM,KAAKuX,SAAW0B,EAAU1B,QAC9BvX,KAAKwX,cAAcnL,OAAO4M,EAAUzB,eAGxC,OAAO,GASfF,EAAS+B,iBAAmB,CAAC,SAAU,UAAW,SAAU,UACrD/B,EA/OkB,GAoQ7B,SAASmC,GAAgBnD,GACrBS,GAAeT,EAEnB,SAASoD,GAAapD,GAClBU,GAAaV,EAOjB,IAq2BIqD,GAyKAlC,GA9gCAmC,GAA+B,SAAUxD,GAEzC,SAASwD,IACL,OAAkB,OAAXxD,GAAmBA,EAAOjT,MAAMnD,KAAM4C,YAAc5C,KAwD/D,OA1DAN,EAAM2W,UAAUuD,EAAexD,GAO/BwD,EAAc1Z,UAAUyV,QAAU,SAAU5P,EAAGC,GAC3C,IAAI6T,EAAY9T,EAAEwP,KAAK8B,cACnByC,EAAY9T,EAAEuP,KAAK8B,cACnB0C,EAAWF,EAAUd,UAAUe,GACnC,OAAiB,IAAbC,EACOjU,EAAYC,EAAEjF,KAAMkF,EAAElF,MAGtBiZ,GAMfH,EAAc1Z,UAAUqW,YAAc,SAAUhB,GAC5C,OAAQA,EAAK8B,cAAc5L,WAK/BmO,EAAc1Z,UAAU0V,oBAAsB,SAAUC,EAASC,GAC7D,OAAQD,EAAQwB,cAAchL,OAAOyJ,EAAQuB,gBAKjDuC,EAAc1Z,UAAU+V,QAAU,WAE9B,OAAOX,GAAUY,KAKrB0D,EAAc1Z,UAAUuW,QAAU,WAC9B,OAAO,IAAInB,GAAUzP,EAAU,IAAIyR,GAAS,kBAAmBN,MAOnE4C,EAAc1Z,UAAUwW,SAAW,SAAUC,EAAY7V,GACrD,IAAIqW,EAAeJ,GAAaJ,GAChC,OAAO,IAAIrB,GAAUxU,EAAM,IAAIwW,GAAS,kBAAmBH,KAK/DyC,EAAc1Z,UAAUa,SAAW,WAC/B,MAAO,aAEJ6Y,EA3DuB,CA4DhCnE,IACEuE,GAAiB,IAAIJ,GAqBrBK,GAAmC,WASnC,SAASA,EAAkB1E,EAAM2E,EAAUC,EAAYC,EAAYC,QACtC,IAArBA,IAA+BA,EAAmB,MACtDra,KAAKoa,WAAaA,EAClBpa,KAAKqa,iBAAmBA,EAIxBra,KAAKsa,WAAa,GAClB,IAAIlO,EAAM,EACV,OAAQmJ,EAAK9J,UAOT,GANA8J,EAAOA,EACPnJ,EAAM8N,EAAWC,EAAW5E,EAAKnV,IAAK8Z,GAAY,EAE9CE,IACAhO,IAAQ,GAERA,EAAM,EAGFmJ,EADAvV,KAAKoa,WACE7E,EAAKvJ,KAGLuJ,EAAKtJ,UAGf,IAAY,IAARG,EAAW,CAEhBpM,KAAKsa,WAAW5T,KAAK6O,GACrB,MAIAvV,KAAKsa,WAAW5T,KAAK6O,GAEjBA,EADAvV,KAAKoa,WACE7E,EAAKtJ,MAGLsJ,EAAKvJ,MAgD5B,OA3CAiO,EAAkB/Z,UAAUqa,QAAU,WAClC,GAA+B,IAA3Bva,KAAKsa,WAAWzX,OAChB,OAAO,KAEX,IACI2X,EADAjF,EAAOvV,KAAKsa,WAAWvN,MAQ3B,GALIyN,EADAxa,KAAKqa,iBACIra,KAAKqa,iBAAiB9E,EAAKnV,IAAKmV,EAAK/V,OAGrC,CAAEY,IAAKmV,EAAKnV,IAAKZ,MAAO+V,EAAK/V,OAEtCQ,KAAKoa,WAAY,CACjB7E,EAAOA,EAAKvJ,KACZ,OAAQuJ,EAAK9J,UACTzL,KAAKsa,WAAW5T,KAAK6O,GACrBA,EAAOA,EAAKtJ,UAGf,CACDsJ,EAAOA,EAAKtJ,MACZ,OAAQsJ,EAAK9J,UACTzL,KAAKsa,WAAW5T,KAAK6O,GACrBA,EAAOA,EAAKvJ,KAGpB,OAAOwO,GAEXP,EAAkB/Z,UAAUua,QAAU,WAClC,OAAOza,KAAKsa,WAAWzX,OAAS,GAEpCoX,EAAkB/Z,UAAUwa,KAAO,WAC/B,GAA+B,IAA3B1a,KAAKsa,WAAWzX,OAChB,OAAO,KAEX,IAAI0S,EAAOvV,KAAKsa,WAAWta,KAAKsa,WAAWzX,OAAS,GACpD,OAAI7C,KAAKqa,iBACEra,KAAKqa,iBAAiB9E,EAAKnV,IAAKmV,EAAK/V,OAGrC,CAAEY,IAAKmV,EAAKnV,IAAKZ,MAAO+V,EAAK/V,QAGrCya,EA9F2B,GAmGlCU,GAA0B,WAS1B,SAASA,EAASva,EAAKZ,EAAOob,EAAO5O,EAAMC,GACvCjM,KAAKI,IAAMA,EACXJ,KAAKR,MAAQA,EACbQ,KAAK4a,MAAiB,MAATA,EAAgBA,EAAQD,EAASE,IAC9C7a,KAAKgM,KACO,MAARA,EAAeA,EAAO8O,GAAUrD,WACpCzX,KAAKiM,MACQ,MAATA,EAAgBA,EAAQ6O,GAAUrD,WAkQ1C,OAtPAkD,EAASza,UAAU6a,KAAO,SAAU3a,EAAKZ,EAAOob,EAAO5O,EAAMC,GACzD,OAAO,IAAI0O,EAAgB,MAAPva,EAAcA,EAAMJ,KAAKI,IAAc,MAATZ,EAAgBA,EAAQQ,KAAKR,MAAgB,MAATob,EAAgBA,EAAQ5a,KAAK4a,MAAe,MAAR5O,EAAeA,EAAOhM,KAAKgM,KAAe,MAATC,EAAgBA,EAAQjM,KAAKiM,QAK5L0O,EAASza,UAAU8a,MAAQ,WACvB,OAAOhb,KAAKgM,KAAKgP,QAAU,EAAIhb,KAAKiM,MAAM+O,SAK9CL,EAASza,UAAUuL,QAAU,WACzB,OAAO,GAWXkP,EAASza,UAAU+a,iBAAmB,SAAUvC,GAC5C,OAAQ1Y,KAAKgM,KAAKiP,iBAAiBvC,MAC7BA,EAAO1Y,KAAKI,IAAKJ,KAAKR,QACxBQ,KAAKiM,MAAMgP,iBAAiBvC,IAUpCiC,EAASza,UAAUgb,iBAAmB,SAAUxC,GAC5C,OAAQ1Y,KAAKiM,MAAMiP,iBAAiBxC,IAChCA,EAAO1Y,KAAKI,IAAKJ,KAAKR,QACtBQ,KAAKgM,KAAKkP,iBAAiBxC,IAMnCiC,EAASza,UAAUib,KAAO,WACtB,OAAInb,KAAKgM,KAAKP,UACHzL,KAGAA,KAAKgM,KAAKmP,QAMzBR,EAASza,UAAUkb,OAAS,WACxB,OAAOpb,KAAKmb,OAAO/a,KAKvBua,EAASza,UAAUmb,OAAS,WACxB,OAAIrb,KAAKiM,MAAMR,UACJzL,KAAKI,IAGLJ,KAAKiM,MAAMoP,UAU1BV,EAASza,UAAUob,OAAS,SAAUlb,EAAKZ,EAAO2a,GAC9C,IAAIoB,EAAIvb,KACJoM,EAAM+N,EAAW/Z,EAAKmb,EAAEnb,KAU5B,OARImb,EADAnP,EAAM,EACFmP,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAEvP,KAAKsP,OAAOlb,EAAKZ,EAAO2a,GAAa,MAEvD,IAAR/N,EACDmP,EAAER,KAAK,KAAMvb,EAAO,KAAM,KAAM,MAGhC+b,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAEtP,MAAMqP,OAAOlb,EAAKZ,EAAO2a,IAE3DoB,EAAEC,UAMbb,EAASza,UAAUub,WAAa,WAC5B,GAAIzb,KAAKgM,KAAKP,UACV,OAAOqP,GAAUrD,WAErB,IAAI8D,EAAIvb,KAKR,OAJKub,EAAEvP,KAAK0P,UAAaH,EAAEvP,KAAKA,KAAK0P,WACjCH,EAAIA,EAAEI,gBAEVJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAEvP,KAAKyP,aAAc,MAC3CF,EAAEC,UAObb,EAASza,UAAUW,OAAS,SAAUT,EAAK+Z,GACvC,IAAIoB,EAAGK,EAEP,GADAL,EAAIvb,KACAma,EAAW/Z,EAAKmb,EAAEnb,KAAO,EACpBmb,EAAEvP,KAAKP,WAAc8P,EAAEvP,KAAK0P,UAAaH,EAAEvP,KAAKA,KAAK0P,WACtDH,EAAIA,EAAEI,gBAEVJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAEvP,KAAKnL,OAAOT,EAAK+Z,GAAa,UAE5D,CAOD,GANIoB,EAAEvP,KAAK0P,WACPH,EAAIA,EAAEM,gBAELN,EAAEtP,MAAMR,WAAc8P,EAAEtP,MAAMyP,UAAaH,EAAEtP,MAAMD,KAAK0P,WACzDH,EAAIA,EAAEO,iBAEqB,IAA3B3B,EAAW/Z,EAAKmb,EAAEnb,KAAY,CAC9B,GAAImb,EAAEtP,MAAMR,UACR,OAAOqP,GAAUrD,WAGjBmE,EAAWL,EAAEtP,MAAMkP,OACnBI,EAAIA,EAAER,KAAKa,EAASxb,IAAKwb,EAASpc,MAAO,KAAM,KAAM+b,EAAEtP,MAAMwP,cAGrEF,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAEtP,MAAMpL,OAAOT,EAAK+Z,IAE3D,OAAOoB,EAAEC,UAMbb,EAASza,UAAUwb,OAAS,WACxB,OAAO1b,KAAK4a,OAMhBD,EAASza,UAAUsb,OAAS,WACxB,IAAID,EAAIvb,KAUR,OATIub,EAAEtP,MAAMyP,WAAaH,EAAEvP,KAAK0P,WAC5BH,EAAIA,EAAEQ,eAENR,EAAEvP,KAAK0P,UAAYH,EAAEvP,KAAKA,KAAK0P,WAC/BH,EAAIA,EAAEM,gBAENN,EAAEvP,KAAK0P,UAAYH,EAAEtP,MAAMyP,WAC3BH,EAAIA,EAAES,cAEHT,GAMXZ,EAASza,UAAUyb,aAAe,WAC9B,IAAIJ,EAAIvb,KAAKgc,aAMb,OALIT,EAAEtP,MAAMD,KAAK0P,WACbH,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAEtP,MAAM4P,gBAC3CN,EAAIA,EAAEQ,cACNR,EAAIA,EAAES,cAEHT,GAMXZ,EAASza,UAAU4b,cAAgB,WAC/B,IAAIP,EAAIvb,KAAKgc,aAKb,OAJIT,EAAEvP,KAAKA,KAAK0P,WACZH,EAAIA,EAAEM,eACNN,EAAIA,EAAES,cAEHT,GAMXZ,EAASza,UAAU6b,YAAc,WAC7B,IAAIE,EAAKjc,KAAK+a,KAAK,KAAM,KAAMJ,EAASE,IAAK,KAAM7a,KAAKiM,MAAMD,MAC9D,OAAOhM,KAAKiM,MAAM8O,KAAK,KAAM,KAAM/a,KAAK4a,MAAOqB,EAAI,OAMvDtB,EAASza,UAAU2b,aAAe,WAC9B,IAAIK,EAAKlc,KAAK+a,KAAK,KAAM,KAAMJ,EAASE,IAAK7a,KAAKgM,KAAKC,MAAO,MAC9D,OAAOjM,KAAKgM,KAAK+O,KAAK,KAAM,KAAM/a,KAAK4a,MAAO,KAAMsB,IAMxDvB,EAASza,UAAU8b,WAAa,WAC5B,IAAIhQ,EAAOhM,KAAKgM,KAAK+O,KAAK,KAAM,MAAO/a,KAAKgM,KAAK4O,MAAO,KAAM,MAC1D3O,EAAQjM,KAAKiM,MAAM8O,KAAK,KAAM,MAAO/a,KAAKiM,MAAM2O,MAAO,KAAM,MACjE,OAAO5a,KAAK+a,KAAK,KAAM,MAAO/a,KAAK4a,MAAO5O,EAAMC,IAQpD0O,EAASza,UAAUic,eAAiB,WAChC,IAAIC,EAAapc,KAAKqc,SACtB,OAAO7W,KAAKsC,IAAI,EAAKsU,IAAepc,KAAKgb,QAAU,GAMvDL,EAASza,UAAUmc,OAAS,WACxB,GAAIrc,KAAK0b,UAAY1b,KAAKgM,KAAK0P,SAC3B,MAAM,IAAItX,MAAM,0BAA4BpE,KAAKI,IAAM,IAAMJ,KAAKR,MAAQ,KAE9E,GAAIQ,KAAKiM,MAAMyP,SACX,MAAM,IAAItX,MAAM,mBAAqBpE,KAAKI,IAAM,IAAMJ,KAAKR,MAAQ,YAEvE,IAAI4c,EAAapc,KAAKgM,KAAKqQ,SAC3B,GAAID,IAAepc,KAAKiM,MAAMoQ,SAC1B,MAAM,IAAIjY,MAAM,uBAGhB,OAAOgY,GAAcpc,KAAK0b,SAAW,EAAI,IAGjDf,EAASE,KAAM,EACfF,EAAS2B,OAAQ,EACV3B,EAlRkB,GAuRzB4B,GAA+B,WAC/B,SAASA,KA2FT,OApFAA,EAAcrc,UAAU6a,KAAO,SAAU3a,EAAKZ,EAAOob,EAAO5O,EAAMC,GAC9D,OAAOjM,MAUXuc,EAAcrc,UAAUob,OAAS,SAAUlb,EAAKZ,EAAO2a,GACnD,OAAO,IAAIQ,GAASva,EAAKZ,EAAO,OASpC+c,EAAcrc,UAAUW,OAAS,SAAUT,EAAK+Z,GAC5C,OAAOna,MAKXuc,EAAcrc,UAAU8a,MAAQ,WAC5B,OAAO,GAKXuB,EAAcrc,UAAUuL,QAAU,WAC9B,OAAO,GAUX8Q,EAAcrc,UAAU+a,iBAAmB,SAAUvC,GACjD,OAAO,GAUX6D,EAAcrc,UAAUgb,iBAAmB,SAAUxC,GACjD,OAAO,GAKX6D,EAAcrc,UAAUkb,OAAS,WAC7B,OAAO,MAKXmB,EAAcrc,UAAUmb,OAAS,WAC7B,OAAO,MAMXkB,EAAcrc,UAAUmc,OAAS,WAC7B,OAAO,GAMXE,EAAcrc,UAAUwb,OAAS,WAC7B,OAAO,GAEJa,EA5FuB,GAkG9BzB,GAA2B,WAM3B,SAASA,EAAU0B,EAAaC,QACd,IAAVA,IAAoBA,EAAQ3B,EAAUrD,YAC1CzX,KAAKwc,YAAcA,EACnBxc,KAAKyc,MAAQA,EA0JjB,OAhJA3B,EAAU5a,UAAUob,OAAS,SAAUlb,EAAKZ,GACxC,OAAO,IAAIsb,EAAU9a,KAAKwc,YAAaxc,KAAKyc,MACvCnB,OAAOlb,EAAKZ,EAAOQ,KAAKwc,aACxBzB,KAAK,KAAM,KAAMJ,GAAS2B,MAAO,KAAM,QAQhDxB,EAAU5a,UAAUW,OAAS,SAAUT,GACnC,OAAO,IAAI0a,EAAU9a,KAAKwc,YAAaxc,KAAKyc,MACvC5b,OAAOT,EAAKJ,KAAKwc,aACjBzB,KAAK,KAAM,KAAMJ,GAAS2B,MAAO,KAAM,QAShDxB,EAAU5a,UAAUO,IAAM,SAAUL,GAChC,IAAIgM,EACAmJ,EAAOvV,KAAKyc,MAChB,OAAQlH,EAAK9J,UAAW,CAEpB,GADAW,EAAMpM,KAAKwc,YAAYpc,EAAKmV,EAAKnV,KACrB,IAARgM,EACA,OAAOmJ,EAAK/V,MAEP4M,EAAM,EACXmJ,EAAOA,EAAKvJ,KAEPI,EAAM,IACXmJ,EAAOA,EAAKtJ,OAGpB,OAAO,MAOX6O,EAAU5a,UAAUwc,kBAAoB,SAAUtc,GAC9C,IAAIgM,EAAKmJ,EAAOvV,KAAKyc,MAAOE,EAAc,KAC1C,OAAQpH,EAAK9J,UAAW,CAEpB,GADAW,EAAMpM,KAAKwc,YAAYpc,EAAKmV,EAAKnV,KACrB,IAARgM,EAAW,CACX,GAAKmJ,EAAKvJ,KAAKP,UAOV,OAAIkR,EACEA,EAAYvc,IAGZ,KAVPmV,EAAOA,EAAKvJ,KACZ,OAAQuJ,EAAKtJ,MAAMR,UACf8J,EAAOA,EAAKtJ,MAEhB,OAAOsJ,EAAKnV,IASXgM,EAAM,EACXmJ,EAAOA,EAAKvJ,KAEPI,EAAM,IACXuQ,EAAcpH,EACdA,EAAOA,EAAKtJ,OAGpB,MAAM,IAAI7H,MAAM,0EAKpB0W,EAAU5a,UAAUuL,QAAU,WAC1B,OAAOzL,KAAKyc,MAAMhR,WAKtBqP,EAAU5a,UAAU8a,MAAQ,WACxB,OAAOhb,KAAKyc,MAAMzB,SAKtBF,EAAU5a,UAAUkb,OAAS,WACzB,OAAOpb,KAAKyc,MAAMrB,UAKtBN,EAAU5a,UAAUmb,OAAS,WACzB,OAAOrb,KAAKyc,MAAMpB,UAWtBP,EAAU5a,UAAU+a,iBAAmB,SAAUvC,GAC7C,OAAO1Y,KAAKyc,MAAMxB,iBAAiBvC,IAUvCoC,EAAU5a,UAAUgb,iBAAmB,SAAUxC,GAC7C,OAAO1Y,KAAKyc,MAAMvB,iBAAiBxC,IAQvCoC,EAAU5a,UAAU0c,YAAc,SAAUC,GACxC,OAAO,IAAI5C,GAAkBja,KAAKyc,MAAO,KAAMzc,KAAKwc,aAAa,EAAOK,IAE5E/B,EAAU5a,UAAU4c,gBAAkB,SAAU1c,EAAKyc,GACjD,OAAO,IAAI5C,GAAkBja,KAAKyc,MAAOrc,EAAKJ,KAAKwc,aAAa,EAAOK,IAE3E/B,EAAU5a,UAAU6c,uBAAyB,SAAU3c,EAAKyc,GACxD,OAAO,IAAI5C,GAAkBja,KAAKyc,MAAOrc,EAAKJ,KAAKwc,aAAa,EAAMK,IAE1E/B,EAAU5a,UAAU8c,mBAAqB,SAAUH,GAC/C,OAAO,IAAI5C,GAAkBja,KAAKyc,MAAO,KAAMzc,KAAKwc,aAAa,EAAMK,IAM3E/B,EAAUrD,WAAa,IAAI8E,GACpBzB,EAnKmB,GAsL1BmC,GAAQzX,KAAK3B,IAAI,GAIjBqZ,GAA2B,WAI3B,SAASA,EAAUra,GACf,IAAIsa,EAAW,SAAUC,GAErB,OAAO7U,SAAU/C,KAAK3B,IAAIuZ,GAAOH,GAAQ,KAEzCI,EAAU,SAAUnV,GAAQ,OAAOK,SAAStF,MAAMiF,EAAO,GAAGE,KAAK,KAAM,IAC3EpI,KAAKgb,MAAQmC,EAASta,EAAS,GAC/B7C,KAAKsd,SAAWtd,KAAKgb,MAAQ,EAC7B,IAAIuC,EAAOF,EAAQrd,KAAKgb,OACxBhb,KAAKwd,MAAS3a,EAAS,EAAK0a,EAWhC,OANAL,EAAUhd,UAAUud,aAAe,WAE/B,IAAIjD,IAAWxa,KAAKwd,MAAS,GAAOxd,KAAKsd,UAEzC,OADAtd,KAAKsd,WACE9C,GAEJ0C,EAxBmB,GAyC1BQ,GAAgB,SAAUC,EAAWvR,EAAKwR,EAAOC,GACjDF,EAAUhX,KAAKyF,GACf,IAAI0R,EAAoB,SAAUC,EAAKC,GACnC,IACIC,EACA7d,EAFAyC,EAASmb,EAAOD,EAGpB,GAAe,IAAXlb,EACA,OAAO,KAEN,GAAe,IAAXA,EAGL,OAFAob,EAAYN,EAAUI,GACtB3d,EAAMwd,EAAQA,EAAMK,GAAaA,EAC1B,IAAItD,GAASva,EAAK6d,EAAU1I,KAAMoF,GAAS2B,MAAO,KAAM,MAI/D,IAAI4B,EAAS3V,SAAU1F,EAAS,EAAI,IAAMkb,EACtC/R,EAAO8R,EAAkBC,EAAKG,GAC9BjS,EAAQ6R,EAAkBI,EAAS,EAAGF,GAG1C,OAFAC,EAAYN,EAAUO,GACtB9d,EAAMwd,EAAQA,EAAMK,GAAaA,EAC1B,IAAItD,GAASva,EAAK6d,EAAU1I,KAAMoF,GAAS2B,MAAOtQ,EAAMC,IAGnEkS,EAAmB,SAAUC,GAuB7B,IAtBA,IAAI7I,EAAO,KACP8I,EAAO,KACP5F,EAAQkF,EAAU9a,OAClByb,EAAe,SAAUC,EAAW3D,GACpC,IAAImD,EAAMtF,EAAQ8F,EACdP,EAAOvF,EACXA,GAAS8F,EACT,IAAIC,EAAYV,EAAkBC,EAAM,EAAGC,GACvCC,EAAYN,EAAUI,GACtB3d,EAAMwd,EAAQA,EAAMK,GAAaA,EACrCQ,EAAc,IAAI9D,GAASva,EAAK6d,EAAU1I,KAAMqF,EAAO,KAAM4D,KAE7DC,EAAgB,SAAUC,GACtBnJ,GACAA,EAAKvJ,KAAO0S,EACZnJ,EAAOmJ,IAGPL,EAAOK,EACPnJ,EAAOmJ,IAGN3b,EAAI,EAAGA,EAAIqb,EAAOpD,QAASjY,EAAG,CACnC,IAAI4b,EAAQP,EAAOX,eAEfc,EAAY/Y,KAAKsC,IAAI,EAAGsW,EAAOpD,OAASjY,EAAI,IAC5C4b,EACAL,EAAaC,EAAW5D,GAAS2B,QAIjCgC,EAAaC,EAAW5D,GAAS2B,OACjCgC,EAAaC,EAAW5D,GAASE,MAGzC,OAAOwD,GAEPD,EAAS,IAAIlB,GAAUS,EAAU9a,QACjCwb,EAAOF,EAAiBC,GAE5B,OAAO,IAAItD,GAAU+C,GAAazR,EAAKiS,IAoBvCO,GAAiB,GACjBC,GAA0B,WAC1B,SAASA,EAASC,EAAUC,GACxB/e,KAAK8e,SAAWA,EAChB9e,KAAK+e,UAAYA,EAyHrB,OAvHA1f,OAAOC,eAAeuf,EAAU,UAAW,CAIvCpe,IAAK,WAKD,OAJAd,EAAK8D,OAAOmb,IAAkB5E,GAAgB,uCAC9CL,GACIA,IACI,IAAIkF,EAAS,CAAE,YAAaD,IAAkB,CAAE,YAAa5E,KAC9DL,IAEXnP,YAAY,EACZC,cAAc,IAElBoU,EAAS3e,UAAUO,IAAM,SAAUue,GAC/B,IAAIC,EAAYtf,EAAKuf,QAAQlf,KAAK8e,SAAUE,GAC5C,IAAKC,EACD,MAAM,IAAI7a,MAAM,wBAA0B4a,GAE9C,OAAIC,aAAqBnE,GACdmE,EAKA,MAGfJ,EAAS3e,UAAUif,SAAW,SAAUC,GACpC,OAAOzf,EAAKwB,SAASnB,KAAK+e,UAAWK,EAAgBre,aAEzD8d,EAAS3e,UAAUmf,SAAW,SAAUD,EAAiBE,GACrD3f,EAAK8D,OAAO2b,IAAoBxI,GAAW,uEAC3C,IAUI2I,EAVA5B,EAAY,GACZ6B,GAAkB,EAClBC,EAAOH,EAAiB1C,YAAYtH,GAAUE,MAC9CvF,EAAOwP,EAAKlF,UAChB,MAAOtK,EACHuP,EACIA,GAAmBJ,EAAgB7I,YAAYtG,EAAKsF,MACxDoI,EAAUjX,KAAKuJ,GACfA,EAAOwP,EAAKlF,UAIZgF,EADAC,EACW9B,GAAcC,EAAWyB,EAAgB1J,cAGzCkJ,GAEf,IAAIc,EAAYN,EAAgBre,WAC5B4e,EAAcjgB,EAAMkgB,SAAS,GAAI5f,KAAK+e,WAC1CY,EAAYD,GAAaN,EACzB,IAAIS,EAAangB,EAAMkgB,SAAS,GAAI5f,KAAK8e,UAEzC,OADAe,EAAWH,GAAaH,EACjB,IAAIV,EAASgB,EAAYF,IAKpCd,EAAS3e,UAAU4f,aAAe,SAAU7B,EAAWqB,GACnD,IAAIS,EAAQ/f,KACR6f,EAAalgB,EAAKqgB,IAAIhgB,KAAK8e,UAAU,SAAUmB,EAAiBP,GAChE,IAAIjH,EAAQ9Y,EAAKuf,QAAQa,EAAMhB,UAAWW,GAE1C,GADA/f,EAAK8D,OAAOgV,EAAO,oCAAsCiH,GACrDO,IAAoBrB,GAAgB,CAEpC,GAAInG,EAAMlC,YAAY0H,EAAU1I,MAAO,CAEnC,IAAIoI,EAAY,GACZ8B,EAAOH,EAAiB1C,YAAYtH,GAAUE,MAC9CvF,EAAOwP,EAAKlF,UAChB,MAAOtK,EACCA,EAAKnP,OAASmd,EAAUnd,MACxB6c,EAAUjX,KAAKuJ,GAEnBA,EAAOwP,EAAKlF,UAGhB,OADAoD,EAAUjX,KAAKuX,GACRP,GAAcC,EAAWlF,EAAM/C,cAItC,OAAOkJ,GAIX,IAAIsB,EAAeZ,EAAiB7e,IAAIwd,EAAUnd,MAC9Cqf,EAAcF,EAIlB,OAHIC,IACAC,EAAcA,EAAYtf,OAAO,IAAIyU,GAAU2I,EAAUnd,KAAMof,KAE5DC,EAAY7E,OAAO2C,EAAWA,EAAU1I,SAGvD,OAAO,IAAIsJ,EAASgB,EAAY7f,KAAK+e,YAKzCF,EAAS3e,UAAUkgB,kBAAoB,SAAUnC,EAAWqB,GACxD,IAAIO,EAAalgB,EAAKqgB,IAAIhgB,KAAK8e,UAAU,SAAUmB,GAC/C,GAAIA,IAAoBrB,GAEpB,OAAOqB,EAGP,IAAIC,EAAeZ,EAAiB7e,IAAIwd,EAAUnd,MAClD,OAAIof,EACOD,EAAgBpf,OAAO,IAAIyU,GAAU2I,EAAUnd,KAAMof,IAIrDD,KAInB,OAAO,IAAIpB,EAASgB,EAAY7f,KAAK+e,YAElCF,EA5HkB;;;;;;;;;;;;;;;;;AA+I7B,SAASwB,GAAqBrU,EAAMC,GAChC,OAAOnG,EAAYkG,EAAKlL,KAAMmL,EAAMnL,MAExC,SAASwf,GAAgBtU,EAAMC,GAC3B,OAAOnG,EAAYkG,EAAMC;;;;;;;;;;;;;;;;GA6B7B,IAAIsU,GAA8B,WAQ9B,SAASA,EAAaC,EAAWhJ,EAAeiJ,GAC5CzgB,KAAKwgB,UAAYA,EACjBxgB,KAAKwX,cAAgBA,EACrBxX,KAAKygB,UAAYA,EACjBzgB,KAAK0X,UAAY,KAMb1X,KAAKwX,eACLN,GAAqBlX,KAAKwX,eAE1BxX,KAAKwgB,UAAU/U,WACf9L,EAAK8D,QAAQzD,KAAKwX,eAAiBxX,KAAKwX,cAAc/L,UAAW,wCA+XzE,OA5XApM,OAAOC,eAAeihB,EAAc,aAAc,CAC9C9f,IAAK,WACD,OAAQgX,KACHA,GAAa,IAAI8I,EAAa,IAAIzF,GAAUwF,IAAkB,KAAMzB,GAAS6B,WAEtFlW,YAAY,EACZC,cAAc,IAGlB8V,EAAargB,UAAUkX,WAAa,WAChC,OAAO,GAGXmJ,EAAargB,UAAUmX,YAAc,WACjC,OAAOrX,KAAKwX,eAAiBC,IAGjC8I,EAAargB,UAAUyX,eAAiB,SAAUC,GAC9C,OAAI5X,KAAKwgB,UAAU/U,UAERzL,KAGA,IAAIugB,EAAavgB,KAAKwgB,UAAW5I,EAAiB5X,KAAKygB,YAItEF,EAAargB,UAAU2X,kBAAoB,SAAUC,GAEjD,GAAkB,cAAdA,EACA,OAAO9X,KAAKqX,cAGZ,IAAI/L,EAAQtL,KAAKwgB,UAAU/f,IAAIqX,GAC/B,OAAiB,OAAVxM,EAAiBmM,GAAanM,GAI7CiV,EAAargB,UAAU6X,SAAW,SAAU3O,GACxC,IAAIkP,EAAQlP,EAAKsB,WACjB,OAAc,OAAV4N,EACOtY,KAEJA,KAAK6X,kBAAkBS,GAAOP,SAAS3O,EAAKwB,aAGvD2V,EAAargB,UAAU8X,SAAW,SAAUF,GACxC,OAAyC,OAAlC9X,KAAKwgB,UAAU/f,IAAIqX,IAG9ByI,EAAargB,UAAUiY,qBAAuB,SAAUL,EAAWM,GAE/D,GADAzY,EAAK8D,OAAO2U,EAAc,8CACR,cAAdN,EACA,OAAO9X,KAAK2X,eAAeS,GAG3B,IAAI6F,EAAY,IAAI3I,GAAUwC,EAAWM,GACrC+H,OAAc,EAAQQ,OAAc,EACpCvI,EAAa3M,WACb0U,EAAcngB,KAAKwgB,UAAU3f,OAAOiX,GACpC6I,EAAc3gB,KAAKygB,UAAUL,kBAAkBnC,EAAWje,KAAKwgB,aAG/DL,EAAcngB,KAAKwgB,UAAUlF,OAAOxD,EAAWM,GAC/CuI,EAAc3gB,KAAKygB,UAAUX,aAAa7B,EAAWje,KAAKwgB,YAE9D,IAAII,EAAcT,EAAY1U,UACxBgM,GACAzX,KAAKwX,cACX,OAAO,IAAI+I,EAAaJ,EAAaS,EAAaD,IAI1DJ,EAAargB,UAAUmY,YAAc,SAAUjP,EAAMgP,GACjD,IAAIE,EAAQlP,EAAKsB,WACjB,GAAc,OAAV4N,EACA,OAAOF,EAGPzY,EAAK8D,OAA2B,cAApB2F,EAAKsB,YAAmD,IAArBtB,EAAKuB,YAAmB,8CACvE,IAAIkW,EAAoB7gB,KAAK6X,kBAAkBS,GAAOD,YAAYjP,EAAKwB,WAAYwN,GACnF,OAAOpY,KAAKmY,qBAAqBG,EAAOuI,IAIhDN,EAAargB,UAAUuL,QAAU,WAC7B,OAAOzL,KAAKwgB,UAAU/U,WAG1B8U,EAAargB,UAAUqY,YAAc,WACjC,OAAOvY,KAAKwgB,UAAUxF,SAG1BuF,EAAargB,UAAUoW,IAAM,SAAUqC,GACnC,GAAI3Y,KAAKyL,UACL,OAAO,KAEX,IAAInF,EAAM,GACNwa,EAAU,EAAGzF,EAAS,EAAG0F,GAAiB,EAW9C,GAVA/gB,KAAKwY,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAC7C5R,EAAIlG,GAAO8X,EAAU5B,IAAIqC,GACzBmI,IACIC,GAAkBR,EAAajX,gBAAgBX,KAAKvI,GACpDib,EAAS7V,KAAKoH,IAAIyO,EAAQzW,OAAOxE,IAGjC2gB,GAAiB,MAGpBpI,GAAgBoI,GAAkB1F,EAAS,EAAIyF,EAAS,CAEzD,IAAIE,EAAQ,GAEZ,IAAK,IAAI5gB,KAAOkG,EACZ0a,EAAM5gB,GAAOkG,EAAIlG,GAErB,OAAO4gB,EAMP,OAHIrI,IAAiB3Y,KAAKqX,cAAc5L,YACpCnF,EAAI,aAAetG,KAAKqX,cAAcf,OAEnChQ,GAIfia,EAAargB,UAAU2Y,KAAO,WAC1B,GAAuB,OAAnB7Y,KAAK0X,UAAoB,CACzB,IAAIuJ,EAAW,GACVjhB,KAAKqX,cAAc5L,YACpBwV,GACI,YACIhK,GAAiBjX,KAAKqX,cAAcf,OACpC,KAEZtW,KAAKwY,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAC7C,IAAIgJ,EAAYhJ,EAAUW,OACR,KAAdqI,IACAD,GAAY,IAAM7gB,EAAM,IAAM8gB,MAGtClhB,KAAK0X,UAAyB,KAAbuJ,EAAkB,GAAKlf,EAAKkf,GAEjD,OAAOjhB,KAAK0X,WAGhB6I,EAAargB,UAAU+X,wBAA0B,SAAUH,EAAWI,EAAWO,GAC7E,IAAI0I,EAAMnhB,KAAKohB,cAAc3I,GAC7B,GAAI0I,EAAK,CACL,IAAIE,EAAcF,EAAIzE,kBAAkB,IAAIpH,GAAUwC,EAAWI,IACjE,OAAOmJ,EAAcA,EAAYvgB,KAAO,KAGxC,OAAOd,KAAKwgB,UAAU9D,kBAAkB5E,IAOhDyI,EAAargB,UAAUohB,kBAAoB,SAAUlC,GACjD,IAAI+B,EAAMnhB,KAAKohB,cAAchC,GAC7B,GAAI+B,EAAK,CACL,IAAI/F,EAAS+F,EAAI/F,SACjB,OAAOA,GAAUA,EAAOta,KAGxB,OAAOd,KAAKwgB,UAAUpF,UAO9BmF,EAAargB,UAAUqhB,cAAgB,SAAUnC,GAC7C,IAAIhE,EAASpb,KAAKshB,kBAAkBlC,GACpC,OAAIhE,EACO,IAAI9F,GAAU8F,EAAQpb,KAAKwgB,UAAU/f,IAAI2a,IAGzC,MAQfmF,EAAargB,UAAUshB,iBAAmB,SAAUpC,GAChD,IAAI+B,EAAMnhB,KAAKohB,cAAchC,GAC7B,GAAI+B,EAAK,CACL,IAAI9F,EAAS8F,EAAI9F,SACjB,OAAOA,GAAUA,EAAOva,KAGxB,OAAOd,KAAKwgB,UAAUnF,UAO9BkF,EAAargB,UAAUuhB,aAAe,SAAUrC,GAC5C,IAAI/D,EAASrb,KAAKwhB,iBAAiBpC,GACnC,OAAI/D,EACO,IAAI/F,GAAU+F,EAAQrb,KAAKwgB,UAAU/f,IAAI4a,IAGzC,MAMfkF,EAAargB,UAAUsY,aAAe,SAAUC,EAAOC,GACnD,IAAIyI,EAAMnhB,KAAKohB,cAAc3I,GAC7B,OAAI0I,EACOA,EAAIlG,kBAAiB,SAAUyG,GAClC,OAAOhJ,EAAOgJ,EAAY5gB,KAAM4gB,EAAYnM,SAIzCvV,KAAKwgB,UAAUvF,iBAAiBvC,IAO/C6H,EAAargB,UAAU0c,YAAc,SAAUwC,GAC3C,OAAOpf,KAAK8c,gBAAgBsC,EAAgBnJ,UAAWmJ,IAQ3DmB,EAAargB,UAAU4c,gBAAkB,SAAU6E,EAAWvC,GAC1D,IAAI+B,EAAMnhB,KAAKohB,cAAchC,GAC7B,GAAI+B,EACA,OAAOA,EAAIrE,gBAAgB6E,GAAW,SAAUvhB,GAAO,OAAOA,KAG9D,IAAIwhB,EAAW5hB,KAAKwgB,UAAU1D,gBAAgB6E,EAAU7gB,KAAMwU,GAAUE,MACpEvF,EAAO2R,EAASlH,OACpB,MAAe,MAARzK,GAAgBmP,EAAgBzJ,QAAQ1F,EAAM0R,GAAa,EAC9DC,EAASrH,UACTtK,EAAO2R,EAASlH,OAEpB,OAAOkH,GAOfrB,EAAargB,UAAU8c,mBAAqB,SAAUoC,GAClD,OAAOpf,KAAK+c,uBAAuBqC,EAAgB3I,UAAW2I,IAOlEmB,EAAargB,UAAU6c,uBAAyB,SAAU8E,EAASzC,GAC/D,IAAI+B,EAAMnhB,KAAKohB,cAAchC,GAC7B,GAAI+B,EACA,OAAOA,EAAIpE,uBAAuB8E,GAAS,SAAUzhB,GACjD,OAAOA,KAIX,IAAIwhB,EAAW5hB,KAAKwgB,UAAUzD,uBAAuB8E,EAAQ/gB,KAAMwU,GAAUE,MACzEvF,EAAO2R,EAASlH,OACpB,MAAe,MAARzK,GAAgBmP,EAAgBzJ,QAAQ1F,EAAM4R,GAAW,EAC5DD,EAASrH,UACTtK,EAAO2R,EAASlH,OAEpB,OAAOkH,GAMfrB,EAAargB,UAAU6Y,UAAY,SAAUzM,GACzC,OAAItM,KAAKyL,UACDa,EAAMb,UACC,GAGC,EAGPa,EAAM8K,cAAgB9K,EAAMb,UAC1B,EAEFa,IAAUwV,IACP,EAID,GAMfvB,EAAargB,UAAUqZ,UAAY,SAAU6F,GACzC,GAAIA,IAAoBxI,IACpB5W,KAAKygB,UAAUtB,SAASC,GACxB,OAAOpf,KAGP,IAAI2gB,EAAc3gB,KAAKygB,UAAUpB,SAASD,EAAiBpf,KAAKwgB,WAChE,OAAO,IAAID,EAAavgB,KAAKwgB,UAAWxgB,KAAKwX,cAAemJ,IAMpEJ,EAAargB,UAAUsZ,UAAY,SAAUf,GACzC,OAAOA,IAAU7B,IAAa5W,KAAKygB,UAAUtB,SAAS1G,IAK1D8H,EAAargB,UAAUmM,OAAS,SAAUC,GACtC,GAAIA,IAAUtM,KACV,OAAO,EAEN,GAAIsM,EAAM8K,aACX,OAAO,EAGP,IAAI2K,EAAoBzV,EACxB,GAAKtM,KAAKqX,cAAchL,OAAO0V,EAAkB1K,eAG5C,IAAIrX,KAAKwgB,UAAUxF,UAAY+G,EAAkBvB,UAAUxF,QAAS,CACrE,IAAIgH,EAAWhiB,KAAK4c,YAAY5C,IAC5BiI,EAAYF,EAAkBnF,YAAY5C,IAC1CkI,EAAcF,EAASzH,UACvB4H,EAAeF,EAAU1H,UAC7B,MAAO2H,GAAeC,EAAc,CAChC,GAAID,EAAYphB,OAASqhB,EAAarhB,OACjCohB,EAAY3M,KAAKlJ,OAAO8V,EAAa5M,MACtC,OAAO,EAEX2M,EAAcF,EAASzH,UACvB4H,EAAeF,EAAU1H,UAE7B,OAAuB,OAAhB2H,GAAyC,OAAjBC,EAG/B,OAAO,EAlBP,OAAO,GA8BnB5B,EAAargB,UAAUkhB,cAAgB,SAAUhC,GAC7C,OAAIA,IAAoBxI,GACb,KAGA5W,KAAKygB,UAAUhgB,IAAI2e,EAAgBre,aAOlDwf,EAAajX,gBAAkB,iBACxBiX,EArZsB,GA4Z7B6B,GAAyB,SAAUhM,GAEnC,SAASgM,IACL,OAAOhM,EAAO7F,KAAKvQ,KAAM,IAAI8a,GAAUwF,IAAkBC,GAAa9I,WAAYoH,GAAS6B,UAAY1gB,KAuB3G,OAzBAN,EAAM2W,UAAU+L,EAAShM,GAIzBgM,EAAQliB,UAAU6Y,UAAY,SAAUzM,GACpC,OAAIA,IAAUtM,KACH,EAGA,GAGfoiB,EAAQliB,UAAUmM,OAAS,SAAUC,GAEjC,OAAOA,IAAUtM,MAErBoiB,EAAQliB,UAAUmX,YAAc,WAC5B,OAAOrX,MAEXoiB,EAAQliB,UAAU2X,kBAAoB,SAAUC,GAC5C,OAAOyI,GAAa9I,YAExB2K,EAAQliB,UAAUuL,QAAU,WACxB,OAAO,GAEJ2W,EA1BiB,CA2B1B7B,IAMEuB,GAAa,IAAIM,GACrB/iB,OAAOgjB,iBAAiB/M,GAAW,CAC/BY,IAAK,CACD1W,MAAO,IAAI8V,GAAU1P,EAAU2a,GAAa9I,aAEhD6K,IAAK,CACD9iB,MAAO,IAAI8V,GAAUzP,EAAUic,OAMvC3L,GAAS3F,aAAe+P,GAAa9I,WACrCH,GAASR,0BAA4ByJ,GACrC1J,GAAWiL,IACXpI,GAAaoI;;;;;;;;;;;;;;;;;AAkBb,IAAIS,IAAY,EAQhB,SAASC,GAAeC,EAAM1Q,GAE1B,QADiB,IAAbA,IAAuBA,EAAW,MACzB,OAAT0Q,EACA,OAAOlC,GAAa9I,WAaxB,GAXoB,kBAATgL,GAAqB,cAAeA,IAC3C1Q,EAAW0Q,EAAK,cAEpB9iB,EAAK8D,OAAoB,OAAbsO,GACY,kBAAbA,GACa,kBAAbA,GACc,kBAAbA,GAAyB,QAASA,EAAW,uCAAyCA,GAC9E,kBAAT0Q,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACrDA,EAAOA,EAAK,WAGI,kBAATA,GAAqB,QAASA,EAAM,CAC3C,IAAIC,EAAWD,EACf,OAAO,IAAInL,GAASoL,EAAUF,GAAezQ,IAEjD,GAAM0Q,aAAgBxf,QAAUsf,GA2B3B,CACD,IAAII,EAASpC,GAAa9I,WAY1B,OAXAvQ,EAAKub,GAAM,SAAUriB,EAAKwiB,GACtB,GAAIjjB,EAAKwB,SAASshB,EAAMriB,IACQ,MAAxBA,EAAI6G,UAAU,EAAG,GAAY,CAE7B,IAAIiR,EAAYsK,GAAeI,IAC3B1K,EAAUd,cAAiBc,EAAUzM,YACrCkX,EAASA,EAAOxK,qBAAqB/X,EAAK8X,QAKnDyK,EAAOhL,eAAe6K,GAAezQ,IAvC5C,IAAI8Q,EAAa,GACbC,GAAyB,EACzBC,EAAeN,EAYnB,GAXAvb,EAAK6b,GAAc,SAAU3iB,EAAKkL,GAC9B,GAA4B,MAAxBlL,EAAI6G,UAAU,EAAG,GAAY,CAE7B,IAAIiR,EAAYsK,GAAelX,GAC1B4M,EAAUzM,YACXqX,EACIA,IAA2B5K,EAAUb,cAAc5L,UACvDoX,EAAWnc,KAAK,IAAI4O,GAAUlV,EAAK8X,SAIrB,IAAtB2K,EAAWhgB,OACX,OAAO0d,GAAa9I,WAExB,IAAIuL,EAAWtF,GAAcmF,EAAYxC,IAAsB,SAAUpC,GAAa,OAAOA,EAAUnd,OAASwf,IAChH,GAAIwC,EAAwB,CACxB,IAAIG,EAAiBvF,GAAcmF,EAAY7I,GAAetE,cAC9D,OAAO,IAAI6K,GAAayC,EAAUR,GAAezQ,GAAW,IAAI8M,GAAS,CAAE,YAAaoE,GAAkB,CAAE,YAAajJ,MAGzH,OAAO,IAAIuG,GAAayC,EAAUR,GAAezQ,GAAW8M,GAAS6B,SAmBjFjH,GAAgB+I;;;;;;;;;;;;;;;;;AAuBhB,IAuoBIU,GAvoBAC,GAA4B,SAAU/M,GAEtC,SAAS+M,IACL,OAAkB,OAAX/M,GAAmBA,EAAOjT,MAAMnD,KAAM4C,YAAc5C,KAuD/D,OAzDAN,EAAM2W,UAAU8M,EAAY/M,GAO5B+M,EAAWjjB,UAAUyV,QAAU,SAAU5P,EAAGC,GACxC,IAAI+T,EAAWhU,EAAEwP,KAAKwD,UAAU/S,EAAEuP,MAClC,OAAiB,IAAbwE,EACOjU,EAAYC,EAAEjF,KAAMkF,EAAElF,MAGtBiZ,GAMfoJ,EAAWjjB,UAAUqW,YAAc,SAAUhB,GACzC,OAAO,GAKX4N,EAAWjjB,UAAU0V,oBAAsB,SAAUC,EAASC,GAC1D,OAAQD,EAAQxJ,OAAOyJ,IAK3BqN,EAAWjjB,UAAU+V,QAAU,WAE3B,OAAOX,GAAUY,KAKrBiN,EAAWjjB,UAAUuW,QAAU,WAE3B,OAAOnB,GAAUgN,KAOrBa,EAAWjjB,UAAUwW,SAAW,SAAUC,EAAY7V,GAClD,IAAIsiB,EAAYZ,GAAe7L,GAC/B,OAAO,IAAIrB,GAAUxU,EAAMsiB,IAK/BD,EAAWjjB,UAAUa,SAAW,WAC5B,MAAO,UAEJoiB,EA1DoB,CA2D7B1N,IACE4N,GAAc,IAAIF,GAuBlBG,GAA2B,SAAUlN,GAErC,SAASkN,EAAUC,GACf,IAAIxD,EAAQ3J,EAAO7F,KAAKvQ,OAASA,KAGjC,OAFA+f,EAAMwD,WAAaA,EACnB5jB,EAAK8D,QAAQ8f,EAAW9X,WAAuC,cAA1B8X,EAAW7Y,WAA4B,2DACrEqV,EAmDX,OAxDArgB,EAAM2W,UAAUiN,EAAWlN,GAY3BkN,EAAUpjB,UAAUsjB,aAAe,SAAUC,GACzC,OAAOA,EAAK1L,SAAS/X,KAAKujB,aAK9BD,EAAUpjB,UAAUqW,YAAc,SAAUhB,GACxC,OAAQA,EAAKwC,SAAS/X,KAAKujB,YAAY9X,WAK3C6X,EAAUpjB,UAAUyV,QAAU,SAAU5P,EAAGC,GACvC,IAAI0d,EAAS1jB,KAAKwjB,aAAazd,EAAEwP,MAC7BoO,EAAS3jB,KAAKwjB,aAAaxd,EAAEuP,MAC7BwE,EAAW2J,EAAO3K,UAAU4K,GAChC,OAAiB,IAAb5J,EACOjU,EAAYC,EAAEjF,KAAMkF,EAAElF,MAGtBiZ,GAMfuJ,EAAUpjB,UAAUwW,SAAW,SAAUC,EAAY7V,GACjD,IAAIsiB,EAAYZ,GAAe7L,GAC3BpB,EAAOgL,GAAa9I,WAAWY,YAAYrY,KAAKujB,WAAYH,GAChE,OAAO,IAAI9N,GAAUxU,EAAMyU,IAK/B+N,EAAUpjB,UAAUuW,QAAU,WAC1B,IAAIlB,EAAOgL,GAAa9I,WAAWY,YAAYrY,KAAKujB,WAAYzB,IAChE,OAAO,IAAIxM,GAAUzP,EAAU0P,IAKnC+N,EAAUpjB,UAAUa,SAAW,WAC3B,OAAOf,KAAKujB,WAAWrY,QAAQ9C,KAAK,MAEjCkb,EAzDmB,CA0D5B7N,IAsBEmO,GAA8B,WAM9B,SAASA,EAAaC,EAAOC,EAAMC,GAC/B/jB,KAAK6jB,MAAQA,EACb7jB,KAAK8jB,KAAOA,EACZ9jB,KAAK+jB,OAASA,EAyIlB,OAjIAH,EAAa1jB,UAAUoW,IAAM,WAEzB,OADA3W,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QACnD7C,KAAK6jB,MAAMvN,OAOtBsN,EAAa1jB,UAAU8jB,UAAY,WAE/B,OADArkB,EAAKkU,iBAAiB,yBAA0B,EAAG,EAAGjR,UAAUC,QACzD7C,KAAK6jB,MAAMvN,KAAI,IAI1BsN,EAAa1jB,UAAU2U,OAAS,WAG5B,OADAlV,EAAKkU,iBAAiB,sBAAuB,EAAG,EAAGjR,UAAUC,QACtD7C,KAAKgkB,aAOhBJ,EAAa1jB,UAAU+jB,OAAS,WAE5B,OADAtkB,EAAKkU,iBAAiB,sBAAuB,EAAG,EAAGjR,UAAUC,SACrD7C,KAAK6jB,MAAMpY,WAQvBmY,EAAa1jB,UAAUoL,MAAQ,SAAU4Y,GACrCvkB,EAAKkU,iBAAiB,qBAAsB,EAAG,EAAGjR,UAAUC,QAE5DqhB,EAAkBjZ,OAAOiZ,GACzB/Q,GAAmB,qBAAsB,EAAG+Q,GAAiB,GAC7D,IAAIC,EAAY,IAAIla,EAAKia,GACrBE,EAAWpkB,KAAK8jB,KAAKxY,MAAM6Y,GAC/B,OAAO,IAAIP,EAAa5jB,KAAK6jB,MAAM9L,SAASoM,GAAYC,EAAUpK,KAQtE4J,EAAa1jB,UAAU8X,SAAW,SAAUkM,GACxCvkB,EAAKkU,iBAAiB,wBAAyB,EAAG,EAAGjR,UAAUC,QAC/DsQ,GAAmB,wBAAyB,EAAG+Q,GAAiB,GAChE,IAAIC,EAAY,IAAIla,EAAKia,GACzB,OAAQlkB,KAAK6jB,MAAM9L,SAASoM,GAAW1Y,WAO3CmY,EAAa1jB,UAAUmX,YAAc,WAGjC,OAFA1X,EAAKkU,iBAAiB,2BAA4B,EAAG,EAAGjR,UAAUC,QAE3D7C,KAAK6jB,MAAMxM,cAAcf,OAUpCsN,EAAa1jB,UAAUmkB,QAAU,SAAU3L,GACvC,IAAIqH,EAAQ/f,KAGZ,GAFAL,EAAKkU,iBAAiB,uBAAwB,EAAG,EAAGjR,UAAUC,QAC9DlD,EAAKmU,iBAAiB,uBAAwB,EAAG4E,GAAQ,GACrD1Y,KAAK6jB,MAAMzM,aACX,OAAO,EAEX,IAAIkN,EAAetkB,KAAK6jB,MAExB,QAASS,EAAa9L,aAAaxY,KAAK+jB,QAAQ,SAAU3jB,EAAKmV,GAC3D,OAAOmD,EAAO,IAAIkL,EAAarO,EAAMwK,EAAM+D,KAAKxY,MAAMlL,GAAM4Z,SAOpE4J,EAAa1jB,UAAUqkB,YAAc,WAEjC,OADA5kB,EAAKkU,iBAAiB,2BAA4B,EAAG,EAAGjR,UAAUC,SAC9D7C,KAAK6jB,MAAMzM,eAIHpX,KAAK6jB,MAAMpY,WAG3BpM,OAAOC,eAAeskB,EAAa1jB,UAAW,MAAO,CACjDO,IAAK,WACD,OAAOT,KAAK8jB,KAAKU,UAErBha,YAAY,EACZC,cAAc,IAMlBmZ,EAAa1jB,UAAUqY,YAAc,WAEjC,OADA5Y,EAAKkU,iBAAiB,2BAA4B,EAAG,EAAGjR,UAAUC,QAC3D7C,KAAK6jB,MAAMtL,eAKtBqL,EAAa1jB,UAAUukB,OAAS,WAE5B,OADA9kB,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QACnD7C,KAAK8jB,MAEhBzkB,OAAOC,eAAeskB,EAAa1jB,UAAW,MAAO,CACjDO,IAAK,WACD,OAAOT,KAAKykB,UAEhBja,YAAY,EACZC,cAAc,IAEXmZ,EAlJsB,GAyK7Bc,GAA2B,WAO3B,SAASA,EAAUzR,EAAW0R,EAAmB/P,EAAUgQ,GACvD5kB,KAAKiT,UAAYA,EACjBjT,KAAK2kB,kBAAoBA,EACzB3kB,KAAK4U,SAAWA,EAChB5U,KAAK4kB,SAAWA,EAoCpB,OA/BAF,EAAUxkB,UAAU2kB,QAAU,WAC1B,IAAIC,EAAM9kB,KAAK4U,SAAS6P,SACxB,MAAuB,UAAnBzkB,KAAKiT,UACE6R,EAAI1b,KAGJ0b,EAAIC,YAAY3b,MAM/Bsb,EAAUxkB,UAAU8kB,aAAe,WAC/B,OAAOhlB,KAAKiT,WAKhByR,EAAUxkB,UAAU+kB,eAAiB,WACjC,OAAOjlB,KAAK2kB,kBAAkBM,eAAejlB,OAKjD0kB,EAAUxkB,UAAUa,SAAW,WAC3B,OAAQf,KAAK6kB,UAAU9jB,WACnB,IACAf,KAAKiT,UACL,IACAtT,EAAKa,UAAUR,KAAK4U,SAASoP,cAE9BU,EA/CmB,GAiD1BQ,GAA6B,WAM7B,SAASA,EAAYP,EAAmBzgB,EAAOkF,GAC3CpJ,KAAK2kB,kBAAoBA,EACzB3kB,KAAKkE,MAAQA,EACblE,KAAKoJ,KAAOA,EA0BhB,OArBA8b,EAAYhlB,UAAU2kB,QAAU,WAC5B,OAAO7kB,KAAKoJ,MAKhB8b,EAAYhlB,UAAU8kB,aAAe,WACjC,MAAO,UAKXE,EAAYhlB,UAAU+kB,eAAiB,WACnC,OAAOjlB,KAAK2kB,kBAAkBM,eAAejlB,OAKjDklB,EAAYhlB,UAAUa,SAAW,WAC7B,OAAOf,KAAKoJ,KAAKrI,WAAa,WAE3BmkB,EAnCqB,GAyD5BC,GAAwC,WAMxC,SAASA,EAAuBC,EAAWC,EAAiBC,GACxDtlB,KAAKolB,UAAYA,EACjBplB,KAAKqlB,gBAAkBA,EACvBrlB,KAAKslB,SAAWA,EAmEpB,OA9DAH,EAAuBjlB,UAAUqlB,WAAa,SAAUtS,GACpD,MAAqB,UAAdA,GAKXkS,EAAuBjlB,UAAUslB,YAAc,SAAUC,EAAQvc,GAC7D,IAAIuP,EAAQvP,EAAMwc,iBAAiBC,WACnC,OAAO,IAAIjB,GAAU,QAAS1kB,KAAM,IAAI4jB,GAAa6B,EAAOG,aAAc1c,EAAMub,SAAUhM,KAK9F0M,EAAuBjlB,UAAU+kB,eAAiB,SAAUY,GACxD,IAAIC,EAAM9lB,KAAKslB,SACf,GAAiC,WAA7BO,EAAUb,eAA6B,CACvCrlB,EAAK8D,OAAOzD,KAAKqlB,gBAAiB,gEAClC,IAAIU,EAAa/lB,KAAKqlB,gBACtB,OAAO,WAEHU,EAAWxV,KAAKuV,EAAKD,EAAU3hB,QAInC,IAAI8hB,EAAOhmB,KAAKolB,UAChB,OAAO,WACHY,EAAKzV,KAAKuV,EAAKD,EAAUjR,YAOrCuQ,EAAuBjlB,UAAU+lB,kBAAoB,SAAU/hB,EAAOkF,GAClE,OAAIpJ,KAAKqlB,gBACE,IAAIH,GAAYllB,KAAMkE,EAAOkF,GAG7B,MAMf+b,EAAuBjlB,UAAUgmB,QAAU,SAAU5Z,GACjD,OAAMA,aAAiB6Y,KAGb7Y,EAAM8Y,YAAcplB,KAAKolB,WAKvB9Y,EAAM8Y,YAAcplB,KAAKolB,WAAa9Y,EAAMgZ,WAAatlB,KAAKslB,WAM9EH,EAAuBjlB,UAAUimB,eAAiB,WAC9C,OAA0B,OAAnBnmB,KAAKolB,WAETD,EA5EgC,GAuFvCiB,GAAwC,WAMxC,SAASA,EAAuBC,EAAYhB,EAAiBC,GACzDtlB,KAAKqmB,WAAaA,EAClBrmB,KAAKqlB,gBAAkBA,EACvBrlB,KAAKslB,SAAWA,EA8FpB,OAzFAc,EAAuBlmB,UAAUqlB,WAAa,SAAUtS,GACpD,IAAIqT,EAA6B,mBAAdrT,EAAiC,cAAgBA,EAGpE,OAFAqT,EACqB,qBAAjBA,EAAsC,gBAAkBA,EACrD3mB,EAAKwB,SAASnB,KAAKqmB,WAAYC,IAK1CF,EAAuBlmB,UAAU+lB,kBAAoB,SAAU/hB,EAAOkF,GAClE,OAAIpJ,KAAKqlB,gBACE,IAAIH,GAAYllB,KAAMkE,EAAOkF,GAG7B,MAMfgd,EAAuBlmB,UAAUslB,YAAc,SAAUC,EAAQvc,GAC7DvJ,EAAK8D,OAA2B,MAApBgiB,EAAO3N,UAAmB,yCACtC,IAAIgN,EAAM5b,EAAMub,SAASnZ,MAA6Bma,EAAO3N,WACzDW,EAAQvP,EAAMwc,iBAAiBC,WACnC,OAAO,IAAIjB,GAAUe,EAAO3W,KAAM9O,KAAM,IAAI4jB,GAAa6B,EAAOG,aAAcd,EAAKrM,GAAQgN,EAAOb,WAKtGwB,EAAuBlmB,UAAU+kB,eAAiB,SAAUY,GACxD,IAAIC,EAAM9lB,KAAKslB,SACf,GAAiC,WAA7BO,EAAUb,eAA6B,CACvCrlB,EAAK8D,OAAOzD,KAAKqlB,gBAAiB,gEAClC,IAAIkB,EAAavmB,KAAKqlB,gBACtB,OAAO,WAEHkB,EAAWhW,KAAKuV,EAAKD,EAAU3hB,QAInC,IAAIsiB,EAAOxmB,KAAKqmB,WAAWR,EAAU5S,WACrC,OAAO,WACHuT,EAAKjW,KAAKuV,EAAKD,EAAUjR,SAAUiR,EAAUjB,YAOzDwB,EAAuBlmB,UAAUgmB,QAAU,SAAU5Z,GACjD,IAAIyT,EAAQ/f,KACZ,GAAIsM,aAAiB8Z,EAAwB,CACzC,IAAKpmB,KAAKqmB,aAAe/Z,EAAM+Z,WAC3B,OAAO,EAEN,GAAIrmB,KAAKslB,WAAahZ,EAAMgZ,SAAU,CACvC,IAAImB,EAAYpnB,OAAOmH,KAAK8F,EAAM+Z,YAC9BK,EAAWrnB,OAAOmH,KAAKxG,KAAKqmB,YAC5BM,EAAaF,EAAU5jB,OACvB+jB,EAAYF,EAAS7jB,OACzB,GAAI8jB,IAAeC,EAAW,CAI1B,GAAmB,IAAfD,EAAkB,CAClB,IAAIE,EAAWJ,EAAU,GACrBK,EAAUJ,EAAS,GACvB,OAAQI,IAAYD,KACdva,EAAM+Z,WAAWQ,KACd7mB,KAAKqmB,WAAWS,IACjBxa,EAAM+Z,WAAWQ,KAAc7mB,KAAKqmB,WAAWS,IAIvD,OAAOJ,EAASK,OAAM,SAAU9T,GAC5B,OAAO3G,EAAM+Z,WAAWpT,KAAe8M,EAAMsG,WAAWpT,QAM5E,OAAO,GAKXmT,EAAuBlmB,UAAUimB,eAAiB,WAC9C,OAA2B,OAApBnmB,KAAKqmB,YAETD,EAvGgC,GAiIvCY,GAAuB,WACvB,SAASA,EAAMC,EAAM7d,EAAM8d,EAAcC,GACrCnnB,KAAKinB,KAAOA,EACZjnB,KAAKoJ,KAAOA,EACZpJ,KAAKknB,aAAeA,EACpBlnB,KAAKmnB,eAAiBA,EA8c1B,OA5cA9nB,OAAOC,eAAe0nB,EAAO,yBAA0B,CACnDvmB,IAAK,WAED,OADAd,EAAK8D,OAAOyf,GAAwB,oCAC7BA,IAEX/iB,IAAK,SAAUmW,GACX4M,GAAyB5M,GAE7B9L,YAAY,EACZC,cAAc,IAOlBuc,EAAMI,wBAA0B,SAAUrY,GACtC,IAAIsY,EAAY,KACZC,EAAU,KAOd,GANIvY,EAAOwY,aACPF,EAAYtY,EAAOyY,sBAEnBzY,EAAO0Y,WACPH,EAAUvY,EAAO2Y,oBAEjB3Y,EAAO4W,aAAe/O,GAAW,CACjC,IAAI+Q,EAAmB,mGAEnBC,EAAoB,wGAExB,GAAI7Y,EAAOwY,WAAY,CACnB,IAAIM,EAAY9Y,EAAO+Y,oBACvB,GAAID,IAAcjiB,EACd,MAAM,IAAIxB,MAAMujB,GAEf,GAAyB,kBAAdN,EACZ,MAAM,IAAIjjB,MAAMwjB,GAGxB,GAAI7Y,EAAO0Y,SAAU,CACjB,IAAIM,EAAUhZ,EAAOiZ,kBACrB,GAAID,IAAYliB,EACZ,MAAM,IAAIzB,MAAMujB,GAEf,GAAuB,kBAAZL,EACZ,MAAM,IAAIljB,MAAMwjB,SAIvB,GAAI7Y,EAAO4W,aAAe3L,IAC3B,GAAkB,MAAbqN,IAAsBvV,GAAgBuV,IAC3B,MAAXC,IAAoBxV,GAAgBwV,GACrC,MAAM,IAAIljB,MAAM,sKAOpB,GAFAzE,EAAK8D,OAAOsL,EAAO4W,qBAAsBrC,IACrCvU,EAAO4W,aAAetC,GAAa,uBACrB,MAAbgE,GAA0C,kBAAdA,GACjB,MAAXC,GAAsC,kBAAZA,EAC3B,MAAM,IAAIljB,MAAM,0FAU5B4iB,EAAMiB,eAAiB,SAAUlZ,GAC7B,GAAIA,EAAOwY,YACPxY,EAAO0Y,UACP1Y,EAAOmZ,aACNnZ,EAAOoZ,mBACR,MAAM,IAAI/jB,MAAM,uGAQxB4iB,EAAM9mB,UAAUkoB,+BAAiC,SAAUnW,GACvD,IAA4B,IAAxBjS,KAAKmnB,eACL,MAAM,IAAI/iB,MAAM6N,EAAS,gDAMjC+U,EAAM9mB,UAAUwlB,eAAiB,WAC7B,OAAO1lB,KAAKknB,cAKhBF,EAAM9mB,UAAUukB,OAAS,WAKrB,OAJA9kB,EAAKkU,iBAAiB,YAAa,EAAG,EAAGjR,UAAUC,QAI5C,IAAImkB,EAAM9D,uBAAuBljB,KAAKinB,KAAMjnB,KAAKoJ,OAS5D4d,EAAM9mB,UAAUmoB,GAAK,SAAUpV,EAAWqV,EAAUC,EAAyBC,GACzE7oB,EAAKkU,iBAAiB,WAAY,EAAG,EAAGjR,UAAUC,QAClDmQ,GAAkB,WAAY,EAAGC,GAAW,GAC5CtT,EAAKmU,iBAAiB,WAAY,EAAGwU,GAAU,GAC/C,IAAIG,EAAMzB,EAAM0B,yBAAyB,WAAYH,EAAyBC,GAC9E,GAAkB,UAAdvV,EACAjT,KAAK2oB,aAAaL,EAAUG,EAAI9U,OAAQ8U,EAAID,aAE3C,CACD,IAAII,EAAY,GAChBA,EAAU3V,GAAaqV,EACvBtoB,KAAK6oB,aAAaD,EAAWH,EAAI9U,OAAQ8U,EAAID,SAEjD,OAAOF,GAQXtB,EAAM9mB,UAAUyoB,aAAe,SAAUL,EAAUQ,EAAgBN,GAC/D,IAAIO,EAAY,IAAI5D,GAAuBmD,EAAUQ,GAAkB,KAAMN,GAAW,MACxFxoB,KAAKinB,KAAK+B,yBAAyBhpB,KAAM+oB,IAQ7C/B,EAAM9mB,UAAU2oB,aAAe,SAAUD,EAAWE,EAAgBN,GAChE,IAAIO,EAAY,IAAI3C,GAAuBwC,EAAWE,EAAgBN,GACtExoB,KAAKinB,KAAK+B,yBAAyBhpB,KAAM+oB,IAO7C/B,EAAM9mB,UAAU+oB,IAAM,SAAUhW,EAAWqV,EAAUE,GACjD7oB,EAAKkU,iBAAiB,YAAa,EAAG,EAAGjR,UAAUC,QACnDmQ,GAAkB,YAAa,EAAGC,GAAW,GAC7CtT,EAAKmU,iBAAiB,YAAa,EAAGwU,GAAU,GAChD3oB,EAAKupB,sBAAsB,YAAa,EAAGV,GAAS,GACpD,IAAIO,EAAY,KACZH,EAAY,KAChB,GAAkB,UAAd3V,EAAuB,CACvB,IAAIkW,EAAgBb,GAAY,KAChCS,EAAY,IAAI5D,GAAuBgE,EAAe,KAAMX,GAAW,WAElEvV,IACDqV,IACAM,EAAY,GACZA,EAAU3V,GAAaqV,GAE3BS,EAAY,IAAI3C,GAAuBwC,EAAW,KAAMJ,GAAW,OAEvExoB,KAAKinB,KAAKmC,4BAA4BppB,KAAM+oB,IAUhD/B,EAAM9mB,UAAUmpB,KAAO,SAAUpW,EAAWqW,EAAcC,EAA0Bf,GAChF,IAAIzI,EAAQ/f,KACZL,EAAKkU,iBAAiB,aAAc,EAAG,EAAGjR,UAAUC,QACpDmQ,GAAkB,aAAc,EAAGC,GAAW,GAC9CtT,EAAKmU,iBAAiB,aAAc,EAAGwV,GAAc,GACrD,IAAIb,EAAMzB,EAAM0B,yBAAyB,aAAca,EAA0Bf,GAK7EgB,GAAY,EACZzV,EAAW,IAAIpU,EAAKqU,SAExBD,EAASI,QAAQsV,OAAM,eACvB,IAAIC,EAAe,SAAU9U,GAGrB4U,IACAA,GAAY,EACZzJ,EAAMkJ,IAAIhW,EAAWyW,GACjBJ,GACAA,EAAaxlB,KAAK2kB,EAAID,QAAtBc,CAA+B1U,GAEnCb,EAAS4V,QAAQ/U,KAWzB,OARA5U,KAAKqoB,GAAGpV,EAAWyW,GACP,SAAUE,GAClB7J,EAAMkJ,IAAIhW,EAAWyW,GACjBjB,EAAI9U,QACJ8U,EAAI9U,OAAO7P,KAAK2kB,EAAID,QAApBC,CAA6BmB,GAEjC7V,EAAS8V,OAAOD,MAEb7V,EAASI,SAOpB6S,EAAM9mB,UAAU4pB,aAAe,SAAUC,GAErC,GADApqB,EAAKkU,iBAAiB,qBAAsB,EAAG,EAAGjR,UAAUC,QACvC,kBAAVknB,GACPvkB,KAAKC,MAAMskB,KAAWA,GACtBA,GAAS,EACT,MAAM,IAAI3lB,MAAM,kEAEpB,GAAIpE,KAAKknB,aAAagB,WAClB,MAAM,IAAI9jB,MAAM,uGAGpB,OAAO,IAAI4iB,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAMpJ,KAAKknB,aAAa4C,aAAaC,GAAQ/pB,KAAKmnB,iBAOvFH,EAAM9mB,UAAU8pB,YAAc,SAAUD,GAEpC,GADApqB,EAAKkU,iBAAiB,oBAAqB,EAAG,EAAGjR,UAAUC,QACtC,kBAAVknB,GACPvkB,KAAKC,MAAMskB,KAAWA,GACtBA,GAAS,EACT,MAAM,IAAI3lB,MAAM,iEAEpB,GAAIpE,KAAKknB,aAAagB,WAClB,MAAM,IAAI9jB,MAAM,sGAGpB,OAAO,IAAI4iB,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAMpJ,KAAKknB,aAAa8C,YAAYD,GAAQ/pB,KAAKmnB,iBAOtFH,EAAM9mB,UAAU+pB,aAAe,SAAU7gB,GAErC,GADAzJ,EAAKkU,iBAAiB,qBAAsB,EAAG,EAAGjR,UAAUC,QAC/C,SAATuG,EACA,MAAM,IAAIhF,MAAM,2EAEf,GAAa,cAATgF,EACL,MAAM,IAAIhF,MAAM,qFAEf,GAAa,WAATgF,EACL,MAAM,IAAIhF,MAAM,+EAEpB+O,GAAmB,qBAAsB,EAAG/J,GAAM,GAClDpJ,KAAKooB,+BAA+B,sBACpC,IAAI8B,EAAa,IAAIjgB,EAAKb,GAC1B,GAAI8gB,EAAWze,UACX,MAAM,IAAIrH,MAAM,qFAEpB,IAAIqU,EAAQ,IAAI6K,GAAU4G,GACtBC,EAAYnqB,KAAKknB,aAAakD,QAAQ3R,GAE1C,OADAuO,EAAMI,wBAAwB+C,GACvB,IAAInD,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,GAA8B,IAMzEnD,EAAM9mB,UAAUmqB,WAAa,WACzB1qB,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QAC1D7C,KAAKooB,+BAA+B,oBACpC,IAAI+B,EAAYnqB,KAAKknB,aAAakD,QAAQxT,IAE1C,OADAoQ,EAAMI,wBAAwB+C,GACvB,IAAInD,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,GAA8B,IAMzEnD,EAAM9mB,UAAUoqB,gBAAkB,WAC9B3qB,EAAKkU,iBAAiB,wBAAyB,EAAG,EAAGjR,UAAUC,QAC/D7C,KAAKooB,+BAA+B,yBACpC,IAAI+B,EAAYnqB,KAAKknB,aAAakD,QAAQpQ,IAE1C,OADAgN,EAAMI,wBAAwB+C,GACvB,IAAInD,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,GAA8B,IAMzEnD,EAAM9mB,UAAUqqB,aAAe,WAC3B5qB,EAAKkU,iBAAiB,qBAAsB,EAAG,EAAGjR,UAAUC,QAC5D7C,KAAKooB,+BAA+B,sBACpC,IAAI+B,EAAYnqB,KAAKknB,aAAakD,QAAQ/G,IAE1C,OADA2D,EAAMI,wBAAwB+C,GACvB,IAAInD,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,GAA8B,IAOzEnD,EAAM9mB,UAAUsqB,QAAU,SAAUhrB,EAAOsB,QACzB,IAAVtB,IAAoBA,EAAQ,MAChCG,EAAKkU,iBAAiB,gBAAiB,EAAG,EAAGjR,UAAUC,QACvDmP,GAAwB,gBAAiB,EAAGxS,EAAOQ,KAAKoJ,MAAM,GAC9D8J,GAAY,gBAAiB,EAAGpS,GAAM,GACtC,IAAIqpB,EAAYnqB,KAAKknB,aAAasD,QAAQhrB,EAAOsB,GAGjD,GAFAkmB,EAAMiB,eAAekC,GACrBnD,EAAMI,wBAAwB+C,GAC1BnqB,KAAKknB,aAAaK,WAClB,MAAM,IAAInjB,MAAM,0FAQpB,YAJcgO,IAAV5S,IACAA,EAAQ,KACRsB,EAAO,MAEJ,IAAIkmB,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,EAAWnqB,KAAKmnB,iBAO3DH,EAAM9mB,UAAUuqB,MAAQ,SAAUjrB,EAAOsB,QACvB,IAAVtB,IAAoBA,EAAQ,MAChCG,EAAKkU,iBAAiB,cAAe,EAAG,EAAGjR,UAAUC,QACrDmP,GAAwB,cAAe,EAAGxS,EAAOQ,KAAKoJ,MAAM,GAC5D8J,GAAY,cAAe,EAAGpS,GAAM,GACpC,IAAIqpB,EAAYnqB,KAAKknB,aAAauD,MAAMjrB,EAAOsB,GAG/C,GAFAkmB,EAAMiB,eAAekC,GACrBnD,EAAMI,wBAAwB+C,GAC1BnqB,KAAKknB,aAAaO,SAClB,MAAM,IAAIrjB,MAAM,oFAGpB,OAAO,IAAI4iB,EAAMhnB,KAAKinB,KAAMjnB,KAAKoJ,KAAM+gB,EAAWnqB,KAAKmnB,iBAS3DH,EAAM9mB,UAAUwqB,QAAU,SAAUlrB,EAAOsB,GAIvC,GAHAnB,EAAKkU,iBAAiB,gBAAiB,EAAG,EAAGjR,UAAUC,QACvDmP,GAAwB,gBAAiB,EAAGxS,EAAOQ,KAAKoJ,MAAM,GAC9D8J,GAAY,gBAAiB,EAAGpS,GAAM,GAClCd,KAAKknB,aAAaK,WAClB,MAAM,IAAInjB,MAAM,0FAGpB,GAAIpE,KAAKknB,aAAaO,SAClB,MAAM,IAAIrjB,MAAM,sFAGpB,OAAOpE,KAAKwqB,QAAQhrB,EAAOsB,GAAM2pB,MAAMjrB,EAAOsB,IAKlDkmB,EAAM9mB,UAAUa,SAAW,WAEvB,OADApB,EAAKkU,iBAAiB,iBAAkB,EAAG,EAAGjR,UAAUC,QACjD7C,KAAKinB,KAAKlmB,WAAaf,KAAKoJ,KAAK2B,sBAI5Cic,EAAM9mB,UAAU2U,OAAS,WAGrB,OADAlV,EAAKkU,iBAAiB,eAAgB,EAAG,EAAGjR,UAAUC,QAC/C7C,KAAKe,YAMhBimB,EAAM9mB,UAAUyqB,YAAc,WAC1B,OAAO3qB,KAAKknB,aAAa0D,kBAK7B5D,EAAM9mB,UAAU2qB,gBAAkB,WAC9B,IAAIvkB,EAAMtG,KAAK2qB,cACX7oB,EAAKyE,EAAkBD,GAC3B,MAAc,OAAPxE,EAAc,UAAYA,GAOrCklB,EAAM9mB,UAAU4qB,QAAU,SAAUxe,GAEhC,GADA3M,EAAKkU,iBAAiB,gBAAiB,EAAG,EAAGjR,UAAUC,UACjDyJ,aAAiB0a,GAAQ,CAC3B,IAAI9iB,EAAQ,uFACZ,MAAM,IAAIE,MAAMF,GAEpB,IAAI6mB,EAAW/qB,KAAKinB,OAAS3a,EAAM2a,KAC/B+D,EAAWhrB,KAAKoJ,KAAKiD,OAAOC,EAAMlD,MAClC6hB,EAAsBjrB,KAAK6qB,oBAAsBve,EAAMue,kBAC3D,OAAOE,GAAYC,GAAYC,GAUnCjE,EAAM0B,yBAA2B,SAAUzW,EAAQiZ,EAAiB1C,GAChE,IAAIC,EAAM,CAAE9U,OAAQ,KAAM6U,QAAS,MACnC,GAAI0C,GAAmB1C,EACnBC,EAAI9U,OAASuX,EACbvrB,EAAKmU,iBAAiB7B,EAAQ,EAAGwW,EAAI9U,QAAQ,GAC7C8U,EAAID,QAAUA,EACd7oB,EAAKupB,sBAAsBjX,EAAQ,EAAGwW,EAAID,SAAS,QAElD,GAAI0C,EAEL,GAA+B,kBAApBA,GAAoD,OAApBA,EAEvCzC,EAAID,QAAU0C,MAEb,IAA+B,oBAApBA,EAIZ,MAAM,IAAI9mB,MAAMzE,EAAK2S,YAAYL,EAAQ,GAAG,GACxC,0DAJJwW,EAAI9U,OAASuX,EAOrB,OAAOzC,GAEXppB,OAAOC,eAAe0nB,EAAM9mB,UAAW,MAAO,CAC1CO,IAAK,WACD,OAAOT,KAAKykB,UAEhBja,YAAY,EACZC,cAAc,IAEXuc,EAnde,GAsetBmE,GAAuC,WACvC,SAASA,EAAsBtH,GAC3B7jB,KAAK6jB,MAAQA,EASjB,OAPAsH,EAAsBjrB,UAAU2X,kBAAoB,SAAUC,GAC1D,IAAIxM,EAAQtL,KAAK6jB,MAAMhM,kBAAkBC,GACzC,OAAO,IAAIqT,EAAsB7f,IAErC6f,EAAsBjrB,UAAUqV,KAAO,WACnC,OAAOvV,KAAK6jB,OAETsH,EAX+B,GAatCC,GAAuC,WACvC,SAASA,EAAsBC,EAAUjiB,GACrCpJ,KAAKsrB,UAAYD,EACjBrrB,KAAKuS,MAAQnJ,EASjB,OAPAgiB,EAAsBlrB,UAAU2X,kBAAoB,SAAUC,GAC1D,IAAIqM,EAAYnkB,KAAKuS,MAAMjH,MAAMwM,GACjC,OAAO,IAAIsT,EAAsBprB,KAAKsrB,UAAWnH,IAErDiH,EAAsBlrB,UAAUqV,KAAO,WACnC,OAAOvV,KAAKsrB,UAAUC,uBAAuBvrB,KAAKuS,QAE/C6Y,EAZ+B,GAmBtCI,GAAqB,SAAUC,GAG/B,OAFAA,EAASA,GAAU,GACnBA,EAAO,aAAeA,EAAO,eAAgB,IAAIC,MAAOC,UACjDF,GASPG,GAA2B,SAAUpsB,EAAOqsB,EAAaC,GACzD,OAAKtsB,GAA0B,kBAAVA,GAGrBG,EAAK8D,OAAO,QAASjE,EAAO,6CACA,kBAAjBA,EAAM,OACNusB,GAA2BvsB,EAAM,OAAQqsB,EAAaC,GAEhC,kBAAjBtsB,EAAM,OACXwsB,GAA4BxsB,EAAM,OAAQqsB,QAGjDlsB,EAAK8D,QAAO,EAAO,4BAA8BwoB,KAAKzrB,UAAUhB,EAAO,KAAM,KAVtEA,GAaXusB,GAA6B,SAAUG,EAAIC,EAAUL,GACrD,OAAQI,GACJ,IAAK,YACD,OAAOJ,EAAa,aACxB,QACInsB,EAAK8D,QAAO,EAAO,4BAA8ByoB,KAGzDF,GAA8B,SAAUE,EAAIC,EAAUC,GACjDF,EAAG/kB,eAAe,cACnBxH,EAAK8D,QAAO,EAAO,4BAA8BwoB,KAAKzrB,UAAU0rB,EAAI,KAAM,IAE9E,IAAIG,EAAQH,EAAG,aACM,kBAAVG,GACP1sB,EAAK8D,QAAO,EAAO,+BAAiC4oB,GAExD,IAAIC,EAAeH,EAAS5W,OAG5B,GAFA5V,EAAK8D,OAAwB,OAAjB6oB,GAAiD,qBAAjBA,EAA8B,+CAErEA,EAAalV,aACd,OAAOiV,EAEX,IAAIE,EAAOD,EACPT,EAAcU,EAAK3T,WACvB,MAA2B,kBAAhBiT,EACAQ,EAGJR,EAAcQ,GAWrBG,GAA2B,SAAUpjB,EAAMmM,EAAM8V,EAAUS,GAC3D,OAAOW,GAAqBlX,EAAM,IAAI6V,GAAsBC,EAAUjiB,GAAO0iB,IAU7EY,GAA+B,SAAUnX,EAAM4W,EAAUL,GACzD,OAAOW,GAAqBlX,EAAM,IAAI4V,GAAsBgB,GAAWL,IAE3E,SAASW,GAAqBlX,EAAMsW,EAAaC,GAC7C,IAEIhW,EAFA6W,EAASpX,EAAK8B,cAAcf,MAC5BvE,EAAW6Z,GAAyBe,EAAQd,EAAYhU,kBAAkB,aAAciU,GAE5F,GAAIvW,EAAK6B,aAAc,CACnB,IAAIwV,EAAWrX,EACX/V,EAAQosB,GAAyBgB,EAAShU,WAAYiT,EAAaC,GACvE,OAAItsB,IAAUotB,EAAShU,YACnB7G,IAAa6a,EAASvV,cAAcf,MAC7B,IAAIgB,GAAS9X,EAAOgjB,GAAezQ,IAGnCwD,EAIX,IAAI+O,EAAe/O,EAWnB,OAVAO,EAAUwO,EACNvS,IAAauS,EAAajN,cAAcf,QACxCR,EAAUA,EAAQ6B,eAAe,IAAIL,GAASvF,KAElDuS,EAAa9L,aAAawB,IAAgB,SAAUlC,EAAWI,GAC3D,IAAIE,EAAeqU,GAAqBvU,EAAW2T,EAAYhU,kBAAkBC,GAAYgU,GACzF1T,IAAiBF,IACjBpC,EAAUA,EAAQqC,qBAAqBL,EAAWM,OAGnDtC;;;;;;;;;;;;;;;;GAuBf,IAsJI+W,GAtJAC,GAAoC,WACpC,SAASA,IACL9sB,KAAKR,MAAQ,KACbQ,KAAK+sB,SAAW,IAAIC,IA4HxB,OApHAF,EAAmB5sB,UAAU+sB,KAAO,SAAU7jB,GAC1C,GAAkB,MAAdpJ,KAAKR,MACL,OAAOQ,KAAKR,MAAMuY,SAAS3O,GAE1B,IAAKA,EAAKqC,WAAazL,KAAK+sB,SAASG,KAAO,EAAG,CAChD,IAAIC,EAAW/jB,EAAKsB,WAEpB,GADAtB,EAAOA,EAAKwB,WACR5K,KAAK+sB,SAASK,IAAID,GAAW,CAC7B,IAAI3O,EAAYxe,KAAK+sB,SAAStsB,IAAI0sB,GAClC,OAAO3O,EAAUyO,KAAK7jB,GAGtB,OAAO,KAIX,OAAO,MAUf0jB,EAAmB5sB,UAAUmtB,SAAW,SAAUjkB,EAAMzE,GACpD,GAAIyE,EAAKqC,UACLzL,KAAKR,MAAQmF,EACb3E,KAAK+sB,SAASO,aAEb,GAAmB,OAAfttB,KAAKR,MACVQ,KAAKR,MAAQQ,KAAKR,MAAM6Y,YAAYjP,EAAMzE,OAEzC,CACD,IAAIwoB,EAAW/jB,EAAKsB,WACf1K,KAAK+sB,SAASK,IAAID,IACnBntB,KAAK+sB,SAAS5sB,IAAIgtB,EAAU,IAAIL,GAEpC,IAAIxhB,EAAQtL,KAAK+sB,SAAStsB,IAAI0sB,GAC9B/jB,EAAOA,EAAKwB,WACZU,EAAM+hB,SAASjkB,EAAMzE,KAS7BmoB,EAAmB5sB,UAAUqtB,OAAS,SAAUnkB,GAC5C,GAAIA,EAAKqC,UAGL,OAFAzL,KAAKR,MAAQ,KACbQ,KAAK+sB,SAASO,SACP,EAGP,GAAmB,OAAfttB,KAAKR,MAAgB,CACrB,GAAIQ,KAAKR,MAAM4X,aAEX,OAAO,EAGP,IAAI5X,EAAQQ,KAAKR,MACjBQ,KAAKR,MAAQ,KACb,IAAIguB,EAASxtB,KAIb,OAHAR,EAAMgZ,aAAawB,IAAgB,SAAU5Z,EAAKqtB,GAC9CD,EAAOH,SAAS,IAAIpjB,EAAK7J,GAAMqtB,MAE5BztB,KAAKutB,OAAOnkB,GAGtB,GAAIpJ,KAAK+sB,SAASG,KAAO,EAAG,CAC7B,IAAIC,EAAW/jB,EAAKsB,WAEpB,GADAtB,EAAOA,EAAKwB,WACR5K,KAAK+sB,SAASK,IAAID,GAAW,CAC7B,IAAIO,EAAe1tB,KAAK+sB,SAAStsB,IAAI0sB,GAAUI,OAAOnkB,GAClDskB,GACA1tB,KAAK+sB,SAASY,OAAOR,GAG7B,OAA8B,IAAvBntB,KAAK+sB,SAASG,KAGrB,OAAO,GAWnBJ,EAAmB5sB,UAAU0tB,YAAc,SAAUC,EAAYC,GAC1C,OAAf9tB,KAAKR,MACLsuB,EAAKD,EAAY7tB,KAAKR,OAGtBQ,KAAKwY,cAAa,SAAUpY,EAAKqtB,GAC7B,IAAIrkB,EAAO,IAAIa,EAAK4jB,EAAW9sB,WAAa,IAAMX,GAClDqtB,EAAKG,YAAYxkB,EAAM0kB,OASnChB,EAAmB5sB,UAAUsY,aAAe,SAAUsV,GAClD9tB,KAAK+sB,SAAS1I,SAAQ,SAAUoJ,EAAMrtB,GAClC0tB,EAAK1tB,EAAKqtB,OAGXX,EA/H4B;;;;;;;;;;;;;;;;IAuJvC,SAAWD,GACPA,EAAcA,EAAc,aAAe,GAAK,YAChDA,EAAcA,EAAc,SAAW,GAAK,QAC5CA,EAAcA,EAAc,kBAAoB,GAAK,iBACrDA,EAAcA,EAAc,mBAAqB,GAAK,mBAJ1D,CAKGA,KAAkBA,GAAgB,KAQrC,IA0GIkB,GA45DAC,GAtgEAC,GAAiC,WACjC,SAASA,EAAgBC,EAAUC,EAAYC,EAASC,GACpDruB,KAAKkuB,SAAWA,EAChBluB,KAAKmuB,WAAaA,EAClBnuB,KAAKouB,QAAUA,EACfpuB,KAAKquB,OAASA,EACd1uB,EAAK8D,QAAQ4qB,GAAUF,EAAY,uCAyBvC,OAnBAF,EAAgBK,KAAO,IAAIL,GACb,GAAM,EAAO,MACf,GAKZA,EAAgBM,OAAS,IAAIN,GAAgB,GAC7B,EAAM,MACV,GAKZA,EAAgBO,qBAAuB,SAAUJ,GAC7C,OAAO,IAAIH,GAAgB,GACX,EAAMG,GACV,IAETH,EA/ByB,GAkDhCQ,GAA8B,WAO9B,SAASA,EACUrlB,EACAslB,EACAC,GACf3uB,KAAKoJ,KAAOA,EACZpJ,KAAK0uB,aAAeA,EACpB1uB,KAAK2uB,OAASA,EAEd3uB,KAAK8O,KAAO+d,GAAc+B,eAE1B5uB,KAAK6uB,OAASZ,GAAgBK,KAoBlC,OAfAG,EAAavuB,UAAU4uB,kBAAoB,SAAUhX,GACjD,GAAK9X,KAAKoJ,KAAKqC,UAIV,IAA+B,MAA3BzL,KAAK0uB,aAAalvB,MAGvB,OAFAG,EAAK8D,OAAOzD,KAAK0uB,aAAa3B,SAASthB,UAAW,4DAE3CzL,KAGP,IAAIwe,EAAYxe,KAAK0uB,aAAaK,QAAQ,IAAI9kB,EAAK6N,IACnD,OAAO,IAAI2W,EAAaxkB,EAAK+kB,MAAOxQ,EAAWxe,KAAK2uB,QATpD,OADAhvB,EAAK8D,OAAOzD,KAAKoJ,KAAKsB,aAAeoN,EAAW,iDACzC,IAAI2W,EAAazuB,KAAKoJ,KAAKwB,WAAY5K,KAAK0uB,aAAc1uB,KAAK2uB,SAYvEF,EArCsB,GA+D7BQ,GAAgB,WAIhB,OAHKlB,KACDA,GAAyB,IAAIjT,GAAU1U,IAEpC2nB,IAKPmB,GAA+B,WAM/B,SAASA,EAAc1vB,EAAOutB,QACT,IAAbA,IAAuBA,EAAWkC,MACtCjvB,KAAKR,MAAQA,EACbQ,KAAK+sB,SAAWA,EAmTpB,OA5SAmC,EAAcC,WAAa,SAAU7oB,GACjC,IAAImnB,EAAOyB,EAAcF,MAIzB,OAHA9nB,EAAKZ,GAAK,SAAU6d,EAAWiL,GAC3B3B,EAAOA,EAAKttB,IAAI,IAAI8J,EAAKka,GAAYiL,MAElC3B,GAMXyB,EAAchvB,UAAUuL,QAAU,WAC9B,OAAsB,OAAfzL,KAAKR,OAAkBQ,KAAK+sB,SAASthB,WAchDyjB,EAAchvB,UAAUmvB,iCAAmC,SAAU3jB,EAAc4jB,GAC/E,GAAkB,MAAdtvB,KAAKR,OAAiB8vB,EAAUtvB,KAAKR,OACrC,MAAO,CAAE4J,KAAMa,EAAK+kB,MAAOxvB,MAAOQ,KAAKR,OAGvC,GAAIkM,EAAaD,UACb,OAAO,KAGP,IAAI6M,EAAQ5M,EAAahB,WACrBY,EAAQtL,KAAK+sB,SAAStsB,IAAI6X,GAC9B,GAAc,OAAVhN,EAAgB,CAChB,IAAIikB,EAA4BjkB,EAAM+jB,iCAAiC3jB,EAAad,WAAY0kB,GAChG,GAAiC,MAA7BC,EAAmC,CACnC,IAAIC,EAAW,IAAIvlB,EAAKqO,GAAOhN,MAAMikB,EAA0BnmB,MAC/D,MAAO,CAAEA,KAAMomB,EAAUhwB,MAAO+vB,EAA0B/vB,OAG1D,OAAO,KAIX,OAAO,MAWvB0vB,EAAchvB,UAAUuvB,yBAA2B,SAAU/jB,GACzD,OAAO1L,KAAKqvB,iCAAiC3jB,GAAc,WAAc,OAAO,MAMpFwjB,EAAchvB,UAAU6uB,QAAU,SAAUrjB,GACxC,GAAIA,EAAaD,UACb,OAAOzL,KAGP,IAAIsY,EAAQ5M,EAAahB,WACrB8T,EAAYxe,KAAK+sB,SAAStsB,IAAI6X,GAClC,OAAkB,OAAdkG,EACOA,EAAUuQ,QAAQrjB,EAAad,YAG/BskB,EAAcF,OAWjCE,EAAchvB,UAAUC,IAAM,SAAUuL,EAAcgkB,GAClD,GAAIhkB,EAAaD,UACb,OAAO,IAAIyjB,EAAcQ,EAAO1vB,KAAK+sB,UAGrC,IAAIzU,EAAQ5M,EAAahB,WACrBY,EAAQtL,KAAK+sB,SAAStsB,IAAI6X,IAAU4W,EAAcF,MAClDW,EAAWrkB,EAAMnL,IAAIuL,EAAad,WAAY8kB,GAC9CvP,EAAcngB,KAAK+sB,SAASzR,OAAOhD,EAAOqX,GAC9C,OAAO,IAAIT,EAAclvB,KAAKR,MAAO2gB,IAS7C+O,EAAchvB,UAAUW,OAAS,SAAU6K,GACvC,GAAIA,EAAaD,UACb,OAAIzL,KAAK+sB,SAASthB,UACPyjB,EAAcF,MAGd,IAAIE,EAAc,KAAMlvB,KAAK+sB,UAIxC,IAAIzU,EAAQ5M,EAAahB,WACrBY,EAAQtL,KAAK+sB,SAAStsB,IAAI6X,GAC9B,GAAIhN,EAAO,CACP,IAAIqkB,EAAWrkB,EAAMzK,OAAO6K,EAAad,YACrCuV,OAAc,EAOlB,OALIA,EADAwP,EAASlkB,UACKzL,KAAK+sB,SAASlsB,OAAOyX,GAGrBtY,KAAK+sB,SAASzR,OAAOhD,EAAOqX,GAE3B,OAAf3vB,KAAKR,OAAkB2gB,EAAY1U,UAC5ByjB,EAAcF,MAGd,IAAIE,EAAclvB,KAAKR,MAAO2gB,GAIzC,OAAOngB,MAUnBkvB,EAAchvB,UAAUO,IAAM,SAAUiL,GACpC,GAAIA,EAAaD,UACb,OAAOzL,KAAKR,MAGZ,IAAI8Y,EAAQ5M,EAAahB,WACrBY,EAAQtL,KAAK+sB,SAAStsB,IAAI6X,GAC9B,OAAIhN,EACOA,EAAM7K,IAAIiL,EAAad,YAGvB,MAWnBskB,EAAchvB,UAAU0vB,QAAU,SAAUlkB,EAAcmkB,GACtD,GAAInkB,EAAaD,UACb,OAAOokB,EAGP,IAAIvX,EAAQ5M,EAAahB,WACrBY,EAAQtL,KAAK+sB,SAAStsB,IAAI6X,IAAU4W,EAAcF,MAClDW,EAAWrkB,EAAMskB,QAAQlkB,EAAad,WAAYilB,GAClD1P,OAAc,EAOlB,OALIA,EADAwP,EAASlkB,UACKzL,KAAK+sB,SAASlsB,OAAOyX,GAGrBtY,KAAK+sB,SAASzR,OAAOhD,EAAOqX,GAEvC,IAAIT,EAAclvB,KAAKR,MAAO2gB,IAW7C+O,EAAchvB,UAAU4vB,KAAO,SAAU9qB,GACrC,OAAOhF,KAAK+vB,MAAM9lB,EAAK+kB,MAAOhqB,IAUlCkqB,EAAchvB,UAAU6vB,MAAQ,SAAUC,EAAWhrB,GACjD,IAAIirB,EAAQ,GAIZ,OAHAjwB,KAAK+sB,SAAS9R,kBAAiB,SAAUkS,EAAU3O,GAC/CyR,EAAM9C,GAAY3O,EAAUuR,MAAMC,EAAU1kB,MAAM6hB,GAAWnoB,MAE1DA,EAAGgrB,EAAWhwB,KAAKR,MAAOywB,IASrCf,EAAchvB,UAAUgwB,WAAa,SAAU9mB,EAAM7B,GACjD,OAAOvH,KAAKmwB,YAAY/mB,EAAMa,EAAK+kB,MAAOznB,IAE9C2nB,EAAchvB,UAAUiwB,YAAc,SAAUC,EAAcJ,EAAWzoB,GACrE,IAAIiT,IAASxa,KAAKR,OAAQ+H,EAAEyoB,EAAWhwB,KAAKR,OAC5C,GAAIgb,EACA,OAAOA,EAGP,GAAI4V,EAAa3kB,UACb,OAAO,KAGP,IAAI6M,EAAQ8X,EAAa1lB,WACrB2lB,EAAYrwB,KAAK+sB,SAAStsB,IAAI6X,GAClC,OAAI+X,EACOA,EAAUF,YAAYC,EAAaxlB,WAAYolB,EAAU1kB,MAAMgN,GAAQ/Q,GAGvE,MAWvB2nB,EAAchvB,UAAUowB,cAAgB,SAAUlnB,EAAM7B,GACpD,OAAOvH,KAAKuwB,eAAennB,EAAMa,EAAK+kB,MAAOznB,IAEjD2nB,EAAchvB,UAAUqwB,eAAiB,SAAUH,EAAcI,EAAqBjpB,GAClF,GAAI6oB,EAAa3kB,UACb,OAAOzL,KAGHA,KAAKR,OACL+H,EAAEipB,EAAqBxwB,KAAKR,OAEhC,IAAI8Y,EAAQ8X,EAAa1lB,WACrB2lB,EAAYrwB,KAAK+sB,SAAStsB,IAAI6X,GAClC,OAAI+X,EACOA,EAAUE,eAAeH,EAAaxlB,WAAY4lB,EAAoBllB,MAAMgN,GAAQ/Q,GAGpF2nB,EAAcF,OAWjCE,EAAchvB,UAAUuwB,QAAU,SAAUlpB,GACxCvH,KAAK0wB,SAASzmB,EAAK+kB,MAAOznB,IAE9B2nB,EAAchvB,UAAUwwB,SAAW,SAAUF,EAAqBjpB,GAC9DvH,KAAK+sB,SAAS9R,kBAAiB,SAAUnD,EAAW0G,GAChDA,EAAUkS,SAASF,EAAoBllB,MAAMwM,GAAYvQ,MAEzDvH,KAAKR,OACL+H,EAAEipB,EAAqBxwB,KAAKR,QAOpC0vB,EAAchvB,UAAUywB,aAAe,SAAUppB,GAC7CvH,KAAK+sB,SAAS9R,kBAAiB,SAAUnD,EAAW0G,GAC5CA,EAAUhf,OACV+H,EAAEuQ,EAAW0G,EAAUhf,WAKnC0vB,EAAcF,MAAQ,IAAIE,EAAc,MACjCA,EA5TuB,GAqV9B0B,GAAgC,WAChC,SAASA,EAAe/B,EAAQzlB,GAC5BpJ,KAAK6uB,OAASA,EACd7uB,KAAKoJ,KAAOA,EAEZpJ,KAAK8O,KAAO+d,GAAcgE,gBAU9B,OARAD,EAAe1wB,UAAU4uB,kBAAoB,SAAUhX,GACnD,OAAI9X,KAAKoJ,KAAKqC,UACH,IAAImlB,EAAe5wB,KAAK6uB,OAAQ5kB,EAAK+kB,OAGrC,IAAI4B,EAAe5wB,KAAK6uB,OAAQ7uB,KAAKoJ,KAAKwB,aAGlDgmB,EAfwB,GAyC/BE,GAA2B,WAC3B,SAASA,EAAUjC,EAAQzlB,EAAMqa,GAC7BzjB,KAAK6uB,OAASA,EACd7uB,KAAKoJ,KAAOA,EACZpJ,KAAKyjB,KAAOA,EAEZzjB,KAAK8O,KAAO+d,GAAckE,UAU9B,OARAD,EAAU5wB,UAAU4uB,kBAAoB,SAAUhX,GAC9C,OAAI9X,KAAKoJ,KAAKqC,UACH,IAAIqlB,EAAU9wB,KAAK6uB,OAAQ5kB,EAAK+kB,MAAOhvB,KAAKyjB,KAAK5L,kBAAkBC,IAGnE,IAAIgZ,EAAU9wB,KAAK6uB,OAAQ7uB,KAAKoJ,KAAKwB,WAAY5K,KAAKyjB,OAG9DqN,EAhBmB,GA0C1BE,GAAuB,WACvB,SAASA,EACUnC,EACAzlB,EACA2jB,GACf/sB,KAAK6uB,OAASA,EACd7uB,KAAKoJ,KAAOA,EACZpJ,KAAK+sB,SAAWA,EAEhB/sB,KAAK8O,KAAO+d,GAAcoE,MAsC9B,OAjCAD,EAAM9wB,UAAU4uB,kBAAoB,SAAUhX,GAC1C,GAAI9X,KAAKoJ,KAAKqC,UAAW,CACrB,IAAI+S,EAAYxe,KAAK+sB,SAASgC,QAAQ,IAAI9kB,EAAK6N,IAC/C,OAAI0G,EAAU/S,UAEH,KAEF+S,EAAUhf,MAER,IAAIsxB,GAAU9wB,KAAK6uB,OAAQ5kB,EAAK+kB,MAAOxQ,EAAUhf,OAIjD,IAAIwxB,EAAMhxB,KAAK6uB,OAAQ5kB,EAAK+kB,MAAOxQ,GAK9C,OADA7e,EAAK8D,OAAOzD,KAAKoJ,KAAKsB,aAAeoN,EAAW,kEACzC,IAAIkZ,EAAMhxB,KAAK6uB,OAAQ7uB,KAAKoJ,KAAKwB,WAAY5K,KAAK+sB,WAMjEiE,EAAM9wB,UAAUa,SAAW,WACvB,MAAQ,aACJf,KAAKoJ,KACL,KACApJ,KAAK6uB,OAAO9tB,WACZ,WACAf,KAAK+sB,SAAShsB,WACd,KAEDiwB,EA/Ce,GAwEtBE,GAA2B,WAM3B,SAASA,EAAUrN,EAAOsN,EAAmBC,GACzCpxB,KAAK6jB,MAAQA,EACb7jB,KAAKmxB,kBAAoBA,EACzBnxB,KAAKoxB,UAAYA,EAwCrB,OAlCAF,EAAUhxB,UAAUmxB,mBAAqB,WACrC,OAAOrxB,KAAKmxB,mBAMhBD,EAAUhxB,UAAUoxB,WAAa,WAC7B,OAAOtxB,KAAKoxB,WAMhBF,EAAUhxB,UAAUqxB,kBAAoB,SAAUnoB,GAC9C,GAAIA,EAAKqC,UACL,OAAOzL,KAAKqxB,uBAAyBrxB,KAAKoxB,UAE9C,IAAIjE,EAAW/jB,EAAKsB,WACpB,OAAO1K,KAAKwxB,mBAAmBrE,IAMnC+D,EAAUhxB,UAAUsxB,mBAAqB,SAAUpxB,GAC/C,OAASJ,KAAKqxB,uBAAyBrxB,KAAKoxB,WAAcpxB,KAAK6jB,MAAM7L,SAAS5X,IAKlF8wB,EAAUhxB,UAAUuxB,QAAU,WAC1B,OAAOzxB,KAAK6jB,OAETqN,EAjDmB,GA2E1BQ,GAA2B,WAM3B,SAASA,EAAUC,EAAaC,GAC5B5xB,KAAK2xB,YAAcA,EACnB3xB,KAAK4xB,aAAeA,EAyDxB,OAjDAF,EAAUxxB,UAAU2xB,gBAAkB,SAAUC,EAAWC,EAAUC,GACjE,OAAO,IAAIN,EAAU,IAAIR,GAAUY,EAAWC,EAAUC,GAAWhyB,KAAK4xB,eAQ5EF,EAAUxxB,UAAU+xB,iBAAmB,SAAUC,EAAYH,EAAUC,GACnE,OAAO,IAAIN,EAAU1xB,KAAK2xB,YAAa,IAAIT,GAAUgB,EAAYH,EAAUC,KAK/EN,EAAUxxB,UAAUiyB,cAAgB,WAChC,OAAOnyB,KAAK2xB,aAKhBD,EAAUxxB,UAAUkyB,qBAAuB,WACvC,OAAOpyB,KAAK2xB,YAAYN,qBAClBrxB,KAAK2xB,YAAYF,UACjB,MAKVC,EAAUxxB,UAAUmyB,eAAiB,WACjC,OAAOryB,KAAK4xB,cAKhBF,EAAUxxB,UAAUoyB,sBAAwB,WACxC,OAAOtyB,KAAK4xB,aAAaP,qBACnBrxB,KAAK4xB,aAAaH,UAClB,MAMVC,EAAU1C,MAAQ,IAAI0C,EAAU,IAAIR,GAAU3Q,GAAa9I,YACrC,GACR,GAAQ,IAAIyZ,GAAU3Q,GAAa9I,YAC3B,GACR,IACPia,EAjEmB,GA6F1Ba,GAAwB,WACxB,SAASA,EAAOzjB,EAAM8W,EAAc9N,EAAW0a,EAAS5N,GACpD5kB,KAAK8O,KAAOA,EACZ9O,KAAK4lB,aAAeA,EACpB5lB,KAAK8X,UAAYA,EACjB9X,KAAKwyB,QAAUA,EACfxyB,KAAK4kB,SAAWA,EAqDpB,OA/CA2N,EAAOE,YAAc,SAAU7d,GAC3B,OAAO,IAAI2d,EAAOA,EAAOG,MAAO9d,IAOpC2d,EAAOI,iBAAmB,SAAUxF,EAAUvY,GAC1C,OAAO,IAAI2d,EAAOA,EAAOK,YAAahe,EAAUuY,IAOpDoF,EAAOM,mBAAqB,SAAU1F,EAAUvY,GAC5C,OAAO,IAAI2d,EAAOA,EAAOO,cAAele,EAAUuY,IAQtDoF,EAAOQ,mBAAqB,SAAU5F,EAAU6F,EAAaC,GACzD,OAAO,IAAIV,EAAOA,EAAOW,cAAeF,EAAa7F,EAAU8F,IAOnEV,EAAOY,iBAAmB,SAAUhG,EAAUvY,GAC1C,OAAO,IAAI2d,EAAOA,EAAOa,YAAaxe,EAAUuY,IAIpDoF,EAAOK,YAAc,cAErBL,EAAOO,cAAgB,gBAEvBP,EAAOW,cAAgB,gBAEvBX,EAAOa,YAAc,cAErBb,EAAOG,MAAQ,QACRH,EA3DgB,GAqFvBc,GAA+B,WAC/B,SAASA,EAActP,GACnB/jB,KAAK+jB,OAASA,EAkGlB,OAhGAsP,EAAcnzB,UAAUmY,YAAc,SAAUoL,EAAMrjB,EAAKuvB,EAAU2D,EAAczE,EAAQ0E,GACvF5zB,EAAK8D,OAAOggB,EAAKjK,UAAUxZ,KAAK+jB,QAAS,qDACzC,IAAIyP,EAAW/P,EAAK5L,kBAAkBzX,GAEtC,OAAIozB,EAASzb,SAASub,GAAcjnB,OAAOsjB,EAAS5X,SAASub,KAIrDE,EAAS/nB,YAAckkB,EAASlkB,UAIzBgY,GAGa,MAAxB8P,IACI5D,EAASlkB,UACLgY,EAAKzL,SAAS5X,GACdmzB,EAAqBE,iBAAiBlB,GAAOM,mBAAmBzyB,EAAKozB,IAGrE7zB,EAAK8D,OAAOggB,EAAKrM,aAAc,uEAG9Boc,EAAS/nB,UACd8nB,EAAqBE,iBAAiBlB,GAAOI,iBAAiBvyB,EAAKuvB,IAGnE4D,EAAqBE,iBAAiBlB,GAAOQ,mBAAmB3yB,EAAKuvB,EAAU6D,KAGnF/P,EAAKrM,cAAgBuY,EAASlkB,UACvBgY,EAIAA,EAAKtL,qBAAqB/X,EAAKuvB,GAAUpW,UAAUvZ,KAAK+jB,UAMvEsP,EAAcnzB,UAAUwzB,eAAiB,SAAUlB,EAASmB,EAASJ,GAuBjE,OAtB4B,MAAxBA,IACKf,EAAQpb,cACTob,EAAQha,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAC3Cyb,EAAQ3b,SAAS5X,IAClBmzB,EAAqBE,iBAAiBlB,GAAOM,mBAAmBzyB,EAAK8X,OAI5Eyb,EAAQvc,cACTuc,EAAQnb,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAChD,GAAIsa,EAAQxa,SAAS5X,GAAM,CACvB,IAAIozB,EAAWhB,EAAQ3a,kBAAkBzX,GACpCozB,EAASnnB,OAAO6L,IACjBqb,EAAqBE,iBAAiBlB,GAAOQ,mBAAmB3yB,EAAK8X,EAAWsb,SAIpFD,EAAqBE,iBAAiBlB,GAAOI,iBAAiBvyB,EAAK8X,QAK5Eyb,EAAQpa,UAAUvZ,KAAK+jB,SAKlCsP,EAAcnzB,UAAUyX,eAAiB,SAAU6a,EAAS5R,GACxD,OAAI4R,EAAQ/mB,UACD8U,GAAa9I,WAGb+a,EAAQ7a,eAAeiJ,IAMtCyS,EAAcnzB,UAAU0zB,aAAe,WACnC,OAAO,GAKXP,EAAcnzB,UAAU2zB,iBAAmB,WACvC,OAAO7zB,MAKXqzB,EAAcnzB,UAAUylB,SAAW,WAC/B,OAAO3lB,KAAK+jB,QAETsP,EApGuB,GAuH9BS,GAAwC,WACxC,SAASA,IACL9zB,KAAK+zB,UAAY,IAAI/G,IA6CzB,OA3CA8G,EAAuB5zB,UAAUuzB,iBAAmB,SAAUhO,GAC1D,IAAI3W,EAAO2W,EAAO3W,KACdqe,EAAW1H,EAAO3N,UACtBnY,EAAK8D,OAAOqL,IAASyjB,GAAOK,aACxB9jB,IAASyjB,GAAOW,eAChBpkB,IAASyjB,GAAOO,cAAe,6CACnCnzB,EAAK8D,OAAoB,cAAb0pB,EAA0B,mDACtC,IAAI6G,EAAYh0B,KAAK+zB,UAAUtzB,IAAI0sB,GACnC,GAAI6G,EAAW,CACX,IAAIC,EAAUD,EAAUllB,KACxB,GAAIA,IAASyjB,GAAOK,aAAeqB,IAAY1B,GAAOO,cAClD9yB,KAAK+zB,UAAU5zB,IAAIgtB,EAAUoF,GAAOQ,mBAAmB5F,EAAU1H,EAAOG,aAAcoO,EAAUpO,oBAE/F,GAAI9W,IAASyjB,GAAOO,eACrBmB,IAAY1B,GAAOK,YACnB5yB,KAAK+zB,UAAUpG,OAAOR,QAErB,GAAIre,IAASyjB,GAAOO,eACrBmB,IAAY1B,GAAOW,cACnBlzB,KAAK+zB,UAAU5zB,IAAIgtB,EAAUoF,GAAOM,mBAAmB1F,EAAU6G,EAAUxB,eAE1E,GAAI1jB,IAASyjB,GAAOW,eACrBe,IAAY1B,GAAOK,YACnB5yB,KAAK+zB,UAAU5zB,IAAIgtB,EAAUoF,GAAOI,iBAAiBxF,EAAU1H,EAAOG,mBAErE,IAAI9W,IAASyjB,GAAOW,eACrBe,IAAY1B,GAAOW,cAInB,MAAMvzB,EAAK6W,eAAe,mCACtBiP,EACA,mBACAuO,GANJh0B,KAAK+zB,UAAU5zB,IAAIgtB,EAAUoF,GAAOQ,mBAAmB5F,EAAU1H,EAAOG,aAAcoO,EAAUxB,gBAUpGxyB,KAAK+zB,UAAU5zB,IAAIgtB,EAAU1H,IAGrCqO,EAAuB5zB,UAAUg0B,WAAa,WAC1C,OAAOjxB,MAAMkxB,KAAKn0B,KAAK+zB,UAAUtI,WAE9BqI,EA/CgC,GA0EvCM,GAAwC,WACxC,SAASA,KAcT,OATAA,EAAuBl0B,UAAUm0B,iBAAmB,SAAUlH,GAC1D,OAAO,MAKXiH,EAAuBl0B,UAAUo0B,mBAAqB,SAAU7b,EAAOnN,EAAOnD,GAC1E,OAAO,MAEJisB,EAfgC,GAsBvCG,GAA2B,IAAIH,GAQ/BI,GAA8C,WAM9C,SAASA,EAA6BC,EAASC,EAAYC,QACvB,IAA5BA,IAAsCA,EAA0B,MACpE30B,KAAKy0B,QAAUA,EACfz0B,KAAK00B,WAAaA,EAClB10B,KAAK20B,wBAA0BA,EAgCnC,OA3BAH,EAA6Bt0B,UAAUm0B,iBAAmB,SAAUlH,GAChE,IAAI5X,EAAOvV,KAAK00B,WAAWvC,gBAC3B,GAAI5c,EAAKic,mBAAmBrE,GACxB,OAAO5X,EAAKkc,UAAU5Z,kBAAkBsV,GAGxC,IAAIyH,EAA6C,MAAhC50B,KAAK20B,wBAChB,IAAIzD,GAAUlxB,KAAK20B,yBAAyB,GAAM,GAClD30B,KAAK00B,WAAWrC,iBACtB,OAAOryB,KAAKy0B,QAAQI,kBAAkB1H,EAAUyH,IAMxDJ,EAA6Bt0B,UAAUo0B,mBAAqB,SAAU7b,EAAOnN,EAAOnD,GAChF,IAAI2sB,EAAqD,MAAhC90B,KAAK20B,wBACxB30B,KAAK20B,wBACL30B,KAAK00B,WAAWpC,wBAClByC,EAAQ/0B,KAAKy0B,QAAQO,iBAAiBF,EAAoBxpB,EAAO,EAAGnD,EAASsQ,GACjF,OAAqB,IAAjBsc,EAAMlyB,OACC,KAGAkyB,EAAM,IAGdP,EA1CsC,GAiE7CS,GAAiC,WAKjC,SAASA,EAAgBC,EAAWC,GAChCn1B,KAAKk1B,UAAYA,EACjBl1B,KAAKm1B,QAAUA,EAEnB,OAAOF,EATyB,GAchCG,GAA+B,WAI/B,SAASA,EAAcC,GACnBr1B,KAAKq1B,QAAUA,EA0hBnB,OArhBAD,EAAcl1B,UAAUo1B,cAAgB,SAAUJ,GAC9Cv1B,EAAK8D,OAAOyxB,EACP/C,gBACAV,UACAjY,UAAUxZ,KAAKq1B,QAAQ1P,YAAa,0BACzChmB,EAAK8D,OAAOyxB,EACP7C,iBACAZ,UACAjY,UAAUxZ,KAAKq1B,QAAQ1P,YAAa,4BAS7CyP,EAAcl1B,UAAUq1B,eAAiB,SAAUC,EAAcC,EAAWC,EAAaC,GACrF,IACIC,EAAcC,EADdC,EAAc,IAAIhC,GAEtB,GAAI2B,EAAU3mB,OAAS+d,GAAckE,UAAW,CAC5C,IAAIgF,EAAYN,EACZM,EAAUlH,OAAOX,SACjB0H,EAAe51B,KAAKg2B,oBAAoBR,EAAcO,EAAU3sB,KAAM2sB,EAAUtS,KAAMiS,EAAaC,EAAeG,IAGlHn2B,EAAK8D,OAAOsyB,EAAUlH,OAAOV,WAAY,mBAIzC0H,EACIE,EAAUlH,OAAOR,QACZmH,EAAanD,iBAAiBf,eAC1ByE,EAAU3sB,KAAKqC,UAC5BmqB,EAAe51B,KAAKi2B,sBAAsBT,EAAcO,EAAU3sB,KAAM2sB,EAAUtS,KAAMiS,EAAaC,EAAeE,EAAkBC,SAGzI,GAAIL,EAAU3mB,OAAS+d,GAAcoE,MAAO,CAC7C,IAAIiF,EAAQT,EACRS,EAAMrH,OAAOX,SACb0H,EAAe51B,KAAKm2B,gBAAgBX,EAAcU,EAAM9sB,KAAM8sB,EAAMnJ,SAAU2I,EAAaC,EAAeG,IAG1Gn2B,EAAK8D,OAAOyyB,EAAMrH,OAAOV,WAAY,mBAErC0H,EACIK,EAAMrH,OAAOR,QAAUmH,EAAanD,iBAAiBf,aACzDsE,EAAe51B,KAAKo2B,kBAAkBZ,EAAcU,EAAM9sB,KAAM8sB,EAAMnJ,SAAU2I,EAAaC,EAAeE,EAAkBC,SAGjI,GAAIL,EAAU3mB,OAAS+d,GAAc+B,eAAgB,CACtD,IAAIyH,EAAeZ,EAKfG,EAJCS,EAAa1H,OAIC3uB,KAAKs2B,iBAAiBd,EAAca,EAAajtB,KAAMssB,EAAaC,EAAeG,GAHnF91B,KAAKu2B,cAAcf,EAAca,EAAajtB,KAAMitB,EAAa3H,aAAcgH,EAAaC,EAAeG,OAM7H,IAAIL,EAAU3mB,OAAS+d,GAAcgE,gBAItC,MAAMlxB,EAAK6W,eAAe,2BAA6Bif,EAAU3mB,MAHjE8mB,EAAe51B,KAAKw2B,gBAAgBhB,EAAcC,EAAUrsB,KAAMssB,EAAaI,GAKnF,IAAIX,EAAUW,EAAY5B,aAE1B,OADAkB,EAAcqB,oBAAoBjB,EAAcI,EAAcT,GACvD,IAAIF,GAAgBW,EAAcT,IAQ7CC,EAAcqB,oBAAsB,SAAUjB,EAAcI,EAAcE,GACtE,IAAIhE,EAAY8D,EAAazD,gBAC7B,GAAIL,EAAUT,qBAAsB,CAChC,IAAIqF,EAAgB5E,EAAUL,UAAUra,cAAgB0a,EAAUL,UAAUhmB,UACxEkrB,EAAkBnB,EAAapD,wBAC/B0D,EAAYjzB,OAAS,IACpB2yB,EAAarD,gBAAgBd,sBAC7BqF,IACI5E,EAAUL,UAAUplB,OAA4BsqB,KACpD7E,EACIL,UACApa,cACAhL,OAAOsqB,EAAgBtf,iBAC5Bye,EAAYpvB,KAAK6rB,GAAOE,YACHmD,EAAaxD,2BAa9CgD,EAAcl1B,UAAU02B,oCAAsC,SAAU1B,EAAW2B,EAAYnB,EAAa7G,EAAQiH,GAChH,IAAIgB,EAAe5B,EAAU/C,gBAC7B,GAA8C,MAA1CuD,EAAYqB,eAAeF,GAE3B,OAAO3B,EAGP,IAAI8B,OAAgB,EAAQpC,OAAa,EACzC,GAAIiC,EAAWprB,UAGX,GADA9L,EAAK8D,OAAOyxB,EAAU7C,iBAAiBhB,qBAAsB,8DACzD6D,EAAU7C,iBAAiBf,aAAc,CAIzC,IAAI2F,EAAc/B,EAAU5C,wBACxB4E,EAAmBD,aAAuB1W,GACxC0W,EACA1W,GAAa9I,WACf0f,EAAwBzB,EAAY0B,0BAA0BF,GAClEF,EAAgBh3B,KAAKq1B,QAAQ3B,eAAewB,EAAU/C,gBAAgBV,UAAW0F,EAAuBrB,OAEvG,CACD,IAAIuB,EAAe3B,EAAYnK,uBAAuB2J,EAAU5C,yBAChE0E,EAAgBh3B,KAAKq1B,QAAQ3B,eAAewB,EAAU/C,gBAAgBV,UAAW4F,EAAcvB,OAGlG,CACD,IAAI3I,EAAW0J,EAAWnsB,WAC1B,GAAiB,cAAbyiB,EAA0B,CAC1BxtB,EAAK8D,OAAkC,IAA3BozB,EAAWlsB,YAAmB,yDAC1C,IAAI2sB,EAAeR,EAAarF,UAChCmD,EAAaM,EAAU7C,iBAAiBZ,UAExC,IAAI8F,EAAkB7B,EAAY8B,mCAAmCX,EAAYS,EAAc1C,GAE3FoC,EADmB,MAAnBO,EACgBv3B,KAAKq1B,QAAQ1d,eAAe2f,EAAcC,GAI1CT,EAAarF,cAGhC,CACD,IAAIgG,EAAkBZ,EAAWjsB,WAE7B8sB,OAAgB,EACpB,GAAIZ,EAAatF,mBAAmBrE,GAAW,CAC3CyH,EAAaM,EAAU7C,iBAAiBZ,UACxC,IAAIkG,EAAmBjC,EAAY8B,mCAAmCX,EAAYC,EAAarF,UAAWmD,GAEtG8C,EADoB,MAApBC,EACgBb,EACXrF,UACA5Z,kBAAkBsV,GAClB9U,YAAYof,EAAiBE,GAIlBb,EACXrF,UACA5Z,kBAAkBsV,QAI3BuK,EAAgBhC,EAAYb,kBAAkB1H,EAAU+H,EAAU7C,kBAGlE2E,EADiB,MAAjBU,EACgB13B,KAAKq1B,QAAQhd,YAAYye,EAAarF,UAAWtE,EAAUuK,EAAeD,EAAiB5I,EAAQiH,GAInGgB,EAAarF,WAIzC,OAAOyD,EAAUrD,gBAAgBmF,EAAeF,EAAazF,sBAAwBwF,EAAWprB,UAAWzL,KAAKq1B,QAAQzB,iBAchIwB,EAAcl1B,UAAU+1B,sBAAwB,SAAUT,EAAcqB,EAAYe,EAAalC,EAAaC,EAAeE,EAAkBC,GAC3I,IACI+B,EADAC,EAAgBtC,EAAanD,iBAE7B0F,EAAelC,EACb71B,KAAKq1B,QACLr1B,KAAKq1B,QAAQxB,mBACnB,GAAIgD,EAAWprB,UACXosB,EAAiBE,EAAarE,eAAeoE,EAAcrG,UAAWmG,EAAa,WAElF,GAAIG,EAAanE,iBAAmBkE,EAAcxG,aAAc,CAEjE,IAAI0G,EAAgBF,EACfrG,UACApZ,YAAYwe,EAAYe,GAC7BC,EAAiBE,EAAarE,eAAeoE,EAAcrG,UAAWuG,EAAe,UAEpF,CACD,IAAI7K,EAAW0J,EAAWnsB,WAC1B,IAAKotB,EAAcvG,kBAAkBsF,IACjCA,EAAWlsB,YAAc,EAEzB,OAAO6qB,EAEX,IAAIiC,EAAkBZ,EAAWjsB,WAC7BsN,EAAY4f,EAAcrG,UAAU5Z,kBAAkBsV,GACtD/U,EAAeF,EAAUG,YAAYof,EAAiBG,GAEtDC,EADa,cAAb1K,EACiB4K,EAAapgB,eAAemgB,EAAcrG,UAAWrZ,GAGrD2f,EAAa1f,YAAYyf,EAAcrG,UAAWtE,EAAU/U,EAAcqf,EAAiBlD,GAA0B,MAG9I,IAAIqB,EAAeJ,EAAavD,iBAAiB4F,EAAgBC,EAAczG,sBAAwBwF,EAAWprB,UAAWssB,EAAanE,gBACtI/E,EAAS,IAAI2F,GAA6BkB,EAAaE,EAAcD,GACzE,OAAO31B,KAAK42B,oCAAoChB,EAAciB,EAAYnB,EAAa7G,EAAQiH,IAYnGV,EAAcl1B,UAAU81B,oBAAsB,SAAUR,EAAcqB,EAAYe,EAAalC,EAAaC,EAAeG,GACvH,IACIF,EAAcoB,EADdF,EAAetB,EAAarD,gBAE5BtD,EAAS,IAAI2F,GAA6BkB,EAAaF,EAAcG,GACzE,GAAIkB,EAAWprB,UACXurB,EAAgBh3B,KAAKq1B,QAAQ3B,eAAe8B,EAAarD,gBAAgBV,UAAWmG,EAAa9B,GACjGF,EAAeJ,EAAa3D,gBAAgBmF,GAAe,EAAMh3B,KAAKq1B,QAAQzB,oBAE7E,CACD,IAAIzG,EAAW0J,EAAWnsB,WAC1B,GAAiB,cAAbyiB,EACA6J,EAAgBh3B,KAAKq1B,QAAQ1d,eAAe6d,EAAarD,gBAAgBV,UAAWmG,GACpFhC,EAAeJ,EAAa3D,gBAAgBmF,EAAeF,EAAazF,qBAAsByF,EAAaxF,kBAE1G,CACD,IAAImG,EAAkBZ,EAAWjsB,WAC7B4oB,EAAWsD,EAAarF,UAAU5Z,kBAAkBsV,GACpDwC,OAAW,EACf,GAAI8H,EAAgBhsB,UAEhBkkB,EAAWiI,MAEV,CACD,IAAI1f,EAAY2W,EAAOwF,iBAAiBlH,GAMhCwC,EALS,MAAbzX,EACkC,cAA9Buf,EAAgB5sB,WAChBqN,EAAUH,SAAS0f,EAAgBrsB,UAAUK,UAGlCyM,EAGAA,EAAUG,YAAYof,EAAiBG,GAK3CrX,GAAa9I,WAGhC,GAAK+b,EAASnnB,OAAOsjB,GAKjBiG,EAAeJ,MALa,CAC5B,IAAIyC,EAAej4B,KAAKq1B,QAAQhd,YAAYye,EAAarF,UAAWtE,EAAUwC,EAAU8H,EAAiB5I,EAAQiH,GACjHF,EAAeJ,EAAa3D,gBAAgBoG,EAAcnB,EAAazF,qBAAsBrxB,KAAKq1B,QAAQzB,kBAOtH,OAAOgC,GAQXR,EAAc8C,eAAiB,SAAUhD,EAAW/H,GAChD,OAAO+H,EAAU/C,gBAAgBX,mBAAmBrE,IAYxDiI,EAAcl1B,UAAUi2B,gBAAkB,SAAUjB,EAAW9rB,EAAM+uB,EAAiBzC,EAAauB,EAAanB,GAC5G,IAAI/V,EAAQ/f,KAORo4B,EAAelD,EAanB,OAZAiD,EAAgB1H,SAAQ,SAAU/kB,EAAcwM,GAC5C,IAAImgB,EAAYjvB,EAAKkC,MAAMI,GACvB0pB,EAAc8C,eAAehD,EAAWmD,EAAU3tB,cAClD0tB,EAAerY,EAAMiW,oBAAoBoC,EAAcC,EAAWngB,EAAWwd,EAAauB,EAAanB,OAG/GqC,EAAgB1H,SAAQ,SAAU/kB,EAAcwM,GAC5C,IAAImgB,EAAYjvB,EAAKkC,MAAMI,GACtB0pB,EAAc8C,eAAehD,EAAWmD,EAAU3tB,cACnD0tB,EAAerY,EAAMiW,oBAAoBoC,EAAcC,EAAWngB,EAAWwd,EAAauB,EAAanB,OAGxGsC,GAQXhD,EAAcl1B,UAAUo4B,YAAc,SAAU/iB,EAAM2gB,GAIlD,OAHAA,EAAMzF,SAAQ,SAAU/kB,EAAcwM,GAClC3C,EAAOA,EAAK8C,YAAY3M,EAAcwM,MAEnC3C,GAaX6f,EAAcl1B,UAAUk2B,kBAAoB,SAAUlB,EAAW9rB,EAAM+uB,EAAiBzC,EAAauB,EAAapB,EAAkBC,GAChI,IAAI/V,EAAQ/f,KAGZ,GAAIk1B,EACC7C,iBACAZ,UACAhmB,YACAypB,EAAU7C,iBAAiBhB,qBAC5B,OAAO6D,EAQX,IACIqD,EADAH,EAAelD,EAGfqD,EADAnvB,EAAKqC,UACW0sB,EAGAjJ,GAAcF,MAAMY,QAAQxmB,EAAM+uB,GAEtD,IAAIvD,EAAaM,EAAU7C,iBAAiBZ,UAuB5C,OAtBA8G,EAAcxL,SAAS9R,kBAAiB,SAAUkS,EAAU3O,GACxD,GAAIoW,EAAW5c,SAASmV,GAAW,CAC/B,IAAIqL,EAActD,EACb7C,iBACAZ,UACA5Z,kBAAkBsV,GACnBwC,EAAW5P,EAAMuY,YAAYE,EAAaha,GAC9C4Z,EAAerY,EAAMkW,sBAAsBmC,EAAc,IAAInuB,EAAKkjB,GAAWwC,EAAU+F,EAAauB,EAAapB,EAAkBC,OAG3IyC,EAAcxL,SAAS9R,kBAAiB,SAAUkS,EAAUsL,GACxD,IAAIC,GAAsBxD,EAAU7C,iBAAiBb,mBAAmBrE,IAC5C,MAAxBsL,EAAej5B,MACnB,IAAKo1B,EAAW5c,SAASmV,KAAcuL,EAAoB,CACvD,IAAIF,EAActD,EACb7C,iBACAZ,UACA5Z,kBAAkBsV,GACnBwC,EAAW5P,EAAMuY,YAAYE,EAAaC,GAC9CL,EAAerY,EAAMkW,sBAAsBmC,EAAc,IAAInuB,EAAKkjB,GAAWwC,EAAU+F,EAAauB,EAAapB,EAAkBC,OAGpIsC,GAYXhD,EAAcl1B,UAAUq2B,cAAgB,SAAUrB,EAAWyD,EAASjK,EAAcgH,EAAaC,EAAeG,GAC5G,GAA2C,MAAvCJ,EAAYqB,eAAe4B,GAC3B,OAAOzD,EAGX,IAAIW,EAAmBX,EAAU7C,iBAAiBf,aAG9C2F,EAAc/B,EAAU7C,iBAC5B,GAA0B,MAAtB3D,EAAalvB,MAAe,CAE5B,GAAKm5B,EAAQltB,WAAawrB,EAAY5F,sBAClC4F,EAAY1F,kBAAkBoH,GAC9B,OAAO34B,KAAKi2B,sBAAsBf,EAAWyD,EAAS1B,EAAYxF,UAAU1Z,SAAS4gB,GAAUjD,EAAaC,EAAeE,EAAkBC,GAE5I,GAAI6C,EAAQltB,UAAW,CAGxB,IAAImtB,EAAoB1J,GAAcF,MAItC,OAHAiI,EAAYxF,UAAUjZ,aAAa5B,IAAW,SAAU9V,EAAMyU,GAC1DqjB,EAAoBA,EAAkBz4B,IAAI,IAAI8J,EAAKnJ,GAAOyU,MAEvDvV,KAAKo2B,kBAAkBlB,EAAWyD,EAASC,EAAmBlD,EAAaC,EAAeE,EAAkBC,GAGnH,OAAOZ,EAKX,IAAI2D,EAAoB3J,GAAcF,MAOtC,OANAN,EAAa+B,SAAQ,SAAUqI,EAAWt5B,GACtC,IAAIu5B,EAAkBJ,EAAQrtB,MAAMwtB,GAChC7B,EAAY1F,kBAAkBwH,KAC9BF,EAAoBA,EAAkB14B,IAAI24B,EAAW7B,EAAYxF,UAAU1Z,SAASghB,QAGrF/4B,KAAKo2B,kBAAkBlB,EAAWyD,EAASE,EAAmBnD,EAAaC,EAAeE,EAAkBC,IAW3HV,EAAcl1B,UAAUs2B,gBAAkB,SAAUtB,EAAW9rB,EAAMssB,EAAaI,GAC9E,IAAIkD,EAAgB9D,EAAU7C,iBAC1BuD,EAAeV,EAAUjD,iBAAiB+G,EAAcvH,UAAWuH,EAAc3H,sBAAwBjoB,EAAKqC,UAAWutB,EAAc1H,cAC3I,OAAOtxB,KAAK42B,oCAAoChB,EAAcxsB,EAAMssB,EAAanB,GAA0BuB,IAW/GV,EAAcl1B,UAAUo2B,iBAAmB,SAAUpB,EAAW9rB,EAAMssB,EAAauD,EAAqBnD,GACpG,IAAI/D,EACJ,GAAwC,MAApC2D,EAAYqB,eAAe3tB,GAC3B,OAAO8rB,EAGP,IAAIrG,EAAS,IAAI2F,GAA6BkB,EAAaR,EAAW+D,GAClEC,EAAgBhE,EAAU/C,gBAAgBV,UAC1CuF,OAAgB,EACpB,GAAI5tB,EAAKqC,WAAiC,cAApBrC,EAAKsB,WAA4B,CACnD,IAAIoL,OAAU,EACd,GAAIof,EAAU7C,iBAAiBhB,qBAC3Bvb,EAAU4f,EAAYnK,uBAAuB2J,EAAU5C,6BAEtD,CACD,IAAI6G,EAAiBjE,EAAU7C,iBAAiBZ,UAChD9xB,EAAK8D,OAAO01B,aAA0B5Y,GAAc,iDACpDzK,EAAU4f,EAAY0B,0BAA0B+B,GAEpDrjB,EAAUA,EACVkhB,EAAgBh3B,KAAKq1B,QAAQ3B,eAAewF,EAAepjB,EAASggB,OAEnE,CACD,IAAI3I,EAAW/jB,EAAKsB,WAChBilB,EAAW+F,EAAYb,kBAAkB1H,EAAU+H,EAAU7C,kBACjD,MAAZ1C,GACAuF,EAAU7C,iBAAiBb,mBAAmBrE,KAC9CwC,EAAWuJ,EAAcrhB,kBAAkBsV,IAG3C6J,EADY,MAAZrH,EACgB3vB,KAAKq1B,QAAQhd,YAAY6gB,EAAe/L,EAAUwC,EAAUvmB,EAAKwB,WAAYikB,EAAQiH,GAEhGZ,EACJ/C,gBACAV,UACAzZ,SAASmV,GAEMntB,KAAKq1B,QAAQhd,YAAY6gB,EAAe/L,EAAU5M,GAAa9I,WAAYrO,EAAKwB,WAAYikB,EAAQiH,GAGpGoD,EAEhBlC,EAAcvrB,WACdypB,EAAU7C,iBAAiBhB,uBAE3BU,EAAW2D,EAAYnK,uBAAuB2J,EAAU5C,yBACpDP,EAAS3a,eACT4f,EAAgBh3B,KAAKq1B,QAAQ3B,eAAesD,EAAejF,EAAU+D,KAOjF,OAHA/D,EACImD,EAAU7C,iBAAiBhB,sBACmB,MAA1CqE,EAAYqB,eAAe9sB,EAAK+kB,OACjCkG,EAAUrD,gBAAgBmF,EAAejF,EAAU/xB,KAAKq1B,QAAQzB,iBAGxEwB,EA/hBuB,GAyjB9BgE,GAAgC,WAKhC,SAASA,EAAeC,GACpBr5B,KAAKq5B,OAASA,EAKdr5B,KAAK+jB,OAAS/jB,KAAKq5B,OAAO3T,iBAAiBC,WAuF/C,OAvEAyT,EAAel5B,UAAUo5B,yBAA2B,SAAUnE,EAASoE,EAAYC,GAC/E,IAAIzZ,EAAQ/f,KACRy5B,EAAS,GACTC,EAAQ,GAYZ,OAXAvE,EAAQ9Q,SAAQ,SAAUoB,GAClBA,EAAO3W,OAASyjB,GAAOW,eACvBnT,EAAMgE,OAAOnO,oBAAoB6P,EAAO+M,QAAS/M,EAAOG,eACxD8T,EAAMhzB,KAAK6rB,GAAOY,iBAAiB1N,EAAO3N,UAAW2N,EAAOG,kBAGpE5lB,KAAK25B,uBAAuBF,EAAQlH,GAAOO,cAAeqC,EAASqE,EAAoBD,GACvFv5B,KAAK25B,uBAAuBF,EAAQlH,GAAOK,YAAauC,EAASqE,EAAoBD,GACrFv5B,KAAK25B,uBAAuBF,EAAQlH,GAAOa,YAAasG,EAAOF,EAAoBD,GACnFv5B,KAAK25B,uBAAuBF,EAAQlH,GAAOW,cAAeiC,EAASqE,EAAoBD,GACvFv5B,KAAK25B,uBAAuBF,EAAQlH,GAAOG,MAAOyC,EAASqE,EAAoBD,GACxEE,GAYXL,EAAel5B,UAAUy5B,uBAAyB,SAAUF,EAAQxmB,EAAWkiB,EAASyE,EAAeL,GACnG,IAAIxZ,EAAQ/f,KACR65B,EAAkB1E,EAAQ2E,QAAO,SAAUrU,GAAU,OAAOA,EAAO3W,OAASmE,KAChF4mB,EAAgBlzB,KAAK3G,KAAK+5B,gBAAgBj2B,KAAK9D,OAC/C65B,EAAgBxV,SAAQ,SAAUoB,GAC9B,IAAIuU,EAAqBja,EAAMka,yBAAyBxU,EAAQ8T,GAChEK,EAAcvV,SAAQ,SAAU6V,GACxBA,EAAa3U,WAAWE,EAAO3W,OAC/B2qB,EAAO/yB,KAAKwzB,EAAa1U,YAAYwU,EAAoBja,EAAMsZ,gBAW/ED,EAAel5B,UAAU+5B,yBAA2B,SAAUxU,EAAQ8T,GAClE,MAAoB,UAAhB9T,EAAO3W,MAAoC,kBAAhB2W,EAAO3W,OAIlC2W,EAAOb,SAAW2U,EAAWthB,wBAE7BwN,EAAO3N,UAAW2N,EAAOG,aAAc5lB,KAAK+jB,SALrC0B,GAef2T,EAAel5B,UAAU65B,gBAAkB,SAAUh0B,EAAGC,GACpD,GAAmB,MAAfD,EAAE+R,WAAoC,MAAf9R,EAAE8R,UACzB,MAAMnY,EAAK6W,eAAe,sCAE9B,IAAI2jB,EAAW,IAAI7kB,GAAUvP,EAAE+R,UAAW/R,EAAE6f,cACxCwU,EAAW,IAAI9kB,GAAUtP,EAAE8R,UAAW9R,EAAE4f,cAC5C,OAAO5lB,KAAK+jB,OAAOpO,QAAQwkB,EAAUC,IAElChB,EAlGwB,GA+H/BiB,GAAsB,WAMtB,SAASA,EAAKhB,EAAQiB,GAClBt6B,KAAKq5B,OAASA,EACdr5B,KAAKu6B,oBAAsB,GAC3B,IAAIxrB,EAAS/O,KAAKq5B,OAAO3T,iBACrB8U,EAAc,IAAInH,GAActkB,EAAO4W,YACvCmU,EAAS/qB,EAAO0rB,gBAKpBz6B,KAAK06B,WAAa,IAAItF,GAAc0E,GACpC,IAAIa,EAAqBL,EAAiBjI,iBACtCuI,EAAoBN,EAAiBnI,gBAErCD,EAAasI,EAAY9G,eAAenT,GAAa9I,WAAYkjB,EAAmBlJ,UAAW,MAC/FK,EAAYgI,EAAOpG,eAAenT,GAAa9I,WAAYmjB,EAAkBnJ,UAAW,MACxFoG,EAAiB,IAAI3G,GAAUgB,EAAYyI,EAAmBtJ,qBAAsBmJ,EAAY5G,gBAChGoD,EAAgB,IAAI9F,GAAUY,EAAW8I,EAAkBvJ,qBAAsByI,EAAOlG,gBAK5F5zB,KAAK00B,WAAa,IAAIhD,GAAUsF,EAAea,GAK/C73B,KAAK66B,gBAAkB,IAAIzB,GAAep5B,KAAKq5B,QAqInD,OAhIAgB,EAAKn6B,UAAU46B,SAAW,WACtB,OAAO96B,KAAKq5B,QAKhBgB,EAAKn6B,UAAUmyB,eAAiB,WAC5B,OAAOryB,KAAK00B,WAAWrC,iBAAiBZ,WAM5C4I,EAAKn6B,UAAU66B,uBAAyB,SAAU3xB,GAC9C,IAAI4xB,EAAQh7B,KAAK00B,WAAWpC,wBAC5B,OAAI0I,IAGIh7B,KAAKq5B,OAAO3T,iBAAiBuV,iBAC3B7xB,EAAKqC,YAAcuvB,EAAMnjB,kBAAkBzO,EAAKsB,YAAYe,WACvDuvB,EAAMjjB,SAAS3O,GAGvB,MAKXixB,EAAKn6B,UAAUuL,QAAU,WACrB,OAA2C,IAApCzL,KAAKu6B,oBAAoB13B,QAKpCw3B,EAAKn6B,UAAUg7B,qBAAuB,SAAUvW,GAC5C3kB,KAAKu6B,oBAAoB7zB,KAAKie,IAOlC0V,EAAKn6B,UAAUi7B,wBAA0B,SAAUxW,EAAmByW,GAClE,IAAIC,EAAe,GACnB,GAAID,EAAa,CACbz7B,EAAK8D,OAA4B,MAArBkhB,EAA2B,mDACvC,IAAI2W,EAASt7B,KAAKq5B,OAAOjwB,KACzBpJ,KAAKu6B,oBAAoBlW,SAAQ,SAAU6V,GACvCkB,EAAoCA,EACpC,IAAIG,EAAarB,EAAajU,kBAAkBmV,EAAaE,GACzDC,GACAF,EAAa30B,KAAK60B,MAI9B,GAAI5W,EAAmB,CAEnB,IADA,IAAI6W,EAAY,GACPz4B,EAAI,EAAGA,EAAI/C,KAAKu6B,oBAAoB13B,SAAUE,EAAG,CACtD,IAAIopB,EAAWnsB,KAAKu6B,oBAAoBx3B,GACxC,GAAKopB,EAASjG,QAAQvB,IAGjB,GAAIA,EAAkBwB,iBAAkB,CAEzCqV,EAAYA,EAAUC,OAAOz7B,KAAKu6B,oBAAoBrvB,MAAMnI,EAAI,IAChE,YALAy4B,EAAU90B,KAAKylB,GAQvBnsB,KAAKu6B,oBAAsBiB,OAG3Bx7B,KAAKu6B,oBAAsB,GAE/B,OAAOc,GAUXhB,EAAKn6B,UAAUq1B,eAAiB,SAAUE,EAAWC,EAAauD,GAC1DxD,EAAU3mB,OAAS+d,GAAcoE,OACJ,OAA7BwE,EAAU5G,OAAOT,UACjBzuB,EAAK8D,OAAOzD,KAAK00B,WAAWpC,wBAAyB,6DACrD3yB,EAAK8D,OAAOzD,KAAK00B,WAAWtC,uBAAwB,4DAExD,IAAIoD,EAAex1B,KAAK00B,WACpBla,EAASxa,KAAK06B,WAAWnF,eAAeC,EAAcC,EAAWC,EAAauD,GAKlF,OAJAj5B,KAAK06B,WAAWpF,cAAc9a,EAAO0a,WACrCv1B,EAAK8D,OAAO+W,EAAO0a,UAAU7C,iBAAiBhB,uBACzCmE,EAAanD,iBAAiBhB,qBAAsB,2DACzDrxB,KAAK00B,WAAala,EAAO0a,UAClBl1B,KAAK07B,0BAA0BlhB,EAAO2a,QAAS3a,EAAO0a,UAAU/C,gBAAgBV,UAAW,OAMtG4I,EAAKn6B,UAAUy7B,iBAAmB,SAAUzB,GACxC,IAAIpI,EAAY9xB,KAAK00B,WAAWvC,gBAC5ByJ,EAAiB,GACrB,IAAK9J,EAAUL,UAAUra,aAAc,CACnC,IAAIykB,EAAY/J,EAAUL,UAC1BoK,EAAUrjB,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAClD0jB,EAAel1B,KAAK6rB,GAAOI,iBAAiBvyB,EAAK8X,OAMzD,OAHI4Z,EAAUT,sBACVuK,EAAel1B,KAAK6rB,GAAOE,YAAYX,EAAUL,YAE9CzxB,KAAK07B,0BAA0BE,EAAgB9J,EAAUL,UAAWyI,IAS/EG,EAAKn6B,UAAUw7B,0BAA4B,SAAUvG,EAASoE,EAAY5U,GACtE,IAAIiV,EAAgBjV,EACd,CAACA,GACD3kB,KAAKu6B,oBACX,OAAOv6B,KAAK66B,gBAAgBvB,yBAAyBnE,EAASoE,EAAYK,IAEvES,EAtKc,GAoMrByB,GAA2B,WAC3B,SAASA,IAOL97B,KAAK+7B,MAAQ,IAAI/O,IAsOrB,OApOA3tB,OAAOC,eAAew8B,EAAW,yBAA0B,CACvDr7B,IAAK,WAED,OADAd,EAAK8D,OAAOuqB,GAA0B,oCAC/BA,IAEX7tB,IAAK,SAAUmW,GACX3W,EAAK8D,QAAQuqB,GAA0B,mDACvCA,GAA2B1X,GAE/B9L,YAAY,EACZC,cAAc,IAElBqxB,EAAU57B,UAAUuL,QAAU,WAC1B,OAA2B,IAApBzL,KAAK+7B,MAAM7O,MAEtB4O,EAAU57B,UAAUq1B,eAAiB,SAAUE,EAAWC,EAAasG,GACnE,IAAItsB,EAAKC,EACLye,EAAUqH,EAAU5G,OAAOT,QAC/B,GAAgB,OAAZA,EAAkB,CAClB,IAAI6N,EAAOj8B,KAAK+7B,MAAMt7B,IAAI2tB,GAE1B,OADAzuB,EAAK8D,OAAe,MAARw4B,EAAc,gDACnBA,EAAK1G,eAAeE,EAAWC,EAAasG,GAGnD,IAAIvC,EAAS,GACb,IACI,IAAK,IAAI3pB,EAAKpQ,EAAMqQ,SAAS/P,KAAK+7B,MAAMtQ,UAAWzb,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CACrFgsB,EAAOjsB,EAAGxQ,MACdi6B,EAASA,EAAOgC,OAAOQ,EAAK1G,eAAeE,EAAWC,EAAasG,KAG3E,MAAO3rB,GAASX,EAAM,CAAExL,MAAOmM,GAC/B,QACI,IACQL,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIJ,EAAK,MAAMA,EAAIxL,OAEjC,OAAOu1B,GAafqC,EAAU57B,UAAUg7B,qBAAuB,SAAUhyB,EAAOyb,EAAmB+Q,EAAauB,EAAaiF,GACrG,IAAI9N,EAAUllB,EAAM2hB,kBAChBoR,EAAOj8B,KAAK+7B,MAAMt7B,IAAI2tB,GAC1B,IAAK6N,EAAM,CAEP,IAAI1C,EAAa7D,EAAYnK,uBAAuB2Q,EAAsBjF,EAAc,MACpFkF,GAAqB,EACrB5C,EACA4C,GAAqB,EAEhBlF,aAAuB1W,IAC5BgZ,EAAa7D,EAAY0B,0BAA0BH,GACnDkF,GAAqB,IAGrB5C,EAAahZ,GAAa9I,WAC1B0kB,GAAqB,GAEzB,IAAIjH,EAAY,IAAIxD,GAAU,IAAIR,GACbqI,EAAY4C,GAAoB,GAAQ,IAAIjL,GAC5C+F,EAAaiF,GAAqB,IACvDD,EAAO,IAAI5B,GAAKnxB,EAAOgsB,GACvBl1B,KAAK+7B,MAAM57B,IAAIiuB,EAAS6N,GAI5B,OADAA,EAAKf,qBAAqBvW,GACnBsX,EAAKN,iBAAiBhX,IAajCmX,EAAU57B,UAAUi7B,wBAA0B,SAAUjyB,EAAOyb,EAAmByW,GAC9E,IAAIgB,EAAKzsB,EACLye,EAAUllB,EAAM2hB,kBAChBwR,EAAU,GACVhB,EAAe,GACfiB,EAAkBt8B,KAAKu8B,kBAC3B,GAAgB,YAAZnO,EACA,IAEI,IAAK,IAAIte,EAAKpQ,EAAMqQ,SAAS/P,KAAK+7B,MAAMS,WAAYxsB,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CAC1F,IAAIwsB,EAAK/8B,EAAMg9B,OAAO1sB,EAAGxQ,MAAO,GAAIm9B,EAAcF,EAAG,GAAIR,EAAOQ,EAAG,GACnEpB,EAAeA,EAAaI,OAAOQ,EAAKd,wBAAwBxW,EAAmByW,IAC/Ea,EAAKxwB,YACLzL,KAAK+7B,MAAMpO,OAAOgP,GAEbV,EACAnB,WACApV,iBACAuV,gBACDoB,EAAQ31B,KAAKu1B,EAAKnB,cAKlC,MAAO8B,GAASR,EAAM,CAAEl4B,MAAO04B,GAC/B,QACI,IACQ5sB,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIssB,EAAK,MAAMA,EAAIl4B,WAGhC,CAEG+3B,EAAOj8B,KAAK+7B,MAAMt7B,IAAI2tB,GACtB6N,IACAZ,EAAeA,EAAaI,OAAOQ,EAAKd,wBAAwBxW,EAAmByW,IAC/Ea,EAAKxwB,YACLzL,KAAK+7B,MAAMpO,OAAOS,GAEb6N,EACAnB,WACApV,iBACAuV,gBACDoB,EAAQ31B,KAAKu1B,EAAKnB,cASlC,OAJIwB,IAAoBt8B,KAAKu8B,mBAEzBF,EAAQ31B,KAAK,IAAIo1B,EAAU5Y,uBAAuBha,EAAM+d,KAAM/d,EAAME,OAEjE,CAAEizB,QAASA,EAAS5C,OAAQ4B,IAEvCS,EAAU57B,UAAU28B,cAAgB,WAChC,IAAIC,EAAKntB,EACL6K,EAAS,GACb,IACI,IAAK,IAAI1K,EAAKpQ,EAAMqQ,SAAS/P,KAAK+7B,MAAMtQ,UAAWzb,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CACzF,IAAIgsB,EAAOjsB,EAAGxQ,MACTy8B,EACAnB,WACApV,iBACAuV,gBACDzgB,EAAO9T,KAAKu1B,IAIxB,MAAOc,GAASD,EAAM,CAAE54B,MAAO64B,GAC/B,QACI,IACQ/sB,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIgtB,EAAK,MAAMA,EAAI54B,OAEjC,OAAOsW,GAMXshB,EAAU57B,UAAU66B,uBAAyB,SAAU3xB,GACnD,IAAI4zB,EAAKrtB,EACLsnB,EAAc,KAClB,IACI,IAAK,IAAInnB,EAAKpQ,EAAMqQ,SAAS/P,KAAK+7B,MAAMtQ,UAAWzb,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CACzF,IAAIgsB,EAAOjsB,EAAGxQ,MACdy3B,EAAcA,GAAegF,EAAKlB,uBAAuB3xB,IAGjE,MAAO6zB,GAASD,EAAM,CAAE94B,MAAO+4B,GAC/B,QACI,IACQjtB,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIktB,EAAK,MAAMA,EAAI94B,OAEjC,OAAO+yB,GAEX6E,EAAU57B,UAAUg9B,aAAe,SAAUh0B,GACzC,IAAI6F,EAAS7F,EAAMwc,iBACnB,GAAI3W,EAAOksB,eACP,OAAOj7B,KAAKm9B,kBAGZ,IAAI/O,EAAUllB,EAAM2hB,kBACpB,OAAO7qB,KAAK+7B,MAAMt7B,IAAI2tB,IAG9B0N,EAAU57B,UAAUk9B,mBAAqB,SAAUl0B,GAC/C,OAAmC,MAA5BlJ,KAAKk9B,aAAah0B,IAE7B4yB,EAAU57B,UAAUq8B,gBAAkB,WAClC,OAAiC,MAA1Bv8B,KAAKm9B,mBAEhBrB,EAAU57B,UAAUi9B,gBAAkB,WAClC,IAAIE,EAAK1tB,EACT,IACI,IAAK,IAAIG,EAAKpQ,EAAMqQ,SAAS/P,KAAK+7B,MAAMtQ,UAAWzb,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CACzF,IAAIgsB,EAAOjsB,EAAGxQ,MACd,GAAIy8B,EACCnB,WACApV,iBACAuV,eACD,OAAOgB,GAInB,MAAOqB,GAASD,EAAM,CAAEn5B,MAAOo5B,GAC/B,QACI,IACQttB,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIutB,EAAK,MAAMA,EAAIn5B,OAEjC,OAAO,MAEJ43B,EA9OmB,GAuQ1ByB,GAA+B,WAC/B,SAASA,EAAcC,GACnBx9B,KAAKw9B,WAAaA,EAiItB,OA/HAD,EAAcr9B,UAAUu9B,SAAW,SAAUr0B,EAAMmM,GAC/C,GAAInM,EAAKqC,UACL,OAAO,IAAI8xB,EAAc,IAAIrO,GAAc3Z,IAG3C,IAAImoB,EAAW19B,KAAKw9B,WAAW/N,yBAAyBrmB,GACxD,GAAgB,MAAZs0B,EAAkB,CAClB,IAAIC,EAAeD,EAASt0B,KACxB5J,EAAQk+B,EAASl+B,MACjBkM,EAAezB,EAAKyB,aAAaiyB,EAAcv0B,GAEnD,OADA5J,EAAQA,EAAM6Y,YAAY3M,EAAc6J,GACjC,IAAIgoB,EAAcv9B,KAAKw9B,WAAWr9B,IAAIw9B,EAAcn+B,IAG3D,IAAIuvB,EAAU,IAAIG,GAAc3Z,GAC5BqoB,EAAe59B,KAAKw9B,WAAW5N,QAAQxmB,EAAM2lB,GACjD,OAAO,IAAIwO,EAAcK,IAIrCL,EAAcr9B,UAAU29B,UAAY,SAAUz0B,EAAM00B,GAChD,IAAIC,EAAW/9B,KAIf,OAHAkH,EAAK42B,GAAS,SAAU3Q,EAAU5X,GAC9BwoB,EAAWA,EAASN,SAASr0B,EAAKkC,MAAM6hB,GAAW5X,MAEhDwoB,GASXR,EAAcr9B,UAAU89B,YAAc,SAAU50B,GAC5C,GAAIA,EAAKqC,UACL,OAAO8xB,EAAcvO,MAGrB,IAAI4O,EAAe59B,KAAKw9B,WAAW5N,QAAQxmB,EAAM8lB,GAAcF,OAC/D,OAAO,IAAIuO,EAAcK,IAUjCL,EAAcr9B,UAAU+9B,iBAAmB,SAAU70B,GACjD,OAAqC,MAA9BpJ,KAAKk+B,gBAAgB90B,IAShCm0B,EAAcr9B,UAAUg+B,gBAAkB,SAAU90B,GAChD,IAAIs0B,EAAW19B,KAAKw9B,WAAW/N,yBAAyBrmB,GACxD,OAAgB,MAAZs0B,EACO19B,KAAKw9B,WACP/8B,IAAIi9B,EAASt0B,MACb2O,SAAS9N,EAAKyB,aAAagyB,EAASt0B,KAAMA,IAGxC,MAQfm0B,EAAcr9B,UAAUi+B,oBAAsB,WAC1C,IAAIpR,EAAW,GACXxX,EAAOvV,KAAKw9B,WAAWh+B,MAgB3B,OAfY,MAAR+V,EAEKA,EAAK6B,cACN7B,EAAKiD,aAAawB,IAAgB,SAAUlC,EAAWI,GACnD6U,EAASrmB,KAAK,IAAI4O,GAAUwC,EAAWI,OAK/ClY,KAAKw9B,WAAWzQ,SAAS9R,kBAAiB,SAAUnD,EAAW0G,GACpC,MAAnBA,EAAUhf,OACVutB,EAASrmB,KAAK,IAAI4O,GAAUwC,EAAW0G,EAAUhf,WAItDutB,GAEXwQ,EAAcr9B,UAAUk+B,mBAAqB,SAAUh1B,GACnD,GAAIA,EAAKqC,UACL,OAAOzL,KAGP,IAAIq+B,EAAgBr+B,KAAKk+B,gBAAgB90B,GACzC,OACW,IAAIm0B,EADM,MAAjBc,EACyB,IAAInP,GAAcmP,GAGlBr+B,KAAKw9B,WAAWzO,QAAQ3lB,KAQ7Dm0B,EAAcr9B,UAAUuL,QAAU,WAC9B,OAAOzL,KAAKw9B,WAAW/xB,WAQ3B8xB,EAAcr9B,UAAUiD,MAAQ,SAAUoS,GACtC,OAAO+oB,GAAkBr0B,EAAK+kB,MAAOhvB,KAAKw9B,WAAYjoB,IAE1DgoB,EAAcvO,MAAQ,IAAIuO,EAAc,IAAIrO,GAAc,OACnDqO,EAnIuB;;;;;;;;;;;;;;;;GAqIlC,SAASe,GAAkB5yB,EAAc6yB,EAAWhpB,GAChD,GAAuB,MAAnBgpB,EAAU/+B,MAEV,OAAO+V,EAAK8C,YAAY3M,EAAc6yB,EAAU/+B,OAGhD,IAAIg/B,EAAkB,KAgBtB,OAfAD,EAAUxR,SAAS9R,kBAAiB,SAAUkS,EAAU3O,GACnC,cAAb2O,GAGAxtB,EAAK8D,OAA2B,OAApB+a,EAAUhf,MAAgB,6CACtCg/B,EAAkBhgB,EAAUhf,OAG5B+V,EAAO+oB,GAAkB5yB,EAAaJ,MAAM6hB,GAAW3O,EAAWjJ,MAIrEA,EAAKwC,SAASrM,GAAcD,WAAiC,OAApB+yB,IAC1CjpB,EAAOA,EAAK8C,YAAY3M,EAAaJ,MAAM,aAAckzB,IAEtDjpB;;;;;;;;;;;;;;;;GA2Bf,IAAIkpB,GAA2B,WAC3B,SAASA,IAQLz+B,KAAK0+B,eAAiBnB,GAAcvO,MASpChvB,KAAK2+B,WAAa,GAClB3+B,KAAK4+B,cAAgB,EAwbzB,OAhbAH,EAAUv+B,UAAU2+B,YAAc,SAAUz1B,GACxC,OAAO,IAAI01B,GAAa11B,EAAMpJ,OAUlCy+B,EAAUv+B,UAAU6+B,aAAe,SAAU31B,EAAMqa,EAAMub,EAASC,GAC9Dt/B,EAAK8D,OAAOu7B,EAAUh/B,KAAK4+B,aAAc,qDACzBxsB,IAAZ6sB,IACAA,GAAU,GAEdj/B,KAAK2+B,WAAWj4B,KAAK,CACjB0C,KAAMA,EACNqa,KAAMA,EACNub,QAASA,EACTC,QAASA,IAETA,IACAj/B,KAAK0+B,eAAiB1+B,KAAK0+B,eAAejB,SAASr0B,EAAMqa,IAE7DzjB,KAAK4+B,aAAeI,GASxBP,EAAUv+B,UAAUg/B,SAAW,SAAU91B,EAAM+uB,EAAiB6G,GAC5Dr/B,EAAK8D,OAAOu7B,EAAUh/B,KAAK4+B,aAAc,gDACzC5+B,KAAK2+B,WAAWj4B,KAAK,CACjB0C,KAAMA,EACN2jB,SAAUoL,EACV6G,QAASA,EACTC,SAAS,IAEbj/B,KAAK0+B,eAAiB1+B,KAAK0+B,eAAeb,UAAUz0B,EAAM+uB,GAC1Dn4B,KAAK4+B,aAAeI,GAMxBP,EAAUv+B,UAAUi/B,SAAW,SAAUH,GACrC,IAAK,IAAIj8B,EAAI,EAAGA,EAAI/C,KAAK2+B,WAAW97B,OAAQE,IAAK,CAC7C,IAAIq8B,EAASp/B,KAAK2+B,WAAW57B,GAC7B,GAAIq8B,EAAOJ,UAAYA,EACnB,OAAOI,EAGf,OAAO,MAUXX,EAAUv+B,UAAU89B,YAAc,SAAUgB,GAKxC,IAAIjf,EAAQ/f,KACRmhB,EAAMnhB,KAAK2+B,WAAWU,WAAU,SAAU/3B,GAC1C,OAAOA,EAAE03B,UAAYA,KAEzBr/B,EAAK8D,OAAO0d,GAAO,EAAG,gDACtB,IAAIme,EAAgBt/B,KAAK2+B,WAAWxd,GACpCnhB,KAAK2+B,WAAWY,OAAOpe,EAAK,GAC5B,IAAIqe,EAAyBF,EAAcL,QACvCQ,GAAsC,EACtC18B,EAAI/C,KAAK2+B,WAAW97B,OAAS,EACjC,MAAO28B,GAA0Bz8B,GAAK,EAAG,CACrC,IAAI28B,EAAe1/B,KAAK2+B,WAAW57B,GAC/B28B,EAAaT,UACTl8B,GAAKoe,GACLnhB,KAAK2/B,oBAAoBD,EAAcJ,EAAcl2B,MAErDo2B,GAAyB,EAEpBF,EAAcl2B,KAAKjI,SAASu+B,EAAat2B,QAE9Cq2B,GAAsC,IAG9C18B,IAEJ,GAAKy8B,EAGA,IAAIC,EAGL,OADAz/B,KAAK4/B,cACE,EAIP,GAAIN,EAAc7b,KACdzjB,KAAK0+B,eAAiB1+B,KAAK0+B,eAAeV,YAAYsB,EAAcl2B,UAEnE,CACD,IAAI2jB,EAAWuS,EAAcvS,SAC7B7lB,EAAK6lB,GAAU,SAAUjV,GACrBiI,EAAM2e,eAAiB3e,EAAM2e,eAAeV,YAAYsB,EAAcl2B,KAAKkC,MAAMwM,OAGzF,OAAO,EAlBP,OAAO,GA4Bf2mB,EAAUv+B,UAAU2/B,qBAAuB,SAAUz2B,GACjD,OAAOpJ,KAAK0+B,eAAeR,gBAAgB90B,IAY/Cq1B,EAAUv+B,UAAUqrB,uBAAyB,SAAUuU,EAAU7G,EAAqB8G,EAAmBC,GACrG,GAAKD,GAAsBC,EAqBtB,CACD,IAAI9J,EAAQl2B,KAAK0+B,eAAeN,mBAAmB0B,GACnD,IAAKE,GAAuB9J,EAAMzqB,UAC9B,OAAOwtB,EAIP,GAAK+G,GACsB,MAAvB/G,GACC/C,EAAM+H,iBAAiBh0B,EAAK+kB,OAG5B,CACD,IAAI8K,EAAS,SAAUmG,GACnB,OAASA,EAAMhB,SAAWe,MACpBD,KACIA,EAAkBt7B,QAAQw7B,EAAMjB,YACrCiB,EAAM72B,KAAKjI,SAAS2+B,IAAaA,EAAS3+B,SAAS8+B,EAAM72B,QAE9D82B,EAAczB,EAAU0B,WAAWngC,KAAK2+B,WAAY7E,EAAQgG,GAC5DM,EAAenH,GAAuB1Y,GAAa9I,WACvD,OAAOyoB,EAAY/8B,MAAMi9B,GAXzB,OAAO,KA9Bf,IAAI/B,EAAgBr+B,KAAK0+B,eAAeR,gBAAgB4B,GACxD,GAAqB,MAAjBzB,EACA,OAAOA,EAGP,IAAIgC,EAAWrgC,KAAK0+B,eAAeN,mBAAmB0B,GACtD,GAAIO,EAAS50B,UACT,OAAOwtB,EAEN,GAA2B,MAAvBA,GACJoH,EAASpC,iBAAiBh0B,EAAK+kB,OAI/B,CACD,IAAIoR,EAAenH,GAAuB1Y,GAAa9I,WACvD,OAAO4oB,EAASl9B,MAAMi9B,GAJtB,OAAO,MA0CvB3B,EAAUv+B,UAAUk3B,0BAA4B,SAAU0I,EAAUQ,GAChE,IAAIpJ,EAAmB3W,GAAa9I,WAChC8oB,EAAcvgC,KAAK0+B,eAAeR,gBAAgB4B,GACtD,GAAIS,EAOA,OANKA,EAAYnpB,cAEbmpB,EAAY/nB,aAAawB,IAAgB,SAAUlC,EAAWsX,GAC1D8H,EAAmBA,EAAiB/e,qBAAqBL,EAAWsX,MAGrE8H,EAEN,GAAIoJ,EAAwB,CAG7B,IAAIE,EAAUxgC,KAAK0+B,eAAeN,mBAAmB0B,GAWrD,OAVAQ,EAAuB9nB,aAAawB,IAAgB,SAAUlC,EAAWI,GACrE,IAAI3C,EAAOirB,EACNpC,mBAAmB,IAAIn0B,EAAK6N,IAC5B3U,MAAM+U,GACXgf,EAAmBA,EAAiB/e,qBAAqBL,EAAWvC,MAGxEirB,EAAQrC,sBAAsB9Z,SAAQ,SAAUpG,GAC5CiZ,EAAmBA,EAAiB/e,qBAAqB8F,EAAUnd,KAAMmd,EAAU1I,SAEhF2hB,EAKP,IAAIhB,EAAQl2B,KAAK0+B,eAAeN,mBAAmB0B,GAInD,OAHA5J,EAAMiI,sBAAsB9Z,SAAQ,SAAUpG,GAC1CiZ,EAAmBA,EAAiB/e,qBAAqB8F,EAAUnd,KAAMmd,EAAU1I,SAEhF2hB,GAuBfuH,EAAUv+B,UAAUs3B,mCAAqC,SAAUsI,EAAU3b,EAAWsc,EAAmBC,GACvG/gC,EAAK8D,OAAOg9B,GAAqBC,EAAoB,6DACrD,IAAIt3B,EAAO02B,EAASx0B,MAAM6Y,GAC1B,GAAInkB,KAAK0+B,eAAeT,iBAAiB70B,GAGrC,OAAO,KAIP,IAAIu3B,EAAa3gC,KAAK0+B,eAAeN,mBAAmBh1B,GACxD,OAAIu3B,EAAWl1B,UAEJi1B,EAAmB3oB,SAASoM,GAS5Bwc,EAAWx9B,MAAMu9B,EAAmB3oB,SAASoM,KAahEsa,EAAUv+B,UAAU20B,kBAAoB,SAAUiL,EAAU3S,EAAUuT,GAClE,IAAIt3B,EAAO02B,EAASx0B,MAAM6hB,GACtBkR,EAAgBr+B,KAAK0+B,eAAeR,gBAAgB90B,GACxD,GAAqB,MAAjBi1B,EACA,OAAOA,EAGP,GAAIqC,EAAmBlP,mBAAmBrE,GAAW,CACjD,IAAIwT,EAAa3gC,KAAK0+B,eAAeN,mBAAmBh1B,GACxD,OAAOu3B,EAAWx9B,MAAMu9B,EAAmBjP,UAAU5Z,kBAAkBsV,IAGvE,OAAO,MASnBsR,EAAUv+B,UAAU62B,eAAiB,SAAU3tB,GAC3C,OAAOpJ,KAAK0+B,eAAeR,gBAAgB90B,IAM/Cq1B,EAAUv+B,UAAU80B,iBAAmB,SAAU8K,EAAUhL,EAAoBnT,EAAW3G,EAAO7S,EAASsQ,GACtG,IAAImoB,EACA1K,EAAQl2B,KAAK0+B,eAAeN,mBAAmB0B,GAC/CzB,EAAgBnI,EAAMgI,gBAAgBj0B,EAAK+kB,OAC/C,GAAqB,MAAjBqP,EACAuC,EAAYvC,MAEX,IAA0B,MAAtBvJ,EAKL,MAAO,GAJP8L,EAAY1K,EAAM/yB,MAAM2xB,GAO5B,GADA8L,EAAYA,EAAUrnB,UAAUd,GAC3BmoB,EAAUn1B,WAAcm1B,EAAUxpB,aAgBnC,MAAO,GAfP,IAAI2d,EAAQ,GACR3oB,EAAMqM,EAAM/C,aACZ+J,EAAOtX,EACLy4B,EAAU7jB,uBAAuB4E,EAAWlJ,GAC5CmoB,EAAU9jB,gBAAgB6E,EAAWlJ,GACvCxI,EAAOwP,EAAKlF,UAChB,MAAOtK,GAAQ8kB,EAAMlyB,OAASmY,EACG,IAAzB5O,EAAI6D,EAAM0R,IACVoT,EAAMruB,KAAKuJ,GAEfA,EAAOwP,EAAKlF,UAEhB,OAAOwa,GAMf0J,EAAUv+B,UAAUy/B,oBAAsB,SAAUkB,EAAaz3B,GAC7D,GAAIy3B,EAAYpd,KACZ,OAAOod,EAAYz3B,KAAKjI,SAASiI,GAGjC,IAAK,IAAI0O,KAAa+oB,EAAY9T,SAC9B,GAAI8T,EAAY9T,SAAS5lB,eAAe2Q,IACpC+oB,EAAYz3B,KAAKkC,MAAMwM,GAAW3W,SAASiI,GAC3C,OAAO,EAGf,OAAO,GAMfq1B,EAAUv+B,UAAU0/B,WAAa,WAC7B5/B,KAAK0+B,eAAiBD,EAAU0B,WAAWngC,KAAK2+B,WAAYF,EAAUqC,eAAgB72B,EAAK+kB,OACvFhvB,KAAK2+B,WAAW97B,OAAS,EACzB7C,KAAK4+B,aAAe5+B,KAAK2+B,WAAW3+B,KAAK2+B,WAAW97B,OAAS,GAAGm8B,QAGhEh/B,KAAK4+B,cAAgB,GAM7BH,EAAUqC,eAAiB,SAAUb,GACjC,OAAOA,EAAMhB,SAMjBR,EAAU0B,WAAa,SAAUY,EAAQjH,EAAQkH,GAE7C,IADA,IAAIC,EAAgB1D,GAAcvO,MACzBjsB,EAAI,EAAGA,EAAIg+B,EAAOl+B,SAAUE,EAAG,CACpC,IAAIk9B,EAAQc,EAAOh+B,GAInB,GAAI+2B,EAAOmG,GAAQ,CACf,IAAI5H,EAAY4H,EAAM72B,KAClBsC,OAAe,EACnB,GAAIu0B,EAAMxc,KACFud,EAAS7/B,SAASk3B,IAClB3sB,EAAezB,EAAKyB,aAAas1B,EAAU3I,GAC3C4I,EAAgBA,EAAcxD,SAAS/xB,EAAcu0B,EAAMxc,OAEtD4U,EAAUl3B,SAAS6/B,KACxBt1B,EAAezB,EAAKyB,aAAa2sB,EAAW2I,GAC5CC,EAAgBA,EAAcxD,SAASxzB,EAAK+kB,MAAOiR,EAAMxc,KAAK1L,SAASrM,SAG1E,KAAIu0B,EAAMlT,SAqBX,MAAMptB,EAAK6W,eAAe,8CApB1B,GAAIwqB,EAAS7/B,SAASk3B,GAClB3sB,EAAezB,EAAKyB,aAAas1B,EAAU3I,GAC3C4I,EAAgBA,EAAcpD,UAAUnyB,EAAcu0B,EAAMlT,eAE3D,GAAIsL,EAAUl3B,SAAS6/B,GAExB,GADAt1B,EAAezB,EAAKyB,aAAa2sB,EAAW2I,GACxCt1B,EAAaD,UACbw1B,EAAgBA,EAAcpD,UAAU5zB,EAAK+kB,MAAOiR,EAAMlT,cAEzD,CACD,IAAIzhB,EAAQ3L,EAAKuf,QAAQ+gB,EAAMlT,SAAUrhB,EAAahB,YACtD,GAAIY,EAAO,CAEP,IAAI41B,EAAW51B,EAAMyM,SAASrM,EAAad,YAC3Cq2B,EAAgBA,EAAcxD,SAASxzB,EAAK+kB,MAAOkS,OAU3E,OAAOD,GAEJxC,EA3cmB,GAmd1BK,GAA8B,WAK9B,SAASA,EAAa11B,EAAMm1B,GACxBv+B,KAAKmhC,UAAY/3B,EACjBpJ,KAAKw9B,WAAae,EA4FtB,OAhFAO,EAAa5+B,UAAUqrB,uBAAyB,SAAU0N,EAAqB8G,EAAmBC,GAC9F,OAAOhgC,KAAKw9B,WAAWjS,uBAAuBvrB,KAAKmhC,UAAWlI,EAAqB8G,EAAmBC,IAS1GlB,EAAa5+B,UAAUk3B,0BAA4B,SAAUkJ,GACzD,OAAOtgC,KAAKw9B,WAAWpG,0BAA0Bp3B,KAAKmhC,UAAWb,IAqBrExB,EAAa5+B,UAAUs3B,mCAAqC,SAAUpuB,EAAMq3B,EAAmBC,GAC3F,OAAO1gC,KAAKw9B,WAAWhG,mCAAmCx3B,KAAKmhC,UAAW/3B,EAAMq3B,EAAmBC,IAUvG5B,EAAa5+B,UAAU62B,eAAiB,SAAU3tB,GAC9C,OAAOpJ,KAAKw9B,WAAWzG,eAAe/2B,KAAKmhC,UAAU71B,MAAMlC,KAa/D01B,EAAa5+B,UAAU80B,iBAAmB,SAAUF,EAAoBnT,EAAW3G,EAAO7S,EAASsQ,GAC/F,OAAOzY,KAAKw9B,WAAWxI,iBAAiBh1B,KAAKmhC,UAAWrM,EAAoBnT,EAAW3G,EAAO7S,EAASsQ,IAU3GqmB,EAAa5+B,UAAU20B,kBAAoB,SAAU1H,EAAUiU,GAC3D,OAAOphC,KAAKw9B,WAAW3I,kBAAkB70B,KAAKmhC,UAAWhU,EAAUiU,IAQvEtC,EAAa5+B,UAAUoL,MAAQ,SAAUwM,GACrC,OAAO,IAAIgnB,EAAa9+B,KAAKmhC,UAAU71B,MAAMwM,GAAY9X,KAAKw9B,aAE3DsB,EAnGsB,GA4I7BuC,GAA0B,WAK1B,SAASA,EAASC,GACdthC,KAAKshC,gBAAkBA,EAIvBthC,KAAKuhC,eAAiBrS,GAAcF,MAIpChvB,KAAKwhC,kBAAoB,IAAI/C,GAC7Bz+B,KAAKyhC,cAAgB,IAAIzU,IACzBhtB,KAAK0hC,cAAgB,IAAI1U,IAoiB7B,OA7hBAqU,EAASnhC,UAAUyhC,mBAAqB,SAAUv4B,EAAMw4B,EAAS5C,EAASC,GAGtE,OADAj/B,KAAKwhC,kBAAkBzC,aAAa31B,EAAMw4B,EAAS5C,EAASC,GACvDA,EAIMj/B,KAAK6hC,4BAA4B,IAAI/Q,GAAU7C,GAAgBK,KAAMllB,EAAMw4B,IAH3E,IAWfP,EAASnhC,UAAU4hC,eAAiB,SAAU14B,EAAM+uB,EAAiB6G,GAEjEh/B,KAAKwhC,kBAAkBtC,SAAS91B,EAAM+uB,EAAiB6G,GACvD,IAAI+C,EAAa7S,GAAcC,WAAWgJ,GAC1C,OAAOn4B,KAAK6hC,4BAA4B,IAAI7Q,GAAM/C,GAAgBK,KAAMllB,EAAM24B,KAQlFV,EAASnhC,UAAUm2B,aAAe,SAAU2I,EAASrQ,QAClC,IAAXA,IAAqBA,GAAS,GAClC,IAAIsR,EAAQjgC,KAAKwhC,kBAAkBrC,SAASH,GACxCgD,EAAmBhiC,KAAKwhC,kBAAkBxD,YAAYgB,GAC1D,GAAKgD,EAGA,CACD,IAAIC,EAAiB/S,GAAcF,MAUnC,OATkB,MAAdiR,EAAMxc,KAENwe,EAAiBA,EAAe9hC,IAAI8J,EAAK+kB,OAAO,GAGhD9nB,EAAK+4B,EAAMlT,UAAU,SAAUjiB,EAAYyK,GACvC0sB,EAAiBA,EAAe9hC,IAAI,IAAI8J,EAAKa,GAAayK,MAG3DvV,KAAK6hC,4BAA4B,IAAIpT,GAAawR,EAAM72B,KAAM64B,EAAgBtT,IAbrF,MAAO,IAqBf0S,EAASnhC,UAAUgiC,qBAAuB,SAAU94B,EAAMw4B,GACtD,OAAO5hC,KAAK6hC,4BAA4B,IAAI/Q,GAAU7C,GAAgBM,OAAQnlB,EAAMw4B,KAOxFP,EAASnhC,UAAUiiC,iBAAmB,SAAU/4B,EAAM+uB,GAClD,IAAI4J,EAAa7S,GAAcC,WAAWgJ,GAC1C,OAAOn4B,KAAK6hC,4BAA4B,IAAI7Q,GAAM/C,GAAgBM,OAAQnlB,EAAM24B,KAOpFV,EAASnhC,UAAUkiC,oBAAsB,SAAUh5B,GAC/C,OAAOpJ,KAAK6hC,4BAA4B,IAAIjR,GAAe3C,GAAgBM,OAAQnlB,KAOvFi4B,EAASnhC,UAAUmiC,0BAA4B,SAAUj5B,EAAMqa,EAAM6e,GACjE,IAAIC,EAAWviC,KAAKwiC,gBAAgBF,GACpC,GAAgB,MAAZC,EAAkB,CAClB,IAAIE,EAAIpB,EAASqB,eAAeH,GAC5BI,EAAYF,EAAEr5B,KAAMglB,EAAUqU,EAAErU,QAChC1iB,EAAezB,EAAKyB,aAAai3B,EAAWv5B,GAC5C8iB,EAAK,IAAI4E,GAAU7C,GAAgBO,qBAAqBJ,GAAU1iB,EAAc+X,GACpF,OAAOzjB,KAAK4iC,sBAAsBD,EAAWzW,GAI7C,MAAO,IAQfmV,EAASnhC,UAAU2iC,sBAAwB,SAAUz5B,EAAM+uB,EAAiBmK,GACxE,IAAIC,EAAWviC,KAAKwiC,gBAAgBF,GACpC,GAAIC,EAAU,CACV,IAAIE,EAAIpB,EAASqB,eAAeH,GAC5BI,EAAYF,EAAEr5B,KAAMglB,EAAUqU,EAAErU,QAChC1iB,EAAezB,EAAKyB,aAAai3B,EAAWv5B,GAC5C24B,EAAa7S,GAAcC,WAAWgJ,GACtCjM,EAAK,IAAI8E,GAAM/C,GAAgBO,qBAAqBJ,GAAU1iB,EAAcq2B,GAChF,OAAO/hC,KAAK4iC,sBAAsBD,EAAWzW,GAI7C,MAAO,IAQfmV,EAASnhC,UAAU4iC,0BAA4B,SAAU15B,EAAMk5B,GAC3D,IAAIC,EAAWviC,KAAKwiC,gBAAgBF,GACpC,GAAIC,EAAU,CACV,IAAIE,EAAIpB,EAASqB,eAAeH,GAC5BI,EAAYF,EAAEr5B,KAAMglB,EAAUqU,EAAErU,QAChC1iB,EAAezB,EAAKyB,aAAai3B,EAAWv5B,GAC5C8iB,EAAK,IAAI0E,GAAe3C,GAAgBO,qBAAqBJ,GAAU1iB,GAC3E,OAAO1L,KAAK4iC,sBAAsBD,EAAWzW,GAI7C,MAAO,IAQfmV,EAASnhC,UAAUg7B,qBAAuB,SAAUhyB,EAAOyb,GACvD,IAAIvb,EAAOF,EAAME,KACb6tB,EAAc,KACd8L,GAA2B,EAG/B/iC,KAAKuhC,eAAejR,cAAclnB,GAAM,SAAU45B,EAAiBC,GAC/D,IAAIv3B,EAAezB,EAAKyB,aAAas3B,EAAiB55B,GACtD6tB,EAAcA,GAAegM,EAAGlI,uBAAuBrvB,GACvDq3B,EACIA,GAA4BE,EAAG1G,qBAEvC,IAUIL,EAVAgH,EAAYljC,KAAKuhC,eAAe9gC,IAAI2I,GAWxC,GAVK85B,GAKDH,EACIA,GAA4BG,EAAU3G,kBAC1CtF,EAAcA,GAAeiM,EAAUnI,uBAAuB9wB,EAAK+kB,SANnEkU,EAAY,IAAIpH,GAChB97B,KAAKuhC,eAAiBvhC,KAAKuhC,eAAephC,IAAIiJ,EAAM85B,IAQrC,MAAfjM,EACAiF,GAAsB,MAErB,CACDA,GAAsB,EACtBjF,EAAc1W,GAAa9I,WAC3B,IAAIsX,EAAU/uB,KAAKuhC,eAAexS,QAAQ3lB,GAC1C2lB,EAAQ4B,cAAa,SAAU7Y,EAAWqrB,GACtC,IAAIxN,EAAgBwN,EAAepI,uBAAuB9wB,EAAK+kB,OAC3D2G,IACAsB,EAAcA,EAAY9e,qBAAqBL,EAAW6d,OAItE,IAAIyN,EAAoBF,EAAU9F,mBAAmBl0B,GACrD,IAAKk6B,IAAsBl6B,EAAMwc,iBAAiBuV,eAAgB,CAE9D,IAAIsH,EAAWlB,EAASgC,cAAcn6B,GACtCvJ,EAAK8D,QAAQzD,KAAK0hC,cAActU,IAAImV,GAAW,0CAC/C,IAAID,EAAMjB,EAASiC,mBACnBtjC,KAAK0hC,cAAcvhC,IAAIoiC,EAAUD,GACjCtiC,KAAKyhC,cAActhC,IAAImiC,EAAKC,GAEhC,IAAI7M,EAAc11B,KAAKwhC,kBAAkB3C,YAAYz1B,GACjDqwB,EAASyJ,EAAUhI,qBAAqBhyB,EAAOyb,EAAmB+Q,EAAauB,EAAaiF,GAChG,IAAKkH,IAAsBL,EAA0B,CACjD,IAAI9G,EAA0BiH,EAAUhG,aAAah0B,GACrDuwB,EAASA,EAAOgC,OAAOz7B,KAAKujC,eAAer6B,EAAO+yB,IAEtD,OAAOxC,GAYX4H,EAASnhC,UAAUi7B,wBAA0B,SAAUjyB,EAAOyb,EAAmByW,GAC7E,IAAIrb,EAAQ/f,KAERoJ,EAAOF,EAAME,KACbo6B,EAAiBxjC,KAAKuhC,eAAe9gC,IAAI2I,GACzCiyB,EAAe,GAInB,GAAImI,IAC6B,YAA5Bt6B,EAAM2hB,mBACH2Y,EAAepG,mBAAmBl0B,IAAS,CAI/C,IAAIu6B,EAAmBD,EAAerI,wBAAwBjyB,EAAOyb,EAAmByW,GACpFoI,EAAe/3B,YACfzL,KAAKuhC,eAAiBvhC,KAAKuhC,eAAe1gC,OAAOuI,IAErD,IAAIizB,EAAUoH,EAAiBpH,QAC/BhB,EAAeoI,EAAiBhK,OAOhC,IAAIiK,GAAmB,IACnBrH,EAAQgD,WAAU,SAAUn2B,GACxB,OAAOA,EAAMwc,iBAAiBuV,kBAElC0I,EAAU3jC,KAAKuhC,eAAerR,WAAW9mB,GAAM,SAAUsC,EAAck4B,GACvE,OAAOA,EAAgBrH,qBAE3B,GAAImH,IAAoBC,EAAS,CAC7B,IAAI5U,EAAU/uB,KAAKuhC,eAAexS,QAAQ3lB,GAG1C,IAAK2lB,EAAQtjB,UAIT,IAFA,IAAIo4B,EAAW7jC,KAAK8jC,gCAAgC/U,GAE3ChsB,EAAI,EAAGA,EAAI8gC,EAAShhC,SAAUE,EAAG,CACtC,IAAIk5B,EAAO4H,EAAS9gC,GAAIghC,EAAW9H,EAAKnB,WACpCkJ,EAAWhkC,KAAKikC,uBAAuBhI,GAC3Cj8B,KAAKshC,gBAAgB4C,eAAe7C,EAAS8C,mBAAmBJ,GAAW/jC,KAAKokC,aAAaL,GAAWC,EAASK,OAAQL,EAASpwB,aAO9I,IAAK+vB,GAAWtH,EAAQx5B,OAAS,IAAMu4B,EAGnC,GAAIsI,EAAiB,CAEjB,IAAIY,EAAa,KACjBtkC,KAAKshC,gBAAgBiD,cAAclD,EAAS8C,mBAAmBj7B,GAAQo7B,QAGvEjI,EAAQhY,SAAQ,SAAUmgB,GACtB,IAAIC,EAAc1kB,EAAM2hB,cAAcjhC,IAAI4gC,EAASgC,cAAcmB,IACjEzkB,EAAMuhB,gBAAgBiD,cAAclD,EAAS8C,mBAAmBK,GAAgBC,MAK5FzkC,KAAK0kC,YAAYrI,GAErB,OAAOhB,GAaXgG,EAASnhC,UAAUqrB,uBAAyB,SAAUniB,EAAM22B,GACxD,IAAI4E,GAAoB,EACpBpG,EAAYv+B,KAAKwhC,kBACjBvK,EAAcj3B,KAAKuhC,eAAerR,WAAW9mB,GAAM,SAAU4mB,EAAWkT,GACxE,IAAIx3B,EAAezB,EAAKyB,aAAaskB,EAAW5mB,GAC5C6tB,EAAciM,EAAUnI,uBAAuBrvB,GACnD,GAAIurB,EACA,OAAOA,KAGf,OAAOsH,EAAUhT,uBAAuBniB,EAAM6tB,EAAa8I,EAAmB4E,IAMlFtD,EAASnhC,UAAU4jC,gCAAkC,SAAU/U,GAC3D,OAAOA,EAAQe,MAAK,SAAUpkB,EAAck5B,EAAqBC,GAC7D,GAAID,GAAuBA,EAAoBrI,kBAAmB,CAC9D,IAAIuI,EAAeF,EAAoBzH,kBACvC,MAAO,CAAC2H,GAIR,IAAIC,EAAU,GAOd,OANIH,IACAG,EAAUH,EAAoB/H,iBAElC31B,EAAK29B,GAAU,SAAUG,EAAMC,GAC3BF,EAAUA,EAAQtJ,OAAOwJ,MAEtBF,MAInB1D,EAASnhC,UAAUwkC,YAAc,SAAUQ,GACvC,IAAK,IAAI34B,EAAI,EAAGA,EAAI24B,EAAQriC,SAAU0J,EAAG,CACrC,IAAI44B,EAAeD,EAAQ34B,GAC3B,IAAK44B,EAAazf,iBAAiBuV,eAAgB,CAE/C,IAAImK,EAAkB/D,EAASgC,cAAc8B,GACzCE,EAAkBrlC,KAAK0hC,cAAcjhC,IAAI2kC,GAC7CplC,KAAK0hC,cAAc/T,OAAOyX,GAC1BplC,KAAKyhC,cAAc9T,OAAO0X,MAStChE,EAAS8C,mBAAqB,SAAUj7B,GACpC,OAAIA,EAAMwc,iBAAiBuV,iBACtB/xB,EAAMwc,iBAAiB4f,YAIjBp8B,EAAMub,SAGNvb,GAQfm4B,EAASnhC,UAAUqjC,eAAiB,SAAUr6B,EAAO+yB,GACjD,IAAI7yB,EAAOF,EAAME,KACbk5B,EAAMtiC,KAAKokC,aAAal7B,GACxB86B,EAAWhkC,KAAKikC,uBAAuBhI,GACvCxC,EAASz5B,KAAKshC,gBAAgB4C,eAAe7C,EAAS8C,mBAAmBj7B,GAAQo5B,EAAK0B,EAASK,OAAQL,EAASpwB,YAChHmb,EAAU/uB,KAAKuhC,eAAexS,QAAQ3lB,GAG1C,GAAIk5B,EACA3iC,EAAK8D,QAAQsrB,EAAQvvB,MAAM+8B,kBAAmB,0DAsB9C,IAlBA,IAAIgJ,EAAgBxW,EAAQe,MAAK,SAAUpkB,EAAck5B,EAAqBC,GAC1E,IAAKn5B,EAAaD,WACdm5B,GACAA,EAAoBrI,kBACpB,MAAO,CAACqI,EAAoBzH,kBAAkBrC,YAI9C,IAAI0K,EAAY,GAOhB,OANIZ,IACAY,EAAYA,EAAU/J,OAAOmJ,EAAoB/H,gBAAgB7c,KAAI,SAAUic,GAAQ,OAAOA,EAAKnB,gBAEvG5zB,EAAK29B,GAAU,SAAUG,EAAMS,GAC3BD,EAAYA,EAAU/J,OAAOgK,MAE1BD,KAGNziC,EAAI,EAAGA,EAAIwiC,EAAc1iC,SAAUE,EAAG,CAC3C,IAAI2iC,EAAcH,EAAcxiC,GAChC/C,KAAKshC,gBAAgBiD,cAAclD,EAAS8C,mBAAmBuB,GAAc1lC,KAAKokC,aAAasB,IAGvG,OAAOjM,GAEX4H,EAASnhC,UAAU+jC,uBAAyB,SAAUhI,GAClD,IAAIlc,EAAQ/f,KACRkJ,EAAQ+yB,EAAKnB,WACbwH,EAAMtiC,KAAKokC,aAAal7B,GAC5B,MAAO,CACHm7B,OAAQ,WACJ,IAAIrJ,EAAQiB,EAAK5J,kBAAoB9R,GAAa9I,WAClD,OAAOujB,EAAMniB,QAEjBjF,WAAY,SAAU+xB,GAClB,GAAe,OAAXA,EACA,OAAIrD,EACOviB,EAAM+iB,0BAA0B55B,EAAME,KAAMk5B,GAG5CviB,EAAMqiB,oBAAoBl5B,EAAME,MAM3C,IAAIlF,EAAQ8E,EAAmB28B,EAAQz8B,GACvC,OAAO6W,EAAMob,wBAAwBjyB,EACf,KAAMhF,MAQ5Cm9B,EAASgC,cAAgB,SAAUn6B,GAC/B,OAAOA,EAAME,KAAKrI,WAAa,IAAMmI,EAAM2hB,mBAK/CwW,EAASqB,eAAiB,SAAUH,GAChC,IAAIqD,EAAarD,EAAS99B,QAAQ,KAElC,OADA9E,EAAK8D,QAAuB,IAAhBmiC,GAAqBA,EAAarD,EAAS1/B,OAAS,EAAG,iBAC5D,CACHurB,QAASmU,EAAS/5B,OAAOo9B,EAAa,GACtCx8B,KAAM,IAAIa,EAAKs4B,EAAS/5B,OAAO,EAAGo9B,MAM1CvE,EAASnhC,UAAUsiC,gBAAkB,SAAUF,GAC3C,OAAOtiC,KAAKyhC,cAAchhC,IAAI6hC,IAKlCjB,EAASnhC,UAAUkkC,aAAe,SAAUl7B,GACxC,IAAIq5B,EAAWlB,EAASgC,cAAcn6B,GACtC,OAAOlJ,KAAK0hC,cAAcjhC,IAAI8hC,IAKlClB,EAASiC,iBAAmB,WACxB,OAAOjC,EAASwE,iBAKpBxE,EAASnhC,UAAU0iC,sBAAwB,SAAUD,EAAWlN,GAC5D,IAAIyN,EAAYljC,KAAKuhC,eAAe9gC,IAAIkiC,GACxChjC,EAAK8D,OAAOy/B,EAAW,wDACvB,IAAIxN,EAAc11B,KAAKwhC,kBAAkB3C,YAAY8D,GACrD,OAAOO,EAAU3N,eAAeE,EAAWC,EAC1B,OAerB2L,EAASnhC,UAAU2hC,4BAA8B,SAAUpM,GACvD,OAAOz1B,KAAK8lC,sBAAsBrQ,EAAWz1B,KAAKuhC,eACjC,KAAMvhC,KAAKwhC,kBAAkB3C,YAAY50B,EAAK+kB,SAKnEqS,EAASnhC,UAAU4lC,sBAAwB,SAAUrQ,EAAWsQ,EAAe9O,EAAavB,GACxF,GAAID,EAAUrsB,KAAKqC,UACf,OAAOzL,KAAKgmC,iCAAiCvQ,EAAWsQ,EAAe9O,EAAavB,GAGpF,IAAIwN,EAAY6C,EAActlC,IAAIwJ,EAAK+kB,OAEpB,MAAfiI,GAAoC,MAAbiM,IACvBjM,EAAciM,EAAUnI,uBAAuB9wB,EAAK+kB,QAExD,IAAIyK,EAAS,GACT3hB,EAAY2d,EAAUrsB,KAAKsB,WAC3Bu7B,EAAiBxQ,EAAU3G,kBAAkBhX,GAC7C0G,EAAYunB,EAAchZ,SAAStsB,IAAIqX,GAC3C,GAAI0G,GAAaynB,EAAgB,CAC7B,IAAIC,EAAmBjP,EACjBA,EAAYpf,kBAAkBC,GAC9B,KACFquB,EAAmBzQ,EAAYpqB,MAAMwM,GACzC2hB,EAASA,EAAOgC,OAAOz7B,KAAK8lC,sBAAsBG,EAAgBznB,EAAW0nB,EAAkBC,IAKnG,OAHIjD,IACAzJ,EAASA,EAAOgC,OAAOyH,EAAU3N,eAAeE,EAAWC,EAAauB,KAErEwC,GAMf4H,EAASnhC,UAAU8lC,iCAAmC,SAAUvQ,EAAWsQ,EAAe9O,EAAavB,GACnG,IAAI3V,EAAQ/f,KACRkjC,EAAY6C,EAActlC,IAAIwJ,EAAK+kB,OAEpB,MAAfiI,GAAoC,MAAbiM,IACvBjM,EAAciM,EAAUnI,uBAAuB9wB,EAAK+kB,QAExD,IAAIyK,EAAS,GAcb,OAbAsM,EAAchZ,SAAS9R,kBAAiB,SAAUnD,EAAW0G,GACzD,IAAI0nB,EAAmBjP,EACjBA,EAAYpf,kBAAkBC,GAC9B,KACFquB,EAAmBzQ,EAAYpqB,MAAMwM,GACrCmuB,EAAiBxQ,EAAU3G,kBAAkBhX,GAC7CmuB,IACAxM,EAASA,EAAOgC,OAAO1b,EAAMimB,iCAAiCC,EAAgBznB,EAAW0nB,EAAkBC,QAG/GjD,IACAzJ,EAASA,EAAOgC,OAAOyH,EAAU3N,eAAeE,EAAWC,EAAauB,KAErEwC,GAKX4H,EAASwE,cAAgB,EAClBxE,EApjBkB,GA4kBzB+E,GAAgC,WAChC,SAASA,IACLpmC,KAAKqmC,UAAY9lB,GAAa9I,WAQlC,OANA2uB,EAAelmC,UAAUuxB,QAAU,SAAUroB,GACzC,OAAOpJ,KAAKqmC,UAAUtuB,SAAS3O,IAEnCg9B,EAAelmC,UAAUomC,eAAiB,SAAUl9B,EAAMm9B,GACtDvmC,KAAKqmC,UAAYrmC,KAAKqmC,UAAUhuB,YAAYjP,EAAMm9B,IAE/CH,EAVwB,GAgC/BI,GAAmC,WACnC,SAASA,EAAkBC,EAAMC,GAC7B,IAAI3mB,EAAQ/f,KACZA,KAAKymC,KAAOA,EACZzmC,KAAK0mC,cAAgBA,EACrB1mC,KAAK2mC,MAAQ,KACb3mC,KAAK2mC,MAAQD,EAAcE,aAAa,CAAEz0B,UAAU,IAC/CnS,KAAK2mC,OACND,EAAcjmC,MAAMomC,MAAK,SAAUC,GAAQ,OAAQ/mB,EAAM4mB,MAAQG,KAkEzE,OA3DAN,EAAkBtmC,UAAU6mC,SAAW,SAAUC,GAC7C,OAAKhnC,KAAK2mC,MAGH3mC,KAAK2mC,MAAMI,SAASC,GAAcvd,OAAM,SAAUvlB,GAGrD,OAAIA,GAAwB,+BAAfA,EAAM+E,MACfpF,EAAI,kEACG,MAGAojC,QAAQpd,OAAO3lB,MAVnB+iC,QAAQtd,QAAQ,OAc/B6c,EAAkBtmC,UAAUgnC,uBAAyB,SAAUlD,GAGvDhkC,KAAK2mC,MACL3mC,KAAK2mC,MAAMQ,qBAAqBnD,IAGhCz+B,YAAW,WAAc,OAAOy+B,EAAS,QAAU,GACnDhkC,KAAK0mC,cACAjmC,MACAomC,MAAK,SAAUC,GAAQ,OAAOA,EAAKK,qBAAqBnD,QAGrEwC,EAAkBtmC,UAAUknC,0BAA4B,SAAUpD,GAC9DhkC,KAAK0mC,cACAjmC,MACAomC,MAAK,SAAUC,GAAQ,OAAOA,EAAKO,wBAAwBrD,OAEpEwC,EAAkBtmC,UAAUonC,sBAAwB,WAChD,IAAIC,EAAe,0DACfvnC,KAAKymC,KAAK3lC,KADK,iFAIf,eAAgBd,KAAKymC,KAAKe,QAC1BD,GACI,uJAIC,mBAAoBvnC,KAAKymC,KAAKe,QACnCD,GACI,2JAKJA,GACI,kKAIRljC,EAAKkjC,IAEFf,EA1E2B,GAkGlCiB,GAAiC,WACjC,SAASA,IACLznC,KAAK0nC,UAAY,GAYrB,OAVAD,EAAgBvnC,UAAUynC,iBAAmB,SAAU7mC,EAAM8mC,QAC1C,IAAXA,IAAqBA,EAAS,GAC7BjoC,EAAKwB,SAASnB,KAAK0nC,UAAW5mC,KAC/Bd,KAAK0nC,UAAU5mC,GAAQ,GAE3Bd,KAAK0nC,UAAU5mC,IAAS8mC,GAE5BH,EAAgBvnC,UAAUO,IAAM,WAC5B,OAAOd,EAAKkoC,SAAS7nC,KAAK0nC,YAEvBD,EAdyB,GAiChCK,GAA8B,WAC9B,SAASA,KAkBT,OAhBAA,EAAaC,cAAgB,SAAUh3B,GACnC,IAAIi3B,EAAaj3B,EAAShQ,WAI1B,OAHKf,KAAKioC,aAAaD,KACnBhoC,KAAKioC,aAAaD,GAAc,IAAIP,IAEjCznC,KAAKioC,aAAaD,IAE7BF,EAAaI,oBAAsB,SAAUn3B,EAAUo3B,GACnD,IAAIH,EAAaj3B,EAAShQ,WAI1B,OAHKf,KAAKooC,WAAWJ,KACjBhoC,KAAKooC,WAAWJ,GAAcG,KAE3BnoC,KAAKooC,WAAWJ,IAE3BF,EAAaG,aAAe,GAC5BH,EAAaM,WAAa,GACnBN,EAnBsB,GA4C7BO,GAA+B,WAC/B,SAASA,EAAcC,GACnBtoC,KAAKsoC,YAAcA,EACnBtoC,KAAKuoC,MAAQ,KAajB,OAXAF,EAAcnoC,UAAUO,IAAM,WAC1B,IAAI+nC,EAAWxoC,KAAKsoC,YAAY7nC,MAC5B4rB,EAAQ3sB,EAAMkgB,SAAS,GAAI4oB,GAO/B,OANIxoC,KAAKuoC,OACLrhC,EAAKlH,KAAKuoC,OAAO,SAAUE,EAAMjpC,GAC7B6sB,EAAMoc,GAAQpc,EAAMoc,GAAQjpC,KAGpCQ,KAAKuoC,MAAQC,EACNnc,GAEJgc,EAhBuB,GAsC9BK,GAAuB,IACvBC,GAAuB,IAEvBC,GAAwB,IAIxBC,GAA+B,WAK/B,SAASA,EAAcC,EAAYC,GAC/B/oC,KAAK+oC,QAAUA,EACf/oC,KAAKgpC,eAAiB,GACtBhpC,KAAKipC,eAAiB,IAAIZ,GAAcS,GACxC,IAAI9+B,EAAU0+B,IACTC,GAAuBD,IAAwBljC,KAAK6P,SACzDvL,EAAsB9J,KAAKkpC,aAAaplC,KAAK9D,MAAOwF,KAAKC,MAAMuE,IAsBnE,OApBA6+B,EAAc3oC,UAAUipC,YAAc,SAAUV,GAC5CzoC,KAAKgpC,eAAeP,IAAQ,GAEhCI,EAAc3oC,UAAUgpC,aAAe,WACnC,IAAInpB,EAAQ/f,KACRopC,EAAQppC,KAAKipC,eAAexoC,MAC5B4oC,EAAgB,GAChBC,GAAoB,EACxBpiC,EAAKkiC,GAAO,SAAUX,EAAMjpC,GACpBA,EAAQ,GAAKG,EAAKwB,SAAS4e,EAAMipB,eAAgBP,KACjDY,EAAcZ,GAAQjpC,EACtB8pC,GAAoB,MAGxBA,GACAtpC,KAAK+oC,QAAQQ,YAAYF,GAG7Bv/B,EAAsB9J,KAAKkpC,aAAaplC,KAAK9D,MAAOwF,KAAKC,MAAsB,EAAhBD,KAAK6P,SAAeuzB,MAEhFC,EAjCuB,GAkE9BW,GAA4B,WAC5B,SAASA,IAKLxpC,KAAKypC,YAAc,GAMnBzpC,KAAK0pC,gBAAkB,EA+E3B,OA1EAF,EAAWtpC,UAAUypC,YAAc,SAAUC,GAGzC,IADA,IAAIC,EAAW,KACN9mC,EAAI,EAAGA,EAAI6mC,EAAc/mC,OAAQE,IAAK,CAC3C,IAAI8iB,EAAY+jB,EAAc7mC,GAC1B+mC,EAAYjkB,EAAUhB,UACT,OAAbglB,GAAsBC,EAAUz9B,OAAOw9B,EAAShlB,aAChD7kB,KAAKypC,YAAY/iC,KAAKmjC,GACtBA,EAAW,MAEE,OAAbA,IACAA,EAAW,IAAIE,GAAUD,IAE7BD,EAASG,IAAInkB,GAEbgkB,GACA7pC,KAAKypC,YAAY/iC,KAAKmjC,IAY9BL,EAAWtpC,UAAU+pC,kBAAoB,SAAU7gC,EAAMwgC,GACrD5pC,KAAK2pC,YAAYC,GACjB5pC,KAAKkqC,qCAAoC,SAAUJ,GAC/C,OAAOA,EAAUz9B,OAAOjD,OAYhCogC,EAAWtpC,UAAUiqC,0BAA4B,SAAUC,EAAaR,GACpE5pC,KAAK2pC,YAAYC,GACjB5pC,KAAKkqC,qCAAoC,SAAUJ,GAC/C,OAAOA,EAAU3oC,SAASipC,IAAgBA,EAAYjpC,SAAS2oC,OAOvEN,EAAWtpC,UAAUgqC,oCAAsC,SAAU5a,GACjEtvB,KAAK0pC,kBAEL,IADA,IAAIW,GAAU,EACLtnC,EAAI,EAAGA,EAAI/C,KAAKypC,YAAY5mC,OAAQE,IAAK,CAC9C,IAAIunC,EAAYtqC,KAAKypC,YAAY1mC,GACjC,GAAIunC,EAAW,CACX,IAAIR,EAAYQ,EAAUzlB,UACtByK,EAAUwa,IACV9pC,KAAKypC,YAAY1mC,GAAGwnC,QACpBvqC,KAAKypC,YAAY1mC,GAAK,MAGtBsnC,GAAU,GAIlBA,IACArqC,KAAKypC,YAAc,IAEvBzpC,KAAK0pC,mBAEFF,EA3FoB,GAiG3BO,GAA2B,WAC3B,SAASA,EAAUx3B,GACfvS,KAAKuS,MAAQA,EAKbvS,KAAKwqC,QAAU,GA8BnB,OAzBAT,EAAU7pC,UAAU8pC,IAAM,SAAUnkB,GAChC7lB,KAAKwqC,QAAQ9jC,KAAKmf,IAKtBkkB,EAAU7pC,UAAUqqC,MAAQ,WACxB,IAAK,IAAIxnC,EAAI,EAAGA,EAAI/C,KAAKwqC,QAAQ3nC,OAAQE,IAAK,CAC1C,IAAI8iB,EAAY7lB,KAAKwqC,QAAQznC,GAC7B,GAAkB,OAAd8iB,EAAoB,CACpB7lB,KAAKwqC,QAAQznC,GAAK,KAClB,IAAI0nC,EAAU5kB,EAAUZ,iBACpB7hB,GACAS,EAAI,UAAYgiB,EAAU9kB,YAE9B0I,EAAeghC,MAO3BV,EAAU7pC,UAAU2kB,QAAU,WAC1B,OAAO7kB,KAAKuS,OAETw3B,EArCmB,GA4D1BW,GAA8B,WAI9B,SAASA,EAAaC,GAClB3qC,KAAK2qC,eAAiBA,EACtB3qC,KAAK4qC,WAAa,GAClBjrC,EAAK8D,OAAOR,MAAMC,QAAQynC,IAAmBA,EAAe9nC,OAAS,EAAG,8BA6C5E,OAtCA6nC,EAAaxqC,UAAU2qC,QAAU,SAAU53B,GAEvC,IADA,IAAIvQ,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,EAAK,GAAKC,UAAUD,GAEhC,GAAIM,MAAMC,QAAQlD,KAAK4qC,WAAW33B,IAG9B,IADA,IAAI63B,EAAYprC,EAAMuE,SAASjE,KAAK4qC,WAAW33B,IACtClQ,EAAI,EAAGA,EAAI+nC,EAAUjoC,OAAQE,IAClC+nC,EAAU/nC,GAAGulB,SAASnlB,MAAM2nC,EAAU/nC,GAAGylB,QAAS9lB,IAI9DgoC,EAAaxqC,UAAUmoB,GAAK,SAAUpV,EAAWqV,EAAUE,GACvDxoB,KAAK+qC,mBAAmB93B,GACxBjT,KAAK4qC,WAAW33B,GAAajT,KAAK4qC,WAAW33B,IAAc,GAC3DjT,KAAK4qC,WAAW33B,GAAWvM,KAAK,CAAE4hB,SAAUA,EAAUE,QAASA,IAC/D,IAAI3C,EAAY7lB,KAAKgrC,gBAAgB/3B,GACjC4S,GACAyC,EAASnlB,MAAMqlB,EAAS3C,IAGhC6kB,EAAaxqC,UAAU+oB,IAAM,SAAUhW,EAAWqV,EAAUE,GACxDxoB,KAAK+qC,mBAAmB93B,GAExB,IADA,IAAI63B,EAAY9qC,KAAK4qC,WAAW33B,IAAc,GACrClQ,EAAI,EAAGA,EAAI+nC,EAAUjoC,OAAQE,IAClC,GAAI+nC,EAAU/nC,GAAGulB,WAAaA,KACxBE,GAAWA,IAAYsiB,EAAU/nC,GAAGylB,SAEtC,YADAsiB,EAAUvL,OAAOx8B,EAAG,IAKhC2nC,EAAaxqC,UAAU6qC,mBAAqB,SAAU93B,GAClDtT,EAAK8D,OAAOzD,KAAK2qC,eAAe1d,MAAK,SAAUge,GAC3C,OAAOA,IAAOh4B,KACd,kBAAoBA,IAErBy3B,EApDsB,GA0E7BQ,GAAmC,SAAU90B,GAE7C,SAAS80B,IACL,IACIC,EACAC,EAFArrB,EAAQ3J,EAAO7F,KAAKvQ,KAAM,CAAC,aAAeA,KAqC9C,MAlCwB,qBAAbkF,UAC8B,qBAA9BA,SAASQ,mBACkB,qBAAvBR,SAAS,WAEhBkmC,EAAmB,mBACnBD,EAAS,UAE6B,qBAA1BjmC,SAAS,cACrBkmC,EAAmB,sBACnBD,EAAS,aAE4B,qBAAzBjmC,SAAS,aACrBkmC,EAAmB,qBACnBD,EAAS,YAEgC,qBAA7BjmC,SAAS,kBACrBkmC,EAAmB,yBACnBD,EAAS,iBAOjBprB,EAAMsrB,UAAW,EACbD,GACAlmC,SAASQ,iBAAiB0lC,GAAkB,WACxC,IAAInM,GAAW/5B,SAASimC,GACpBlM,IAAYlf,EAAMsrB,WAClBtrB,EAAMsrB,SAAWpM,EACjBlf,EAAM8qB,QAAQ,UAAW5L,OAE9B,GAEAlf,EAaX,OApDArgB,EAAM2W,UAAU60B,EAAmB90B,GAyCnC80B,EAAkBI,YAAc,WAC5B,OAAO,IAAIJ,GAMfA,EAAkBhrC,UAAU8qC,gBAAkB,SAAU/3B,GAEpD,OADAtT,EAAK8D,OAAqB,YAAdwP,EAAyB,uBAAyBA,GACvD,CAACjT,KAAKqrC,WAEVH,EArD2B,CAsDpCR,IA2BEa,GAA+B,SAAUn1B,GAEzC,SAASm1B,IACL,IAAIxrB,EAAQ3J,EAAO7F,KAAKvQ,KAAM,CAAC,YAAcA,KAsB7C,OArBA+f,EAAMyrB,SAAU,EAKM,qBAAXlqC,QAC4B,qBAA5BA,OAAOoE,kBACb/F,EAAK8rC,oBACNnqC,OAAOoE,iBAAiB,UAAU,WACzBqa,EAAMyrB,UACPzrB,EAAMyrB,SAAU,EAChBzrB,EAAM8qB,QAAQ,UAAU,OAE7B,GACHvpC,OAAOoE,iBAAiB,WAAW,WAC3Bqa,EAAMyrB,UACNzrB,EAAMyrB,SAAU,EAChBzrB,EAAM8qB,QAAQ,UAAU,OAE7B,IAEA9qB,EAmBX,OA3CArgB,EAAM2W,UAAUk1B,EAAen1B,GA0B/Bm1B,EAAcD,YAAc,WACxB,OAAO,IAAIC,GAMfA,EAAcrrC,UAAU8qC,gBAAkB,SAAU/3B,GAEhD,OADAtT,EAAK8D,OAAqB,WAAdwP,EAAwB,uBAAyBA,GACtD,CAACjT,KAAKwrC,UAKjBD,EAAcrrC,UAAUwrC,gBAAkB,WACtC,OAAO1rC,KAAKwrC,SAETD,EA5CuB,CA6ChCb,IAuBEiB,GAAgC,WAIhC,SAASA,EAAeC,GACpB5rC,KAAK4rC,WAAaA,EAClB5rC,KAAK6rC,iBAAmB,GACxB7rC,KAAK8rC,mBAAqB,EAC1B9rC,KAAK+rC,oBAAsB,EAC3B/rC,KAAKgsC,QAAU,KAiDnB,OA/CAL,EAAezrC,UAAU+rC,WAAa,SAAUC,EAAa5jB,GACzDtoB,KAAK+rC,mBAAqBG,EAC1BlsC,KAAKgsC,QAAU1jB,EACXtoB,KAAK+rC,mBAAqB/rC,KAAK8rC,qBAC/B9rC,KAAKgsC,UACLhsC,KAAKgsC,QAAU,OAUvBL,EAAezrC,UAAUisC,eAAiB,SAAUC,EAAYznC,GAC5D,IAAIob,EAAQ/f,KACZA,KAAK6rC,iBAAiBO,GAAcznC,EACpC,IAAI0nC,EAAU,WACV,IAAIC,EAAYC,EAAOV,iBAAiBU,EAAOT,2BACxCS,EAAOV,iBAAiBU,EAAOT,oBAQtC,IAPA,IAAIU,EAAU,SAAUzpC,GAChBupC,EAAUvpC,IACV0G,GAAe,WACXsW,EAAM6rB,WAAWU,EAAUvpC,QAI9BA,EAAI,EAAGA,EAAIupC,EAAUzpC,SAAUE,EACpCypC,EAAQzpC,GAEZ,GAAIwpC,EAAOT,qBAAuBS,EAAOR,mBAKrC,OAJIQ,EAAOP,UACPO,EAAOP,UACPO,EAAOP,QAAU,MAEd,QAEXO,EAAOT,sBAEPS,EAASvsC,KACb,MAAOA,KAAK6rC,iBAAiB7rC,KAAK8rC,oBAAqB,CACnD,IAAIW,EAAUJ,IACd,GAAgB,UAAZI,EACA,QAGLd,EA1DwB,GA8E/Be,GAAgC,QAChCC,GAAkC,QAClCC,GAAoC,aACpCC,GAAiC,UACjCC,GAA6B,KAC7BC,GAA6B,KAC7BC,GAAiC,MACjCC,GAAsC,KACtCC,GAAsC,MACtCC,GAAuC,KACvCC,GAA+B,IAC/BC,GAAgD,SAIhDC,GAAoB,KACpBC,GAAkB,GAClBC,GAAmBF,GAAoBC,GAQvCE,GAA6B,KAM7BC,GAAqB,IAOrBC,GAAuC,WAUvC,SAASA,EAAsBC,EAAQ78B,EAAU88B,EAAeC,EAAoBC,GAChF/tC,KAAK4tC,OAASA,EACd5tC,KAAK+Q,SAAWA,EAChB/Q,KAAK6tC,cAAgBA,EACrB7tC,KAAK8tC,mBAAqBA,EAC1B9tC,KAAK+tC,cAAgBA,EACrB/tC,KAAKguC,UAAY,EACjBhuC,KAAKiuC,cAAgB,EACrBjuC,KAAKkuC,gBAAiB,EACtBluC,KAAKmuC,KAAOpqC,EAAW6pC,GACvB5tC,KAAKouC,OAAStG,GAAaC,cAAch3B,GACzC/Q,KAAKquC,MAAQ,SAAUt/B,GACnB,OAAOgC,EAASlC,cAAchB,GAAckB,IAmPpD,OA3OA4+B,EAAsBztC,UAAUouC,KAAO,SAAUC,EAAWC,GACxD,IAAIzuB,EAAQ/f,KACZA,KAAKyuC,cAAgB,EACrBzuC,KAAK0uC,cAAgBF,EACrBxuC,KAAK2uC,gBAAkB,IAAIhD,GAAe4C,GAC1CvuC,KAAK4uC,WAAY,EACjB5uC,KAAK6uC,qBAAuBtpC,YAAW,WACnCwa,EAAMouB,KAAK,gCAEXpuB,EAAM+uB,YACN/uB,EAAM8uB,qBAAuB,OAE9BrpC,KAAKC,MAAMioC,KAEd3oC,GAAoB,WAChB,IAAIgb,EAAM6uB,UAAV,CAIA7uB,EAAMgvB,gBAAkB,IAAIC,IAA2B,WAEnD,IADA,IAAIC,EAAO,GACFtsC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCssC,EAAKtsC,GAAMC,UAAUD,GAEzB,IAAIgN,EAAKjQ,EAAMg9B,OAAOuS,EAAM,GAAIC,EAAUv/B,EAAG,GAAIw/B,EAAOx/B,EAAG,GAAIy/B,EAAOz/B,EAAG,GAAWA,EAAG,GAAWA,EAAG,GAErG,GADAoQ,EAAMsvB,wBAAwBJ,GACzBlvB,EAAMgvB,gBAQX,GALIhvB,EAAM8uB,uBACNS,aAAavvB,EAAM8uB,sBACnB9uB,EAAM8uB,qBAAuB,MAEjC9uB,EAAMmuB,gBAAiB,EACnBgB,IAAYxC,GACZ3sB,EAAMje,GAAKqtC,EACXpvB,EAAMwvB,SAAWH,MAEhB,IAAIF,IAAYvC,GAiBjB,MAAM,IAAIvoC,MAAM,kCAAoC8qC,GAfhDC,GAGApvB,EAAMgvB,gBAAgBS,cAAe,EAGrCzvB,EAAM4uB,gBAAgB1C,WAAWkD,GAAM,WACnCpvB,EAAM+uB,gBAIV/uB,EAAM+uB,gBAMf,WAEC,IADA,IAAIG,EAAO,GACFtsC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCssC,EAAKtsC,GAAMC,UAAUD,GAEzB,IAAIgN,EAAKjQ,EAAMg9B,OAAOuS,EAAM,GAAIQ,EAAK9/B,EAAG,GAAIhL,EAAOgL,EAAG,GACtDoQ,EAAMsvB,wBAAwBJ,GAC9BlvB,EAAM4uB,gBAAgBxC,eAAesD,EAAI9qC,MAC1C,WACCob,EAAM+uB,cACP/uB,EAAMsuB,OAGT,IAAIqB,EAAY,GAChBA,EAAUhD,IAAiC,IAC3CgD,EAAU1C,IAAkCxnC,KAAKC,MAAsB,IAAhBD,KAAK6P,UACxD0K,EAAMgvB,gBAAgBY,2BACtBD,EAAUzC,IAAuCltB,EAAMgvB,gBAAgBY,0BAE3ED,EAAUriC,GAAiBD,EACvB2S,EAAM+tB,qBACN4B,EAAUpiC,GAA2ByS,EAAM+tB,oBAE3C/tB,EAAMguB,gBACN2B,EAAUhiC,IAAsBqS,EAAMguB,eAEtChuB,EAAM8tB,gBACN6B,EAAU/hC,IAAwBoS,EAAM8tB,eAEpB,qBAAbtpC,UACPA,SAASqE,OACgC,IAAzCrE,SAASqE,KAAKnE,QAAQgJ,MACtBiiC,EAAUniC,GAAiBC,GAE/B,IAAIoiC,EAAa7vB,EAAMsuB,MAAMqB,GAC7B3vB,EAAMouB,KAAK,+BAAiCyB,GAC5C7vB,EAAMgvB,gBAAgBc,OAAOD,GAAY,oBAQjDjC,EAAsBztC,UAAU4vC,MAAQ,WACpC9vC,KAAK+uC,gBAAgBgB,cAAc/vC,KAAK8B,GAAI9B,KAAKuvC,UACjDvvC,KAAKgwC,uBAAuBhwC,KAAK8B,GAAI9B,KAAKuvC,WAK9C5B,EAAsBsC,WAAa,WAC/BtC,EAAsBuC,aAAc,GAKxCvC,EAAsBwC,cAAgB,WAClCxC,EAAsByC,gBAAiB,GAG3CzC,EAAsB0C,YAAc,WAChC,OAAI1wC,EAAKsF,gBAGA0oC,EAAsBuC,cAMlBvC,EAAsByC,gBACP,qBAAblrC,UACmB,MAA1BA,SAASorC,gBACR5nC,MACAG,MAMb8kC,EAAsBztC,UAAUqwC,sBAAwB,aAKxD5C,EAAsBztC,UAAUswC,UAAY,WACxCxwC,KAAK4uC,WAAY,EACb5uC,KAAK+uC,kBACL/uC,KAAK+uC,gBAAgB0B,QACrBzwC,KAAK+uC,gBAAkB,MAGvB/uC,KAAK0wC,iBACLxrC,SAASI,KAAKqrC,YAAY3wC,KAAK0wC,gBAC/B1wC,KAAK0wC,eAAiB,MAEtB1wC,KAAK6uC,uBACLS,aAAatvC,KAAK6uC,sBAClB7uC,KAAK6uC,qBAAuB,OAOpClB,EAAsBztC,UAAU4uC,UAAY,WACnC9uC,KAAK4uC,YACN5uC,KAAKmuC,KAAK,8BACVnuC,KAAKwwC,YACDxwC,KAAK0uC,gBACL1uC,KAAK0uC,cAAc1uC,KAAKkuC,gBACxBluC,KAAK0uC,cAAgB,QAQjCf,EAAsBztC,UAAUuwC,MAAQ,WAC/BzwC,KAAK4uC,YACN5uC,KAAKmuC,KAAK,6BACVnuC,KAAKwwC,cAQb7C,EAAsBztC,UAAU0wC,KAAO,SAAUjsC,GAC7C,IAAIksC,EAAUlxC,EAAKa,UAAUmE,GAC7B3E,KAAKguC,WAAa6C,EAAQhuC,OAC1B7C,KAAKouC,OAAOzG,iBAAiB,aAAckJ,EAAQhuC,QAQnD,IANA,IAAIiuC,EAAanxC,EAAKoxC,aAAaF,GAG/B9pC,EAAWH,EAAkBkqC,EAAYtD,IAGpCzqC,EAAI,EAAGA,EAAIgE,EAASlE,OAAQE,IACjC/C,KAAK+uC,gBAAgBiC,eAAehxC,KAAKyuC,cAAe1nC,EAASlE,OAAQkE,EAAShE,IAClF/C,KAAKyuC,iBAUbd,EAAsBztC,UAAU8vC,uBAAyB,SAAUluC,EAAImvC,GACnE,IAAItxC,EAAKsF,YAAT,CAGAjF,KAAK0wC,eAAiBxrC,SAASorC,cAAc,UAC7C,IAAIZ,EAAY,GAChBA,EAAUrC,IAAiD,IAC3DqC,EAAU5C,IAA8BhrC,EACxC4tC,EAAU3C,IAA8BkE,EACxCjxC,KAAK0wC,eAAeQ,IAAMlxC,KAAKquC,MAAMqB,GACrC1vC,KAAK0wC,eAAeS,MAAMC,QAAU,OACpClsC,SAASI,KAAK+rC,YAAYrxC,KAAK0wC,kBAOnC/C,EAAsBztC,UAAUmvC,wBAA0B,SAAUJ,GAEhE,IAAIhB,EAAgBtuC,EAAKa,UAAUyuC,GAAMpsC,OACzC7C,KAAKiuC,eAAiBA,EACtBjuC,KAAKouC,OAAOzG,iBAAiB,iBAAkBsG,IAE5CN,EAzQ+B,GA+QtCqB,GAA4C,WAO5C,SAASA,EAA2BsC,EAAWC,EAAa/C,EAAcH,GAiBtE,GAhBAruC,KAAKwuC,aAAeA,EACpBxuC,KAAKquC,MAAQA,EAGbruC,KAAKwxC,oBAAsB,IAAIC,IAE/BzxC,KAAK0xC,YAAc,GAMnB1xC,KAAK2xC,cAAgBnsC,KAAKC,MAAsB,IAAhBD,KAAK6P,UAGrCrV,KAAKwvC,cAAe,EACf7vC,EAAKsF,YAkCNjF,KAAKsxC,UAAYA,EACjBtxC,KAAKuxC,YAAcA,MAnCA,CAKnBvxC,KAAK2vC,yBAA2B9tC,IAChCP,OAAOsrC,GAAoC5sC,KAAK2vC,0BAA4B2B,EAC5EhwC,OAAOurC,GAAiC7sC,KAAK2vC,0BAA4B4B,EAEzEvxC,KAAK4xC,SAAW5C,EAA2B6C,gBAE3C,IAAIC,EAAS,GAGb,GAAI9xC,KAAK4xC,SAASV,KACwC,gBAAtDlxC,KAAK4xC,SAASV,IAAI1oC,OAAO,EAAG,cAAc3F,QAA2B,CACrE,IAAIkvC,EAAgB7sC,SAASmJ,OAC7ByjC,EAAS,4BAA8BC,EAAgB,eAE3D,IAAIC,EAAiB,eAAiBF,EAAS,iBAC/C,IACI9xC,KAAK4xC,SAASK,IAAI3D,OAClBtuC,KAAK4xC,SAASK,IAAIhS,MAAM+R,GACxBhyC,KAAK4xC,SAASK,IAAIxB,QAEtB,MAAOjvC,GACHqC,EAAI,2BACArC,EAAEkI,OACF7F,EAAIrC,EAAEkI,OAEV7F,EAAIrC,KAuPhB,OAzOAwtC,EAA2B6C,cAAgB,WACvC,IAAIK,EAAShtC,SAASorC,cAAc,UAGpC,GAFA4B,EAAOf,MAAMC,QAAU,QAEnBlsC,SAASI,KAuBT,KAAM,oGAtBNJ,SAASI,KAAK+rC,YAAYa,GAC1B,IAII,IAAInsC,EAAImsC,EAAOC,cAAcjtC,SACxBa,GAEDlC,EAAI,iCAGZ,MAAOrC,GACH,IAAI6M,EAASnJ,SAASmJ,OACtB6jC,EAAOhB,IACH,gEACI7iC,EACA,2BAoBhB,OAXI6jC,EAAOE,gBACPF,EAAOD,IAAMC,EAAOE,gBAEfF,EAAOC,cACZD,EAAOD,IAAMC,EAAOC,cAAcjtC,SAG7BgtC,EAAOhtC,WAEZgtC,EAAOD,IAAMC,EAAOhtC,UAEjBgtC,GAKXlD,EAA2B9uC,UAAUuwC,MAAQ,WACzC,IAAI1wB,EAAQ/f,KAEZA,KAAKqyC,OAAQ,EACTryC,KAAK4xC,WAIL5xC,KAAK4xC,SAASK,IAAI3sC,KAAKgtC,UAAY,GACnC/sC,YAAW,WACgB,OAAnBwa,EAAM6xB,WACN1sC,SAASI,KAAKqrC,YAAY5wB,EAAM6xB,UAChC7xB,EAAM6xB,SAAW,QAEtBpsC,KAAKC,MAAM,KAGlB,IAAI+oC,EAAexuC,KAAKwuC,aACpBA,IACAxuC,KAAKwuC,aAAe,KACpBA,MAQRQ,EAA2B9uC,UAAU6vC,cAAgB,SAAUjuC,EAAImvC,GAC/DjxC,KAAKuyC,KAAOzwC,EACZ9B,KAAKwyC,KAAOvB,EACZjxC,KAAKqyC,OAAQ,EAEb,MAAOryC,KAAKyyC,iBAShBzD,EAA2B9uC,UAAUuyC,YAAc,WAI/C,GAAIzyC,KAAKqyC,OACLryC,KAAKwvC,cACLxvC,KAAKwxC,oBAAoBtkB,MAAQltB,KAAK0xC,YAAY7uC,OAAS,EAAI,EAAI,GAAI,CAEvE7C,KAAK2xC,gBACL,IAAIjC,EAAY,GAChBA,EAAU5C,IAA8B9sC,KAAKuyC,KAC7C7C,EAAU3C,IAA8B/sC,KAAKwyC,KAC7C9C,EAAU1C,IAAkChtC,KAAK2xC,cACjD,IAAIe,EAAS1yC,KAAKquC,MAAMqB,GAEpBiD,EAAgB,GAChB5vC,EAAI,EACR,MAAO/C,KAAK0xC,YAAY7uC,OAAS,EAAG,CAEhC,IAAI+vC,EAAU5yC,KAAK0xC,YAAY,GAC/B,KAAIkB,EAAQC,EAAEhwC,OACV0qC,GACAoF,EAAc9vC,QACdyqC,IAuBA,MArBA,IAAIwF,EAAS9yC,KAAK0xC,YAAYqB,QAC9BJ,EACIA,EACI,IACAzF,GACAnqC,EACA,IACA+vC,EAAOE,IACP,IACA7F,GACApqC,EACA,IACA+vC,EAAOG,GACP,IACA7F,GACArqC,EACA,IACA+vC,EAAOD,EACf9vC,IAQR,OAFA2vC,GAAkBC,EAClB3yC,KAAKkzC,gBAAgBR,EAAQ1yC,KAAK2xC,gBAC3B,EAGP,OAAO,GASf3C,EAA2B9uC,UAAU8wC,eAAiB,SAAUmC,EAAQC,EAAWzuC,GAE/E3E,KAAK0xC,YAAYhrC,KAAK,CAAEssC,IAAKG,EAAQF,GAAIG,EAAWP,EAAGluC,IAGnD3E,KAAKqyC,OACLryC,KAAKyyC,eASbzD,EAA2B9uC,UAAUgzC,gBAAkB,SAAUG,EAAKC,GAClE,IAAIvzB,EAAQ/f,KAEZA,KAAKwxC,oBAAoBxH,IAAIsJ,GAC7B,IAAIC,EAAe,WACfxzB,EAAMyxB,oBAAoB7jB,OAAO2lB,GACjCvzB,EAAM0yB,eAINe,EAAmBjuC,WAAWguC,EAAc/tC,KAAKC,MAAMgoC,KACvDgG,EAAe,WAEfnE,aAAakE,GAEbD,KAEJvzC,KAAK6vC,OAAOwD,EAAKI,IAOrBzE,EAA2B9uC,UAAU2vC,OAAS,SAAUwD,EAAKK,GACzD,IAAI3zB,EAAQ/f,KACRL,EAAKsF,YAELjF,KAAK2zC,eAAeN,EAAKK,GAGzBnuC,YAAW,WACP,IAEI,IAAKwa,EAAMyvB,aACP,OAEJ,IAAIoE,EAAc7zB,EAAM6xB,SAASK,IAAI3B,cAAc,UACnDsD,EAAY9kC,KAAO,kBACnB8kC,EAAYC,OAAQ,EACpBD,EAAY1C,IAAMmC,EAElBO,EAAYE,OAASF,EAAYG,mBAAqB,WAElD,IAAIC,EAASJ,EAAYzuC,WACpB6uC,GAAqB,WAAXA,GAAkC,aAAXA,IAElCJ,EAAYE,OAASF,EAAYG,mBAAqB,KAClDH,EAAYK,YACZL,EAAYK,WAAWtD,YAAYiD,GAEvCF,MAGRE,EAAYM,QAAU,WAClBrwC,EAAI,oCAAsCwvC,GAC1CtzB,EAAMyvB,cAAe,EACrBzvB,EAAM0wB,SAEV1wB,EAAM6xB,SAASK,IAAI3sC,KAAK+rC,YAAYuC,GAExC,MAAOpyC,OAGRgE,KAAKC,MAAM,KAGfupC,EA7SoC,GAiU3CmF,GAAc,GAElB,SAASC,GAAcC,GACnBF,GAAcE;;;;;;;;;;;;;;;;GAmBlB,IAAIC,GAA2B,MAC3BC,GAA+B,KAC/BC,GAAgB,KACQ,qBAAjBC,aACPD,GAAgBC,aAEU,qBAAdC,YACZF,GAAgBE,WAOpB,IAAIC,GAAqC,WASrC,SAASA,EAAoB/G,EAAQ78B,EAAU88B,EAAeC,EAAoBC,GAC9E/tC,KAAK4tC,OAASA,EACd5tC,KAAK6tC,cAAgBA,EACrB7tC,KAAK40C,eAAiB,KACtB50C,KAAK60C,OAAS,KACd70C,KAAK80C,YAAc,EACnB90C,KAAKguC,UAAY,EACjBhuC,KAAKiuC,cAAgB,EACrBjuC,KAAKmuC,KAAOpqC,EAAW/D,KAAK4tC,QAC5B5tC,KAAKouC,OAAStG,GAAaC,cAAch3B,GACzC/Q,KAAKgP,QAAU2lC,EAAoBI,eAAehkC,EAAU+8B,EAAoBC,GAsSpF,OA5RA4G,EAAoBI,eAAiB,SAAUhkC,EAAU+8B,EAAoBC,GACzE,IAAI2B,EAAY,GAchB,OAbAA,EAAUriC,GAAiBD,GACtBzN,EAAKsF,aACc,qBAAbV,UACPA,SAASqE,OACgC,IAAzCrE,SAASqE,KAAKnE,QAAQgJ,MACtBiiC,EAAUniC,GAAiBC,GAE3BsgC,IACA4B,EAAUpiC,GAA2BwgC,GAErCC,IACA2B,EAAUhiC,IAAsBqgC,GAE7Bh9B,EAASlC,cAAcjB,GAAW8hC,IAO7CiF,EAAoBz0C,UAAUouC,KAAO,SAAUC,EAAWC,GACtD,IAAIzuB,EAAQ/f,KACZA,KAAKwuC,aAAeA,EACpBxuC,KAAKuuC,UAAYA,EACjBvuC,KAAKmuC,KAAK,2BAA6BnuC,KAAKgP,SAC5ChP,KAAKkuC,gBAAiB,EAEtBzsC,EAAkBtB,IAAI,8BAA8B,GACpD,IACI,GAAIR,EAAKsF,YAAa,CAClB,IAAI+vC,EAASr1C,EAAKs1C,UAAUC,WAAa,YAAc,OAEnD1N,EAAU,CACV2N,QAAS,CACL,aAAc,YAAc/nC,EAAmB,IAAM+mC,GAAc,IAAMiB,EAAQC,SAAW,IAAML,EAClG,mBAAoBh1C,KAAK6tC,eAAiB,KAI9CyH,EAAM,gGACNC,EAA2C,IAAnCv1C,KAAKgP,QAAQvK,QAAQ,UAC3B6wC,EAAI,gBAAkBA,EAAI,eAC1BA,EAAI,eAAiBA,EAAI,cAC3BC,IACA/N,EAAQ,SAAW,CAAEgO,OAAQD,IAEjCv1C,KAAKy1C,OAAS,IAAIjB,GAAcx0C,KAAKgP,QAAS,GAAIw4B,OAEjD,CACGA,EAAU,CACV2N,QAAS,CACL,mBAAoBn1C,KAAK6tC,eAAiB,KAGlD7tC,KAAKy1C,OAAS,IAAIjB,GAAcx0C,KAAKgP,QAAS,GAAIw4B,IAG1D,MAAOhmC,GACHxB,KAAKmuC,KAAK,kCACV,IAAIjqC,EAAQ1C,EAAEsB,SAAWtB,EAAEmD,KAK3B,OAJIT,GACAlE,KAAKmuC,KAAKjqC,QAEdlE,KAAK8uC,YAGT9uC,KAAKy1C,OAAOC,OAAS,WACjB31B,EAAMouB,KAAK,wBACXpuB,EAAMmuB,gBAAiB,GAE3BluC,KAAKy1C,OAAOE,QAAU,WAClB51B,EAAMouB,KAAK,0CACXpuB,EAAM01B,OAAS,KACf11B,EAAM+uB,aAEV9uC,KAAKy1C,OAAOG,UAAY,SAAUC,GAC9B91B,EAAM+1B,oBAAoBD,IAE9B71C,KAAKy1C,OAAOvB,QAAU,SAAU1yC,GAC5Bue,EAAMouB,KAAK,yCAEX,IAAIjqC,EAAQ1C,EAAEsB,SAAWtB,EAAEmD,KACvBT,GACA6b,EAAMouB,KAAKjqC,GAEf6b,EAAM+uB,cAMd6F,EAAoBz0C,UAAU4vC,MAAQ,aACtC6E,EAAoBxE,cAAgB,WAChCwE,EAAoBvE,gBAAiB,GAEzCuE,EAAoBtE,YAAc,WAC9B,IAAI0F,GAAe,EACnB,GAAyB,qBAAdC,WAA6BA,UAAUpsC,UAAW,CACzD,IAAIqsC,EAAkB,iCAClBC,EAAkBF,UAAUpsC,UAAUusC,MAAMF,GAC5CC,GAAmBA,EAAgBrzC,OAAS,GACxCuzC,WAAWF,EAAgB,IAAM,MACjCH,GAAe,GAI3B,OAASA,GACa,OAAlBvB,KACCG,EAAoBvE,gBAM7BuE,EAAoB0B,iBAAmB,WAGnC,OAAQ50C,EAAkBP,oBACkC,IAAxDO,EAAkBhB,IAAI,+BAE9Bk0C,EAAoBz0C,UAAUqwC,sBAAwB,WAClD9uC,EAAkBZ,OAAO,+BAE7B8zC,EAAoBz0C,UAAUo2C,aAAe,SAAU3xC,GAEnD,GADA3E,KAAK60C,OAAOnuC,KAAK/B,GACb3E,KAAK60C,OAAOhyC,SAAW7C,KAAK80C,YAAa,CACzC,IAAIyB,EAAWv2C,KAAK60C,OAAOzsC,KAAK,IAChCpI,KAAK60C,OAAS,KACd,IAAI2B,EAAW72C,EAAKiB,SAAS21C,GAE7Bv2C,KAAKuuC,UAAUiI,KAOvB7B,EAAoBz0C,UAAUu2C,qBAAuB,SAAUC,GAC3D12C,KAAK80C,YAAc4B,EACnB12C,KAAK60C,OAAS,IAQlBF,EAAoBz0C,UAAUy2C,mBAAqB,SAAUhyC,GAIzD,GAHAhF,EAAK8D,OAAuB,OAAhBzD,KAAK60C,OAAiB,kCAG9BlwC,EAAK9B,QAAU,EAAG,CAClB,IAAI6zC,EAAa9xC,OAAOD,GACxB,IAAKiyC,MAAMF,GAEP,OADA12C,KAAKy2C,qBAAqBC,GACnB,KAIf,OADA12C,KAAKy2C,qBAAqB,GACnB9xC,GAMXgwC,EAAoBz0C,UAAU41C,oBAAsB,SAAUe,GAC1D,GAAoB,OAAhB72C,KAAKy1C,OAAT,CAGA,IAAI9wC,EAAOkyC,EAAK,QAIhB,GAHA72C,KAAKiuC,eAAiBtpC,EAAK9B,OAC3B7C,KAAKouC,OAAOzG,iBAAiB,iBAAkBhjC,EAAK9B,QACpD7C,KAAK82C,iBACe,OAAhB92C,KAAK60C,OAEL70C,KAAKs2C,aAAa3xC,OAEjB,CAED,IAAIoyC,EAAgB/2C,KAAK22C,mBAAmBhyC,GACtB,OAAlBoyC,GACA/2C,KAAKs2C,aAAaS,MAQ9BpC,EAAoBz0C,UAAU0wC,KAAO,SAAUjsC,GAC3C3E,KAAK82C,iBACL,IAAIjG,EAAUlxC,EAAKa,UAAUmE,GAC7B3E,KAAKguC,WAAa6C,EAAQhuC,OAC1B7C,KAAKouC,OAAOzG,iBAAiB,aAAckJ,EAAQhuC,QAGnD,IAAIkE,EAAWH,EAAkBiqC,EAASyD,IAEtCvtC,EAASlE,OAAS,GAClB7C,KAAKg3C,YAAY/rC,OAAOlE,EAASlE,SAGrC,IAAK,IAAIE,EAAI,EAAGA,EAAIgE,EAASlE,OAAQE,IACjC/C,KAAKg3C,YAAYjwC,EAAShE,KAGlC4xC,EAAoBz0C,UAAUswC,UAAY,WACtCxwC,KAAK4uC,WAAY,EACb5uC,KAAK40C,iBACLqC,cAAcj3C,KAAK40C,gBACnB50C,KAAK40C,eAAiB,MAEtB50C,KAAKy1C,SACLz1C,KAAKy1C,OAAOhF,QACZzwC,KAAKy1C,OAAS,OAGtBd,EAAoBz0C,UAAU4uC,UAAY,WACjC9uC,KAAK4uC,YACN5uC,KAAKmuC,KAAK,+BACVnuC,KAAKwwC,YAEDxwC,KAAKwuC,eACLxuC,KAAKwuC,aAAaxuC,KAAKkuC,gBACvBluC,KAAKwuC,aAAe,QAQhCmG,EAAoBz0C,UAAUuwC,MAAQ,WAC7BzwC,KAAK4uC,YACN5uC,KAAKmuC,KAAK,6BACVnuC,KAAKwwC,cAObmE,EAAoBz0C,UAAU42C,eAAiB,WAC3C,IAAI/2B,EAAQ/f,KACZi3C,cAAcj3C,KAAK40C,gBACnB50C,KAAK40C,eAAiBsC,aAAY,WAE1Bn3B,EAAM01B,QACN11B,EAAMi3B,YAAY,KAEtBj3B,EAAM+2B,mBAEPtxC,KAAKC,MAAM8uC,MAQlBI,EAAoBz0C,UAAU82C,YAAc,SAAUh1C,GAIlD,IACIhC,KAAKy1C,OAAO7E,KAAK5uC,GAErB,MAAOR,GACHxB,KAAKmuC,KAAK,0CAA2C3sC,EAAEsB,SAAWtB,EAAEmD,KAAM,uBAC1EY,WAAWvF,KAAK8uC,UAAUhrC,KAAK9D,MAAO,KAO9C20C,EAAoBwC,6BAA+B,EAKnDxC,EAAoByC,eAAiB,IAC9BzC,EAzT6B,GAoVpC0C,GAAkC,WAIlC,SAASA,EAAiBtmC,GACtB/Q,KAAKs3C,gBAAgBvmC,GAyEzB,OAvEA1R,OAAOC,eAAe+3C,EAAkB,iBAAkB,CAKtD52C,IAAK,WACD,MAAO,CAACktC,GAAuBgH,KAEnCnqC,YAAY,EACZC,cAAc,IAMlB4sC,EAAiBn3C,UAAUo3C,gBAAkB,SAAUvmC,GACnD,IAAIrB,EAAKC,EACL4nC,EAAwB5C,IAAuBA,GAAoB,iBACnE6C,EAAuBD,IAA0B5C,GAAoB0B,mBAOzE,GANItlC,EAAS7C,gBACJqpC,GACDlzC,EAAK,mFAETmzC,GAAuB,GAEvBA,EACAx3C,KAAKy3C,YAAc,CAAC9C,QAEnB,CACD,IAAI+C,EAAc13C,KAAKy3C,YAAc,GACrC,IACI,IAAK,IAAI3nC,EAAKpQ,EAAMqQ,SAASsnC,EAAiBM,gBAAiB3nC,EAAKF,EAAGG,QAASD,EAAGE,KAAMF,EAAKF,EAAGG,OAAQ,CACrG,IAAI2nC,EAAY5nC,EAAGxQ,MACfo4C,GAAaA,EAAU,kBACvBF,EAAWhxC,KAAKkxC,IAI5B,MAAOvnC,GAASX,EAAM,CAAExL,MAAOmM,GAC/B,QACI,IACQL,IAAOA,EAAGE,OAASP,EAAKG,EAAGQ,SAASX,EAAGY,KAAKT,GAEpD,QAAU,GAAIJ,EAAK,MAAMA,EAAIxL,UAQzCmzC,EAAiBn3C,UAAU23C,iBAAmB,WAC1C,GAAI73C,KAAKy3C,YAAY50C,OAAS,EAC1B,OAAO7C,KAAKy3C,YAAY,GAGxB,MAAM,IAAIrzC,MAAM,4BAOxBizC,EAAiBn3C,UAAU43C,iBAAmB,WAC1C,OAAI93C,KAAKy3C,YAAY50C,OAAS,EACnB7C,KAAKy3C,YAAY,GAGjB,MAGRJ,EA9E0B,GAkGjCU,GAAkB,IAGlBC,GAAsC,IAItCC,GAA8B,MAC9BC,GAAkC,OAClCC,GAAe,IACfC,GAAe,IACfC,GAAmB,IACnBC,GAAgB,IAChBC,GAAgB,IAChBC,GAAe,IACfC,GAAa,IACbC,GAAmB,IACnBC,GAAO,IACPC,GAAe,IAOfC,GAA4B,WAW5B,SAASA,EAAW/2C,EAAIg3C,EAAWC,EAAgBnN,EAAYoN,EAAUtK,EAAeuK,EAASlL,GAC7F/tC,KAAK8B,GAAKA,EACV9B,KAAK84C,UAAYA,EACjB94C,KAAK+4C,eAAiBA,EACtB/4C,KAAK4rC,WAAaA,EAClB5rC,KAAKg5C,SAAWA,EAChBh5C,KAAK0uC,cAAgBA,EACrB1uC,KAAKi5C,QAAUA,EACfj5C,KAAK+tC,cAAgBA,EACrB/tC,KAAKk5C,gBAAkB,EACvBl5C,KAAKm5C,oBAAsB,GAC3Bn5C,KAAKo5C,OAAS,EACdp5C,KAAKmuC,KAAOpqC,EAAW,KAAO/D,KAAK8B,GAAK,KACxC9B,KAAKq5C,kBAAoB,IAAIhC,GAAiByB,GAC9C94C,KAAKmuC,KAAK,sBACVnuC,KAAKs5C,SAkaT,OA5ZAT,EAAW34C,UAAUo5C,OAAS,WAC1B,IAAIv5B,EAAQ/f,KACRu5C,EAAOv5C,KAAKq5C,kBAAkBxB,mBAClC73C,KAAKw5C,MAAQ,IAAID,EAAKv5C,KAAKy5C,mBAAoBz5C,KAAK84C,UAAW94C,KAAK+4C,oBAAgB3mC,EAAWpS,KAAK+tC,eAGpG/tC,KAAK05C,0BAA4BH,EAAK,iCAAmC,EACzE,IAAII,EAAoB35C,KAAK45C,cAAc55C,KAAKw5C,OAC5CK,EAAmB75C,KAAK85C,iBAAiB95C,KAAKw5C,OAClDx5C,KAAK+5C,IAAM/5C,KAAKw5C,MAChBx5C,KAAKg6C,IAAMh6C,KAAKw5C,MAChBx5C,KAAKi6C,eAAiB,KACtBj6C,KAAKk6C,YAAa,EAOlB30C,YAAW,WAEPwa,EAAMy5B,OAASz5B,EAAMy5B,MAAMlL,KAAKqL,EAAmBE,KACpDr0C,KAAKC,MAAM,IACd,IAAI00C,EAAmBZ,EAAK,mBAAqB,EAC7CY,EAAmB,IACnBn6C,KAAKo6C,gBAAkBtwC,GAAsB,WACzCiW,EAAMq6B,gBAAkB,KACnBr6B,EAAMm6B,aACHn6B,EAAMy5B,OACNz5B,EAAMy5B,MAAMvL,cAAgBiK,IAC5Bn4B,EAAMouB,KAAK,wDACPpuB,EAAMy5B,MAAMvL,cACZ,wCACJluB,EAAMm6B,YAAa,EACnBn6B,EAAMy5B,MAAMjJ,yBAEPxwB,EAAMy5B,OACXz5B,EAAMy5B,MAAMxL,UAAYiK,GACxBl4B,EAAMouB,KAAK,oDACPpuB,EAAMy5B,MAAMxL,UACZ,uCAKJjuB,EAAMouB,KAAK,+CACXpuB,EAAM0wB,YAIfjrC,KAAKC,MAAM00C,MAOtBtB,EAAW34C,UAAUu5C,iBAAmB,WACpC,MAAO,KAAOz5C,KAAK8B,GAAK,IAAM9B,KAAKk5C,mBAEvCL,EAAW34C,UAAU45C,iBAAmB,SAAUP,GAC9C,IAAIx5B,EAAQ/f,KACZ,OAAO,SAAUq6C,GACTd,IAASx5B,EAAMy5B,MACfz5B,EAAMu6B,kBAAkBD,GAEnBd,IAASx5B,EAAMk6B,gBACpBl6B,EAAMouB,KAAK,8BACXpuB,EAAMw6B,8BAGNx6B,EAAMouB,KAAK,+BAIvB0K,EAAW34C,UAAU05C,cAAgB,SAAUL,GAC3C,IAAIx5B,EAAQ/f,KACZ,OAAO,SAAU8C,GACQ,IAAjBid,EAAMq5B,SACFG,IAASx5B,EAAMi6B,IACfj6B,EAAMy6B,0BAA0B13C,GAE3By2C,IAASx5B,EAAMk6B,eACpBl6B,EAAM06B,4BAA4B33C,GAGlCid,EAAMouB,KAAK,gCAS3B0K,EAAW34C,UAAUw6C,YAAc,SAAUC,GAEzC,IAAIC,EAAM,CAAEC,EAAG,IAAKhI,EAAG8H,GACvB36C,KAAK86C,UAAUF,IAEnB/B,EAAW34C,UAAU66C,qBAAuB,WACpC/6C,KAAK+5C,MAAQ/5C,KAAKi6C,gBAAkBj6C,KAAKg6C,MAAQh6C,KAAKi6C,iBACtDj6C,KAAKmuC,KAAK,2CAA6CnuC,KAAKi6C,eAAerM,QAC3E5tC,KAAKw5C,MAAQx5C,KAAKi6C,eAClBj6C,KAAKi6C,eAAiB,OAI9BpB,EAAW34C,UAAU86C,oBAAsB,SAAUC,GACjD,GAAI9C,MAAgB8C,EAAa,CAC7B,IAAIC,EAAMD,EAAY9C,IAClB+C,IAAQzC,GACRz4C,KAAKm7C,6BAEAD,IAAQ5C,IAEbt4C,KAAKmuC,KAAK,wCACVnuC,KAAKi6C,eAAexJ,QAEhBzwC,KAAK+5C,MAAQ/5C,KAAKi6C,gBAClBj6C,KAAKg6C,MAAQh6C,KAAKi6C,gBAClBj6C,KAAKywC,SAGJyK,IAAQ1C,KACbx4C,KAAKmuC,KAAK,0BACVnuC,KAAKo7C,8BACLp7C,KAAKm7C,gCAIjBtC,EAAW34C,UAAUu6C,4BAA8B,SAAUY,GACzD,IAAIC,EAAQj1C,EAAW,IAAKg1C,GACxB12C,EAAO0B,EAAW,IAAKg1C,GAC3B,GAAc,MAAVC,EACAt7C,KAAKg7C,oBAAoBr2C,OAExB,IAAc,MAAV22C,EAKL,MAAM,IAAIl3C,MAAM,2BAA6Bk3C,GAH7Ct7C,KAAKm5C,oBAAoBzyC,KAAK/B,KAMtCk0C,EAAW34C,UAAUi7C,2BAA6B,WAC1Cn7C,KAAKo7C,6BAA+B,GACpCp7C,KAAKmuC,KAAK,oCACVnuC,KAAKk6C,YAAa,EAClBl6C,KAAKi6C,eAAe1J,wBACpBvwC,KAAKu7C,wBAILv7C,KAAKmuC,KAAK,8BACVnuC,KAAKi6C,eAAerJ,KAAK,CAAEiK,EAAG,IAAKhI,EAAG,CAAEgI,EAAGlC,GAAM9F,EAAG,QAG5DgG,EAAW34C,UAAUq7C,oBAAsB,WAEvCv7C,KAAKi6C,eAAenK,QAEpB9vC,KAAKmuC,KAAK,mCACVnuC,KAAKi6C,eAAerJ,KAAK,CAAEiK,EAAG,IAAKhI,EAAG,CAAEgI,EAAGpC,GAAY5F,EAAG,MAG1D7yC,KAAKmuC,KAAK,kCACVnuC,KAAKw5C,MAAM5I,KAAK,CAAEiK,EAAG,IAAKhI,EAAG,CAAEgI,EAAGnC,GAAkB7F,EAAG,MACvD7yC,KAAK+5C,IAAM/5C,KAAKi6C,eAChBj6C,KAAK+6C,wBAETlC,EAAW34C,UAAUs6C,0BAA4B,SAAUa,GAEvD,IAAIC,EAAQj1C,EAAW,IAAKg1C,GACxB12C,EAAO0B,EAAW,IAAKg1C,GACb,MAAVC,EACAt7C,KAAKw7C,WAAW72C,GAED,MAAV22C,GACLt7C,KAAKy7C,eAAe92C,IAG5Bk0C,EAAW34C,UAAUu7C,eAAiB,SAAU34C,GAC5C9C,KAAK07C,qBAEL17C,KAAK4rC,WAAW9oC,IAEpB+1C,EAAW34C,UAAUw7C,mBAAqB,WACjC17C,KAAKk6C,aACNl6C,KAAK05C,4BACD15C,KAAK05C,2BAA6B,IAClC15C,KAAKmuC,KAAK,kCACVnuC,KAAKk6C,YAAa,EAClBl6C,KAAKw5C,MAAMjJ,2BAIvBsI,EAAW34C,UAAUs7C,WAAa,SAAUP,GACxC,IAAIC,EAAM70C,EAAW8xC,GAAc8C,GACnC,GAAI7C,MAAgB6C,EAAa,CAC7B,IAAIU,EAAUV,EAAY7C,IAC1B,GAAI8C,IAAQtC,GACR54C,KAAK47C,aAAaD,QAEjB,GAAIT,IAAQxC,GAAkB,CAC/B14C,KAAKmuC,KAAK,qCACVnuC,KAAKg6C,IAAMh6C,KAAKi6C,eAChB,IAAK,IAAIl3C,EAAI,EAAGA,EAAI/C,KAAKm5C,oBAAoBt2C,SAAUE,EACnD/C,KAAKy7C,eAAez7C,KAAKm5C,oBAAoBp2C,IAEjD/C,KAAKm5C,oBAAsB,GAC3Bn5C,KAAK+6C,4BAEAG,IAAQ7C,GAGbr4C,KAAK67C,sBAAsBF,GAEtBT,IAAQ5C,GAEbt4C,KAAK87C,SAASH,GAETT,IAAQ3C,GACbr0C,EAAM,iBAAmBy3C,GAEpBT,IAAQ1C,IACbx4C,KAAKmuC,KAAK,wBACVnuC,KAAK07C,qBACL17C,KAAK+7C,iCAGL73C,EAAM,mCAAqCg3C,KASvDrC,EAAW34C,UAAU07C,aAAe,SAAUI,GAC1C,IAAIC,EAAYD,EAAU/I,GACtBoB,EAAU2H,EAAU30C,EACpB0G,EAAOiuC,EAAUE,EACrBl8C,KAAKm8C,UAAYH,EAAU10C,EAC3BtH,KAAK84C,UAAUnqC,WAAWZ,GAEN,IAAhB/N,KAAKo5C,SACLp5C,KAAKw5C,MAAM1J,QACX9vC,KAAKo8C,yBAAyBp8C,KAAKw5C,MAAOyC,GACtC7uC,IAAqBinC,GACrBhwC,EAAK,sCAGTrE,KAAKq8C,qBAGbxD,EAAW34C,UAAUm8C,iBAAmB,WACpC,IAAI9C,EAAOv5C,KAAKq5C,kBAAkBvB,mBAC9ByB,GACAv5C,KAAKs8C,cAAc/C,IAG3BV,EAAW34C,UAAUo8C,cAAgB,SAAU/C,GAC3C,IAAIx5B,EAAQ/f,KACZA,KAAKi6C,eAAiB,IAAIV,EAAKv5C,KAAKy5C,mBAAoBz5C,KAAK84C,UAAW94C,KAAK+4C,eAAgB/4C,KAAKm8C,WAGlGn8C,KAAKo7C,4BACD7B,EAAK,iCAAmC,EAC5C,IAAIhL,EAAYvuC,KAAK45C,cAAc55C,KAAKi6C,gBACpCzL,EAAexuC,KAAK85C,iBAAiB95C,KAAKi6C,gBAC9Cj6C,KAAKi6C,eAAe3L,KAAKC,EAAWC,GAEpC1kC,GAAsB,WACdiW,EAAMk6B,iBACNl6B,EAAMouB,KAAK,gCACXpuB,EAAMk6B,eAAexJ,WAE1BjrC,KAAKC,MAAMsyC,MAElBc,EAAW34C,UAAU47C,SAAW,SAAU/tC,GACtC/N,KAAKmuC,KAAK,qCAAuCpgC,GACjD/N,KAAK84C,UAAUnqC,WAAWZ,GAGN,IAAhB/N,KAAKo5C,OACLp5C,KAAKywC,SAILzwC,KAAKu8C,oBACLv8C,KAAKs5C,WAGbT,EAAW34C,UAAUk8C,yBAA2B,SAAU7C,EAAM0C,GAC5D,IAAIl8B,EAAQ/f,KACZA,KAAKmuC,KAAK,oCACVnuC,KAAKw5C,MAAQD,EACbv5C,KAAKo5C,OAAS,EACVp5C,KAAKg5C,WACLh5C,KAAKg5C,SAASiD,EAAWj8C,KAAKm8C,WAC9Bn8C,KAAKg5C,SAAW,MAImB,IAAnCh5C,KAAK05C,2BACL15C,KAAKmuC,KAAK,kCACVnuC,KAAKk6C,YAAa,GAGlBpwC,GAAsB,WAClBiW,EAAMg8B,kCACPv2C,KAAKC,MAAMuyC,MAGtBa,EAAW34C,UAAU67C,8BAAgC,WAE5C/7C,KAAKk6C,YAA8B,IAAhBl6C,KAAKo5C,SACzBp5C,KAAKmuC,KAAK,4BACVnuC,KAAK86C,UAAU,CAAED,EAAG,IAAKhI,EAAG,CAAEgI,EAAGlC,GAAM9F,EAAG,QAGlDgG,EAAW34C,UAAUq6C,2BAA6B,WAC9C,IAAIhB,EAAOv5C,KAAKi6C,eAChBj6C,KAAKi6C,eAAiB,KAClBj6C,KAAK+5C,MAAQR,GAAQv5C,KAAKg6C,MAAQT,GAElCv5C,KAAKywC,SASboI,EAAW34C,UAAUo6C,kBAAoB,SAAUD,GAC/Cr6C,KAAKw5C,MAAQ,KAGRa,GAAiC,IAAhBr6C,KAAKo5C,OASF,IAAhBp5C,KAAKo5C,QACVp5C,KAAKmuC,KAAK,8BATVnuC,KAAKmuC,KAAK,+BAENnuC,KAAK84C,UAAUrqC,oBACfhN,EAAkBZ,OAAO,QAAUb,KAAK84C,UAAU/qC,MAElD/N,KAAK84C,UAAUxqC,aAAetO,KAAK84C,UAAU/qC,OAMrD/N,KAAKywC,SAOToI,EAAW34C,UAAU27C,sBAAwB,SAAU1yC,GACnDnJ,KAAKmuC,KAAK,0DACNnuC,KAAKi5C,UACLj5C,KAAKi5C,QAAQ9vC,GACbnJ,KAAKi5C,QAAU,MAInBj5C,KAAK0uC,cAAgB,KACrB1uC,KAAKywC,SAEToI,EAAW34C,UAAU46C,UAAY,SAAUn2C,GACvC,GAAoB,IAAhB3E,KAAKo5C,OACL,KAAM,8BAGNp5C,KAAK+5C,IAAInJ,KAAKjsC,IAMtBk0C,EAAW34C,UAAUuwC,MAAQ,WACL,IAAhBzwC,KAAKo5C,SACLp5C,KAAKmuC,KAAK,gCACVnuC,KAAKo5C,OAAS,EACdp5C,KAAKu8C,oBACDv8C,KAAK0uC,gBACL1uC,KAAK0uC,gBACL1uC,KAAK0uC,cAAgB,QAQjCmK,EAAW34C,UAAUq8C,kBAAoB,WACrCv8C,KAAKmuC,KAAK,iCACNnuC,KAAKw5C,QACLx5C,KAAKw5C,MAAM/I,QACXzwC,KAAKw5C,MAAQ,MAEbx5C,KAAKi6C,iBACLj6C,KAAKi6C,eAAexJ,QACpBzwC,KAAKi6C,eAAiB,MAEtBj6C,KAAKo6C,kBACL9K,aAAatvC,KAAKo6C,iBAClBp6C,KAAKo6C,gBAAkB,OAGxBvB,EA5boB,GAqd3B2D,GAA+B,WAC/B,SAASA,KA0CT,OAlCAA,EAAct8C,UAAUu8C,IAAM,SAAU3xC,EAAYnG,EAAMiP,EAAYiF,KAOtE2jC,EAAct8C,UAAUg2B,MAAQ,SAAUprB,EAAYnG,EAAMiP,EAAYiF,KAKxE2jC,EAAct8C,UAAUw8C,iBAAmB,SAAUC,KAMrDH,EAAct8C,UAAU08C,gBAAkB,SAAU9xC,EAAYnG,EAAMiP,KAMtE4oC,EAAct8C,UAAU28C,kBAAoB,SAAU/xC,EAAYnG,EAAMiP,KAKxE4oC,EAAct8C,UAAU+T,mBAAqB,SAAUnJ,EAAY8I,KAInE4oC,EAAct8C,UAAUqpC,YAAc,SAAUH,KACzCoT,EA3CuB,GA8D9BM,GAAsB,IACtBC,GAA8B,IAC9BC,GAAiC,IACjCC,GAA6B,IAC7BC,GAAgC,IAChCC,GAA+B,cAE/BC,GAA+B,EAO/BC,GAAsC,SAAUjnC,GAQhD,SAASinC,EAAqBvE,EAAWC,EAAgBuE,EAAeC,EAAkBC,EAAqBC,EAAoBC,GAC/H,IAAI39B,EAAQ3J,EAAO7F,KAAKvQ,OAASA,KAkCjC,GAjCA+f,EAAM+4B,UAAYA,EAClB/4B,EAAMg5B,eAAiBA,EACvBh5B,EAAMu9B,cAAgBA,EACtBv9B,EAAMw9B,iBAAmBA,EACzBx9B,EAAMy9B,oBAAsBA,EAC5Bz9B,EAAM09B,mBAAqBA,EAC3B19B,EAAM29B,cAAgBA,EAEtB39B,EAAMje,GAAKu7C,EAAqBM,8BAChC59B,EAAMouB,KAAOpqC,EAAW,KAAOgc,EAAMje,GAAK,KAC1Cie,EAAM69B,kBAAoB,GAE1B79B,EAAM89B,QAAU,IAAI7wB,IACpBjN,EAAM+9B,iBAAmB,GACzB/9B,EAAMg+B,qBAAuB,EAC7Bh+B,EAAMi+B,0BAA4B,GAClCj+B,EAAMk+B,YAAa,EACnBl+B,EAAMm+B,gBAAkBpB,GACxB/8B,EAAMo+B,mBAAqBpB,GAC3Bh9B,EAAMq+B,uBAAyB,KAC/Br+B,EAAMguB,cAAgB,KACtBhuB,EAAMs+B,0BAA4B,KAClCt+B,EAAMsrB,UAAW,EAEjBtrB,EAAMu+B,eAAiB,GACvBv+B,EAAMw+B,eAAiB,EACvBx+B,EAAMy+B,UAAY,KAClBz+B,EAAM0+B,WAAa,KACnB1+B,EAAM2+B,oBAAqB,EAC3B3+B,EAAM4+B,uBAAyB,EAC/B5+B,EAAM6+B,kBAAmB,EACzB7+B,EAAM8+B,2BAA6B,KACnC9+B,EAAM++B,+BAAiC,KACnCpB,IAAkB/9C,EAAKsF,YACvB,MAAM,IAAIb,MAAM,kFAOpB,OALA2b,EAAMg/B,iBAAiB,GACvB7T,GAAkBI,cAAcjjB,GAAG,UAAWtI,EAAMi/B,WAAYj/B,IACrB,IAAvC+4B,EAAU/qC,KAAKtJ,QAAQ,YACvB8mC,GAAcD,cAAcjjB,GAAG,SAAUtI,EAAMk/B,UAAWl/B,GAEvDA,EAgqBX,OAltBArgB,EAAM2W,UAAUgnC,EAAsBjnC,GAoDtCinC,EAAqBn9C,UAAUw6C,YAAc,SAAUhiC,EAAQpT,EAAM45C,GACjE,IAAIC,IAAcn/C,KAAKu+C,eACnB3D,EAAM,CAAEnY,EAAG0c,EAAWp5C,EAAG2S,EAAQ1S,EAAGV,GACxCtF,KAAKmuC,KAAKxuC,EAAKa,UAAUo6C,IACzBj7C,EAAK8D,OAAOzD,KAAKi+C,WAAY,0DAC7Bj+C,KAAKw+C,UAAU9D,YAAYE,GACvBsE,IACAl/C,KAAKs+C,eAAea,GAAaD,IAMzC7B,EAAqBn9C,UAAUk/C,OAAS,SAAUl2C,EAAOm2C,EAAe/c,EAAK1uB,GACzE,IAAIwa,EAAUllB,EAAM2hB,kBAChB/f,EAAa5B,EAAME,KAAKrI,WAC5Bf,KAAKmuC,KAAK,qBAAuBrjC,EAAa,IAAMsjB,GAC/CpuB,KAAK69C,QAAQzwB,IAAItiB,IAClB9K,KAAK69C,QAAQ19C,IAAI2K,EAAY,IAAIkiB,KAErCrtB,EAAK8D,OAAOyF,EAAMwc,iBAAiB4f,cAC9Bp8B,EAAMwc,iBAAiBuV,eAAgB,sDAC5Ct7B,EAAK8D,QAAQzD,KAAK69C,QAAQp9C,IAAIqK,GAAYsiB,IAAIgB,GAAU,gDACxD,IAAIkxB,EAAa,CACb1rC,WAAYA,EACZywB,OAAQgb,EACRn2C,MAAOA,EACPo5B,IAAKA,GAETtiC,KAAK69C,QAAQp9C,IAAIqK,GAAY3K,IAAIiuB,EAASkxB,GACtCt/C,KAAKi+C,YACLj+C,KAAKu/C,YAAYD,IAGzBjC,EAAqBn9C,UAAUq/C,YAAc,SAAUD,GACnD,IAAIv/B,EAAQ/f,KACRkJ,EAAQo2C,EAAWp2C,MACnB4B,EAAa5B,EAAME,KAAKrI,WACxBqtB,EAAUllB,EAAM2hB,kBACpB7qB,KAAKmuC,KAAK,aAAerjC,EAAa,QAAUsjB,GAChD,IAAIoxB,EAAM,CAAWC,EAAG30C,GACpB4N,EAAS,IAET4mC,EAAWhd,MACXkd,EAAI,KAAOt2C,EAAMyhB,cACjB60B,EAAI,KAAOF,EAAWhd,KAE1Bkd,EAAa,KAAOF,EAAWjb,SAC/BrkC,KAAK06C,YAAYhiC,EAAQ8mC,GAAK,SAAU18C,GACpC,IAAI64C,EAAU74C,EAAiB,KAC3B6iC,EAAS7iC,EAAmB,KAEhCu6C,EAAqBqC,sBAAsB/D,EAASzyC,GACpD,IAAIy2C,EAAoB5/B,EAAM89B,QAAQp9C,IAAIqK,IACtCiV,EAAM89B,QAAQp9C,IAAIqK,GAAYrK,IAAI2tB,GAElCuxB,IAAsBL,IACtBv/B,EAAMouB,KAAK,kBAAmBrrC,GACf,OAAX6iC,GACA5lB,EAAM6/B,cAAc90C,EAAYsjB,GAEhCkxB,EAAW1rC,YACX0rC,EAAW1rC,WAAW+xB,EAAQgW,QAK9C0B,EAAqBqC,sBAAwB,SAAU/D,EAASzyC,GAC5D,GAAIyyC,GAA8B,kBAAZA,GAAwBh8C,EAAKwB,SAASw6C,EAAS,KAAM,CAEvE,IAAIkE,EAAWlgD,EAAKuf,QAAQy8B,EAAS,KACrC,GAAI14C,MAAMC,QAAQ28C,KAAcA,EAASp7C,QAAQ,YAAa,CAC1D,IAAIq7C,EAAY,gBACZ52C,EACKwc,iBACAC,WACA5kB,WACL,IACAg/C,EAAY72C,EAAME,KAAKrI,WAC3BsD,EAAK,wGAC6Cy7C,EAAY,OACzDC,EAAY,sDAO7B1C,EAAqBn9C,UAAUw8C,iBAAmB,SAAUC,GACxD38C,KAAKy+C,WAAa9B,EAClB38C,KAAKmuC,KAAK,wBACNnuC,KAAKy+C,WACLz+C,KAAKggD,UAKDhgD,KAAKi+C,YACLj+C,KAAK06C,YAAY,SAAU,IAAI,eAGvC16C,KAAKigD,uCAAuCtD,IAEhDU,EAAqBn9C,UAAU+/C,uCAAyC,SAAUC,GAG9E,IAAIC,EAAmBD,GAAoC,KAAtBA,EAAWr9C,QAC5Cs9C,GAAoBxgD,EAAKygD,QAAQF,MACjClgD,KAAKmuC,KAAK,iEACVnuC,KAAKm+C,mBAAqBnB,KAOlCK,EAAqBn9C,UAAU8/C,QAAU,WACrC,IAAIjgC,EAAQ/f,KACZ,GAAIA,KAAKi+C,YAAcj+C,KAAKy+C,WAAY,CACpC,IAAI4B,EAAUrgD,KAAKy+C,WACf6B,EAAa3gD,EAAK4gD,cAAcF,GAAW,OAAS,QACpDG,EAAc,CAAEC,KAAMJ,GACC,OAAvBrgD,KAAK09C,cACL8C,EAAY,WAAY,EAEW,kBAAvBxgD,KAAK09C,gBACjB8C,EAAY,WAAaxgD,KAAK09C,eAElC19C,KAAK06C,YAAY4F,EAAYE,GAAa,SAAUE,GAChD,IAAI/a,EAAS+a,EAAe,KACxB/7C,EAAO+7C,EAAa,MAAQ,QAC5B3gC,EAAM0+B,aAAe4B,IACN,OAAX1a,EACA5lB,EAAM4+B,uBAAyB,EAI/B5+B,EAAM4gC,eAAehb,EAAQhhC,SASjD04C,EAAqBn9C,UAAU0gD,SAAW,SAAU13C,EAAOo5B,GACvD,IAAIx3B,EAAa5B,EAAME,KAAKrI,WACxBqtB,EAAUllB,EAAM2hB,kBACpB7qB,KAAKmuC,KAAK,uBAAyBrjC,EAAa,IAAMsjB,GACtDzuB,EAAK8D,OAAOyF,EAAMwc,iBAAiB4f,cAC9Bp8B,EAAMwc,iBAAiBuV,eAAgB,wDAC5C,IAAImkB,EAASp/C,KAAK4/C,cAAc90C,EAAYsjB,GACxCgxB,GAAUp/C,KAAKi+C,YACfj+C,KAAK6gD,cAAc/1C,EAAYsjB,EAASllB,EAAMyhB,cAAe2X,IAGrE+a,EAAqBn9C,UAAU2gD,cAAgB,SAAU/1C,EAAYsjB,EAAS0yB,EAAUxe,GACpFtiC,KAAKmuC,KAAK,eAAiBrjC,EAAa,QAAUsjB,GAClD,IAAIoxB,EAAM,CAAWC,EAAG30C,GACpB4N,EAAS,IAET4pB,IACAkd,EAAI,KAAOsB,EACXtB,EAAI,KAAOld,GAEftiC,KAAK06C,YAAYhiC,EAAQ8mC,IAK7BnC,EAAqBn9C,UAAU08C,gBAAkB,SAAU9xC,EAAYnG,EAAMiP,GACrE5T,KAAKi+C,WACLj+C,KAAK+gD,kBAAkB,IAAKj2C,EAAYnG,EAAMiP,GAG9C5T,KAAKg+C,0BAA0Bt3C,KAAK,CAChCoE,WAAYA,EACZ4N,OAAQ,IACR/T,KAAMA,EACNiP,WAAYA,KAOxBypC,EAAqBn9C,UAAU28C,kBAAoB,SAAU/xC,EAAYnG,EAAMiP,GACvE5T,KAAKi+C,WACLj+C,KAAK+gD,kBAAkB,KAAMj2C,EAAYnG,EAAMiP,GAG/C5T,KAAKg+C,0BAA0Bt3C,KAAK,CAChCoE,WAAYA,EACZ4N,OAAQ,KACR/T,KAAMA,EACNiP,WAAYA,KAOxBypC,EAAqBn9C,UAAU+T,mBAAqB,SAAUnJ,EAAY8I,GAClE5T,KAAKi+C,WACLj+C,KAAK+gD,kBAAkB,KAAMj2C,EAAY,KAAM8I,GAG/C5T,KAAKg+C,0BAA0Bt3C,KAAK,CAChCoE,WAAYA,EACZ4N,OAAQ,KACR/T,KAAM,KACNiP,WAAYA,KAIxBypC,EAAqBn9C,UAAU6gD,kBAAoB,SAAUroC,EAAQ5N,EAAYnG,EAAMiP,GACnF,IAAIotC,EAAU,CAAWvB,EAAG30C,EAAqB+nC,EAAGluC,GACpD3E,KAAKmuC,KAAK,gBAAkBz1B,EAAQsoC,GACpChhD,KAAK06C,YAAYhiC,EAAQsoC,GAAS,SAAUC,GACpCrtC,GACArO,YAAW,WACPqO,EAAWqtC,EAAoB,KAAMA,EAAoB,QAC1Dz7C,KAAKC,MAAM,QAO1B43C,EAAqBn9C,UAAUu8C,IAAM,SAAU3xC,EAAYnG,EAAMiP,EAAYiF,GACzE7Y,KAAKkhD,YAAY,IAAKp2C,EAAYnG,EAAMiP,EAAYiF,IAKxDwkC,EAAqBn9C,UAAUg2B,MAAQ,SAAUprB,EAAYnG,EAAMiP,EAAYiF,GAC3E7Y,KAAKkhD,YAAY,IAAKp2C,EAAYnG,EAAMiP,EAAYiF,IAExDwkC,EAAqBn9C,UAAUghD,YAAc,SAAUxoC,EAAQ5N,EAAYnG,EAAMiP,EAAYiF,GACzF,IAAImoC,EAAU,CACDvB,EAAG30C,EACH+nC,EAAGluC,QAEHyN,IAATyG,IACAmoC,EAAiB,KAAOnoC,GAG5B7Y,KAAK89C,iBAAiBp3C,KAAK,CACvBgS,OAAQA,EACRsoC,QAASA,EACTptC,WAAYA,IAEhB5T,KAAK+9C,uBACL,IAAItlC,EAAQzY,KAAK89C,iBAAiBj7C,OAAS,EACvC7C,KAAKi+C,WACLj+C,KAAKmhD,SAAS1oC,GAGdzY,KAAKmuC,KAAK,kBAAoBrjC,IAGtCuyC,EAAqBn9C,UAAUihD,SAAW,SAAU1oC,GAChD,IAAIsH,EAAQ/f,KACR0Y,EAAS1Y,KAAK89C,iBAAiBrlC,GAAOC,OACtCsoC,EAAUhhD,KAAK89C,iBAAiBrlC,GAAOuoC,QACvCptC,EAAa5T,KAAK89C,iBAAiBrlC,GAAO7E,WAC9C5T,KAAK89C,iBAAiBrlC,GAAO2oC,OAASphD,KAAKi+C,WAC3Cj+C,KAAK06C,YAAYhiC,EAAQsoC,GAAS,SAAUl+C,GACxCid,EAAMouB,KAAKz1B,EAAS,YAAa5V,UAC1Bid,EAAM+9B,iBAAiBrlC,GAC9BsH,EAAMg+B,uBAE6B,IAA/Bh+B,EAAMg+B,uBACNh+B,EAAM+9B,iBAAmB,IAEzBlqC,GACAA,EAAW9Q,EAAmB,KAAMA,EAAmB,UAOnEu6C,EAAqBn9C,UAAUqpC,YAAc,SAAUH,GACnD,IAAIrpB,EAAQ/f,KAEZ,GAAIA,KAAKi+C,WAAY,CACjB,IAAI+C,EAAU,CAAeh6C,EAAGoiC,GAChCppC,KAAKmuC,KAAK,cAAe6S,GACzBhhD,KAAK06C,YAAsB,IAAKsG,GAAS,SAAUxmC,GAC/C,IAAImrB,EAASnrB,EAAkB,KAC/B,GAAe,OAAXmrB,EAAiB,CACjB,IAAI0b,EAAc7mC,EAAkB,KACpCuF,EAAMouB,KAAK,cAAe,wBAA0BkT,SAKpEhE,EAAqBn9C,UAAUu7C,eAAiB,SAAU34C,GACtD,GAAI,MAAOA,EAAS,CAEhB9C,KAAKmuC,KAAK,gBAAkBxuC,EAAKa,UAAUsC,IAC3C,IAAIw+C,EAASx+C,EAAQ,KACjBo8C,EAAal/C,KAAKs+C,eAAegD,GACjCpC,WACOl/C,KAAKs+C,eAAegD,GAC3BpC,EAAWp8C,EAAiB,WAG/B,IAAI,UAAWA,EAChB,KAAM,qCAAuCA,EAAQ,SAEhD,MAAOA,GAEZ9C,KAAKuhD,YAAYz+C,EAAQ,KAAMA,EAAQ,QAG/Cu6C,EAAqBn9C,UAAUqhD,YAAc,SAAU7oC,EAAQpT,GAC3DtF,KAAKmuC,KAAK,sBAAuBz1B,EAAQpT,GAC1B,MAAXoT,EACA1Y,KAAKs9C,cAAch4C,EAAc,KAAMA,EAAc,MACzC,EAAOA,EAAK,MAER,MAAXoT,EACL1Y,KAAKs9C,cAAch4C,EAAc,KAAMA,EAAc,MACxC,EAAMA,EAAK,MAER,MAAXoT,EACL1Y,KAAKwhD,iBAAiBl8C,EAAc,KAAMA,EAAe,MAEzC,OAAXoT,EACL1Y,KAAK2gD,eAAer7C,EAAqB,KAAMA,EAAuB,MAEtD,OAAXoT,EACL1Y,KAAKyhD,uBAAuBn8C,GAG5BpB,EAAM,6CACFvE,EAAKa,UAAUkY,GACf,uCAGZ2kC,EAAqBn9C,UAAU84C,SAAW,SAAUiD,EAAWE,GAC3Dn8C,KAAKmuC,KAAK,oBACVnuC,KAAKi+C,YAAa,EAClBj+C,KAAK8+C,gCAAiC,IAAIpzB,MAAOC,UACjD3rB,KAAK0hD,iBAAiBzF,GACtBj8C,KAAK+tC,cAAgBoO,EACjBn8C,KAAK4+C,kBACL5+C,KAAK2hD,oBAET3hD,KAAK4hD,gBACL5hD,KAAK4+C,kBAAmB,EACxB5+C,KAAKu9C,kBAAiB,IAE1BF,EAAqBn9C,UAAU6+C,iBAAmB,SAAU/0C,GACxD,IAAI+V,EAAQ/f,KACZL,EAAK8D,QAAQzD,KAAKw+C,UAAW,0DACzBx+C,KAAKq+C,2BACL/O,aAAatvC,KAAKq+C,2BAItBr+C,KAAKq+C,0BAA4B94C,YAAW,WACxCwa,EAAMs+B,0BAA4B,KAClCt+B,EAAM8hC,yBAEPr8C,KAAKC,MAAMuE,KAElBqzC,EAAqBn9C,UAAU8+C,WAAa,SAAU/f,GAE9CA,IACCj/B,KAAKqrC,UACNrrC,KAAKk+C,kBAAoBl+C,KAAKm+C,qBAC9Bn+C,KAAKmuC,KAAK,2CACVnuC,KAAKk+C,gBAAkBpB,GAClB98C,KAAKw+C,WACNx+C,KAAK++C,iBAAiB,IAG9B/+C,KAAKqrC,SAAWpM,GAEpBoe,EAAqBn9C,UAAU++C,UAAY,SAAU6C,GAC7CA,GACA9hD,KAAKmuC,KAAK,wBACVnuC,KAAKk+C,gBAAkBpB,GAClB98C,KAAKw+C,WACNx+C,KAAK++C,iBAAiB,KAI1B/+C,KAAKmuC,KAAK,8CACNnuC,KAAKw+C,WACLx+C,KAAKw+C,UAAU/N,UAI3B4M,EAAqBn9C,UAAU6hD,sBAAwB,WAQnD,GAPA/hD,KAAKmuC,KAAK,4BACVnuC,KAAKi+C,YAAa,EAClBj+C,KAAKw+C,UAAY,KAEjBx+C,KAAKgiD,0BAELhiD,KAAKs+C,eAAiB,GAClBt+C,KAAKiiD,mBAAoB,CACzB,GAAKjiD,KAAKqrC,UAKL,GAAIrrC,KAAK8+C,+BAAgC,CAE1C,IAAIoD,GAAgC,IAAIx2B,MAAOC,UAAY3rB,KAAK8+C,+BAC5DoD,EAAgChF,KAChCl9C,KAAKk+C,gBAAkBpB,IAE3B98C,KAAK8+C,+BAAiC,WAVtC9+C,KAAKmuC,KAAK,8CACVnuC,KAAKk+C,gBAAkBl+C,KAAKm+C,mBAC5Bn+C,KAAK6+C,4BAA6B,IAAInzB,MAAOC,UAUjD,IAAIw2B,GAA8B,IAAIz2B,MAAOC,UAAY3rB,KAAK6+C,2BAC1DuD,EAAiB58C,KAAKoH,IAAI,EAAG5M,KAAKk+C,gBAAkBiE,GACxDC,EAAiB58C,KAAK6P,SAAW+sC,EACjCpiD,KAAKmuC,KAAK,0BAA4BiU,EAAiB,MACvDpiD,KAAK++C,iBAAiBqD,GAEtBpiD,KAAKk+C,gBAAkB14C,KAAKuC,IAAI/H,KAAKm+C,mBAAoBn+C,KAAKk+C,gBAAkBjB,IAEpFj9C,KAAKu9C,kBAAiB,IAE1BF,EAAqBn9C,UAAU2hD,qBAAuB,WAClD,GAAI7hD,KAAKiiD,mBAAoB,CACzBjiD,KAAKmuC,KAAK,+BACVnuC,KAAK6+C,4BAA6B,IAAInzB,MAAOC,UAC7C3rB,KAAK8+C,+BAAiC,KACtC,IAAIuD,EAAkBriD,KAAKy7C,eAAe33C,KAAK9D,MAC3CsiD,EAAYtiD,KAAKg5C,SAASl1C,KAAK9D,MAC/BuiD,EAAiBviD,KAAK+hD,sBAAsBj+C,KAAK9D,MACjDwiD,EAAWxiD,KAAK8B,GAAK,IAAMu7C,EAAqBoF,oBAChDj1B,EAASxtB,KACT0iD,EAAkB1iD,KAAK+tC,cACvB4U,GAAa,EACbC,EAAe,KACfC,EAAY,WACRD,EACAA,EAAanS,SAGbkS,GAAa,EACbJ,MAGJO,EAAgB,SAAUlI,GAC1Bj7C,EAAK8D,OAAOm/C,EAAc,0DAC1BA,EAAalI,YAAYE,IAE7B56C,KAAKw+C,UAAY,CACb/N,MAAOoS,EACPnI,YAAaoI,GAEjB,IAAI9b,EAAehnC,KAAK0+C,mBACxB1+C,KAAK0+C,oBAAqB,EAE1B1+C,KAAKy9C,mBACA1W,SAASC,GACTH,MAAK,SAAUrsB,GACXmoC,EAUD9+C,EAAI,0CATJA,EAAI,8CACJ2pB,EAAOixB,WAAajkC,GAAUA,EAAOuoC,YACrCH,EAAe,IAAI/J,GAAW2J,EAAUh1B,EAAOsrB,UAAWtrB,EAAOurB,eAAgBsJ,EAAiBC,EAAWC,GAC/F,SAAUp5C,GACpB9E,EAAK8E,EAAS,KAAOqkB,EAAOsrB,UAAU/3C,WAAa,KACnDysB,EAAOw1B,UAAU7F,MAClBuF,OAMN7b,KAAK,MAAM,SAAU3iC,GACtBspB,EAAO2gB,KAAK,wBAA0BjqC,GACjCy+C,IACGhjD,EAAKs1C,UAAUC,YAIf7wC,EAAKH,GAET2+C,UAKhBxF,EAAqBn9C,UAAU8iD,UAAY,SAAU75C,GACjDtF,EAAI,uCAAyCsF,GAC7CnJ,KAAK49C,kBAAkBz0C,IAAU,EAC7BnJ,KAAKw+C,UACLx+C,KAAKw+C,UAAU/N,SAGXzwC,KAAKq+C,4BACL/O,aAAatvC,KAAKq+C,2BAClBr+C,KAAKq+C,0BAA4B,MAEjCr+C,KAAKi+C,YACLj+C,KAAK+hD,0BAIjB1E,EAAqBn9C,UAAU+iD,OAAS,SAAU95C,GAC9CtF,EAAI,mCAAqCsF,UAClCnJ,KAAK49C,kBAAkBz0C,GAC1BxJ,EAAK8L,QAAQzL,KAAK49C,qBAClB59C,KAAKk+C,gBAAkBpB,GAClB98C,KAAKw+C,WACNx+C,KAAK++C,iBAAiB,KAIlC1B,EAAqBn9C,UAAUwhD,iBAAmB,SAAUzF,GACxD,IAAI5vB,EAAQ4vB,GAAY,IAAIvwB,MAAOC,UACnC3rB,KAAKw9C,oBAAoB,CAAE0F,iBAAkB72B,KAEjDgxB,EAAqBn9C,UAAU8hD,wBAA0B,WACrD,IAAK,IAAIj/C,EAAI,EAAGA,EAAI/C,KAAK89C,iBAAiBj7C,OAAQE,IAAK,CACnD,IAAI05C,EAAMz8C,KAAK89C,iBAAiB/6C,GAC5B05C,GAAgB,MAAOA,EAAIuE,SAAWvE,EAAI2E,SACtC3E,EAAI7oC,YACJ6oC,EAAI7oC,WAAW,qBAEZ5T,KAAK89C,iBAAiB/6C,GAC7B/C,KAAK+9C,wBAIqB,IAA9B/9C,KAAK+9C,uBACL/9C,KAAK89C,iBAAmB,KAGhCT,EAAqBn9C,UAAUshD,iBAAmB,SAAU12C,EAAY5B,GAEpE,IAAIklB,EAKAA,EAJCllB,EAISA,EAAM8W,KAAI,SAAUmjC,GAAK,OAAO58C,EAAkB48C,MAAO/6C,KAAK,KAH9D,UAKd,IAAIg3C,EAASp/C,KAAK4/C,cAAc90C,EAAYsjB,GACxCgxB,GAAUA,EAAOxrC,YACjBwrC,EAAOxrC,WAAW,sBAG1BypC,EAAqBn9C,UAAU0/C,cAAgB,SAAU90C,EAAYsjB,GACjE,IACIgxB,EADAgE,EAAuB,IAAIn5C,EAAKa,GAAY/J,WAEhD,GAAIf,KAAK69C,QAAQzwB,IAAIg2B,GAAuB,CACxC,IAAIpjC,EAAMhgB,KAAK69C,QAAQp9C,IAAI2iD,GAC3BhE,EAASp/B,EAAIvf,IAAI2tB,GACjBpO,EAAI2N,OAAOS,GACM,IAAbpO,EAAIkN,MACJltB,KAAK69C,QAAQlwB,OAAOy1B,QAKxBhE,OAAShtC,EAEb,OAAOgtC,GAEX/B,EAAqBn9C,UAAUygD,eAAiB,SAAU0C,EAAYC,GAClEz/C,EAAI,uBAAyBw/C,EAAa,IAAMC,GAChDtjD,KAAKy+C,WAAa,KAClBz+C,KAAK0+C,oBAAqB,EAC1B1+C,KAAKw+C,UAAU/N,QACI,kBAAf4S,GAAiD,sBAAfA,IAIlCrjD,KAAK2+C,yBACD3+C,KAAK2+C,wBAA0BvB,KAE/Bp9C,KAAKk+C,gBAAkBlB,GAGvBh9C,KAAKy9C,mBAAmBnW,2BAIpC+V,EAAqBn9C,UAAUuhD,uBAAyB,SAAUn8C,GAC1DtF,KAAKo+C,wBACLp+C,KAAKo+C,uBAAuB94C,IAQpC+3C,EAAqBn9C,UAAU0hD,cAAgB,WAC3C,IAAIlyC,EAAKC,EAAIysB,EAAKtsB,EAElB9P,KAAKggD,UACL,IAGI,IAAK,IAAIhwC,EAAKtQ,EAAMqQ,SAAS/P,KAAK69C,QAAQpyB,UAAWgR,EAAKzsB,EAAGC,QAASwsB,EAAGvsB,KAAMusB,EAAKzsB,EAAGC,OAAQ,CAC3F,IAAIi1B,EAAUzI,EAAGj9B,MACjB,IACI,IAAK,IAAI+jD,GAAMnnB,OAAM,EAAQ18B,EAAMqQ,SAASm1B,EAAQzZ,WAAY+3B,EAAKD,EAAGtzC,QAASuzC,EAAGtzC,KAAMszC,EAAKD,EAAGtzC,OAAQ,CACtG,IAAIqvC,EAAakE,EAAGhkD,MACpBQ,KAAKu/C,YAAYD,IAGzB,MAAO1iB,GAASR,EAAM,CAAEl4B,MAAO04B,GAC/B,QACI,IACQ4mB,IAAOA,EAAGtzC,OAASJ,EAAKyzC,EAAGjzC,SAASR,EAAGS,KAAKgzC,GAEpD,QAAU,GAAInnB,EAAK,MAAMA,EAAIl4B,SAIzC,MAAOmM,GAASX,EAAM,CAAExL,MAAOmM,GAC/B,QACI,IACQosB,IAAOA,EAAGvsB,OAASP,EAAKK,EAAGM,SAASX,EAAGY,KAAKP,GAEpD,QAAU,GAAIN,EAAK,MAAMA,EAAIxL,OAEjC,IAAK,IAAInB,EAAI,EAAGA,EAAI/C,KAAK89C,iBAAiBj7C,OAAQE,IAC1C/C,KAAK89C,iBAAiB/6C,IACtB/C,KAAKmhD,SAASp+C,GAGtB,MAAO/C,KAAKg+C,0BAA0Bn7C,OAAQ,CAC1C,IAAIm+C,EAAUhhD,KAAKg+C,0BAA0BjL,QAC7C/yC,KAAK+gD,kBAAkBC,EAAQtoC,OAAQsoC,EAAQl2C,WAAYk2C,EAAQr8C,KAAMq8C,EAAQptC,cAMzFypC,EAAqBn9C,UAAUyhD,kBAAoB,WAC/C,IAAIvY,EAAQ,GACRqa,EAAa,KACb9jD,EAAKs1C,UAAUC,WACfuO,EAAa,aAER9jD,EAAKs1C,UAAUyO,cACpBD,EAAa,QAEjBra,EAAM,OAASqa,EAAa,IAAMtP,GAAY5kC,QAAQ,MAAO,MAAQ,EACjE5P,EAAK8rC,kBACLrC,EAAM,qBAAuB,EAExBzpC,EAAKgkD,kBACVva,EAAM,yBAA2B,GAErCppC,KAAKupC,YAAYH,IAErBiU,EAAqBn9C,UAAU+hD,iBAAmB,WAC9C,IAAIH,EAASvW,GAAcD,cAAcI,kBACzC,OAAO/rC,EAAK8L,QAAQzL,KAAK49C,oBAAsBkE,GAEnDzE,EAAqBM,4BAA8B,EAInDN,EAAqBoF,kBAAoB,EAClCpF,EAntB8B,CAotBvCb,IAuBEoH,GAAoC,SAAUxtC,GAQ9C,SAASwtC,EAAmB9K,EAAWwE,EAAeG,GAClD,IAAI19B,EAAQ3J,EAAO7F,KAAKvQ,OAASA,KAajC,OAZA+f,EAAM+4B,UAAYA,EAClB/4B,EAAMu9B,cAAgBA,EACtBv9B,EAAM09B,mBAAqBA,EAE3B19B,EAAMouB,KAAOpqC,EAAW,WAOxBgc,EAAM8jC,SAAW,GACV9jC,EA+HX,OApJArgB,EAAM2W,UAAUutC,EAAoBxtC,GAuBpCwtC,EAAmB1jD,UAAUqpC,YAAc,SAAUH,GACjD,MAAM,IAAIhlC,MAAM,4BAQpBw/C,EAAmBE,aAAe,SAAU56C,EAAOo5B,GAC/C,YAAYlwB,IAARkwB,EACO,OAASA,GAGhB3iC,EAAK8D,OAAOyF,EAAMwc,iBAAiB4f,YAAa,kDACzCp8B,EAAME,KAAKrI,aAI1B6iD,EAAmB1jD,UAAUk/C,OAAS,SAAUl2C,EAAOm2C,EAAe/c,EAAK1uB,GACvE,IAAImM,EAAQ/f,KACR8K,EAAa5B,EAAME,KAAKrI,WAC5Bf,KAAKmuC,KAAK,qBAAuBrjC,EAAa,IAAM5B,EAAM2hB,mBAE1D,IAAIk5B,EAAWH,EAAmBE,aAAa56C,EAAOo5B,GAClD0hB,EAAa,GACjBhkD,KAAK6jD,SAASE,GAAYC,EAC1B,IAAIC,EAAwB/6C,EACvBwc,iBACAw+B,8BACLlkD,KAAKmkD,aAAar5C,EAAa,QAASm5C,GAAuB,SAAU//C,EAAOsW,GAC5E,IASQ4pC,EATJz/C,EAAO6V,GACG,MAAVtW,IACAS,EAAO,KACPT,EAAQ,MAEE,OAAVA,GACA6b,EAAMu9B,cAAcxyC,EAAYnG,GAAmB,EAAO29B,GAE1D3iC,EAAKuf,QAAQa,EAAM8jC,SAAUE,KAAcC,KAMvCI,EAJClgD,EAGc,MAAVA,EACM,oBAGA,cAAgBA,EANhB,KAQf0P,EAAWwwC,EAAU,WAKjCR,EAAmB1jD,UAAU0gD,SAAW,SAAU13C,EAAOo5B,GACrD,IAAIyhB,EAAWH,EAAmBE,aAAa56C,EAAOo5B,UAC/CtiC,KAAK6jD,SAASE,IAGzBH,EAAmB1jD,UAAUw8C,iBAAmB,SAAUC,KAY1DiH,EAAmB1jD,UAAUikD,aAAe,SAAUr5C,EAAYm5C,EAAuB37B,GACrF,IAAIvI,EAAQ/f,UACkB,IAA1BikD,IAAoCA,EAAwB,IAChEA,EAAsB,UAAY,SAClCjkD,KAAKy9C,mBACA1W,UAA2B,GAC3BF,MAAK,SAAUwd,GAChB,IAAIC,EAAYD,GAAiBA,EAActB,YAC3CuB,IACAL,EAAsB,QAAUK,GAEpC,IAAIjR,GAAOtzB,EAAM+4B,UAAU9qC,OAAS,WAAa,WAC7C+R,EAAM+4B,UAAU/qC,KAChBjD,EAFM,OAKNiV,EAAM+4B,UAAU7qC,UAChBtO,EAAK4kD,YAAYN,GACrBlkC,EAAMouB,KAAK,4BAA8BkF,GACzC,IAAImR,EAAM,IAAIC,eACdD,EAAIzQ,mBAAqB,WACrB,GAAIzrB,GAA+B,IAAnBk8B,EAAIr/C,WAAkB,CAClC4a,EAAMouB,KAAK,qBAAuBkF,EAAM,qBAAsBmR,EAAI7e,OAAQ,YAAa6e,EAAIE,cAC3F,IAAIhE,EAAM,KACV,GAAI8D,EAAI7e,QAAU,KAAO6e,EAAI7e,OAAS,IAAK,CACvC,IACI+a,EAAM/gD,EAAKiB,SAAS4jD,EAAIE,cAE5B,MAAOljD,GACH6C,EAAK,qCACDgvC,EACA,KACAmR,EAAIE,cAEZp8B,EAAS,KAAMo4B,QAII,MAAf8D,EAAI7e,QAAiC,MAAf6e,EAAI7e,QAC1BthC,EAAK,sCACDgvC,EACA,YACAmR,EAAI7e,QAEZrd,EAASk8B,EAAI7e,QAEjBrd,EAAW,OAGnBk8B,EAAIlW,KAAK,MAAO+E,GAAuB,GACvCmR,EAAI5T,WAGLgT,EArJ4B,CAsJrCpH,IAkBEmI,GAAmB,iBAInBC,GAAsB,WACtB,SAASA,EAAK9L,EAAW+L,EAAiBC,EAAKC,GAC3C,IAAIhlC,EAAQ/f,KACZA,KAAK84C,UAAYA,EACjB94C,KAAK8kD,IAAMA,EACX9kD,KAAKglD,gBAAkB,EACvBhlD,KAAKipC,eAAiB,KACtBjpC,KAAKilD,YAAc,IAAIzb,GACvBxpC,KAAKklD,aAAe,EACpBllD,KAAKmlD,6BAA+B,KAEpCnlD,KAAK0uC,cAAgB,IAAI5hB,GAEzB9sB,KAAKolD,sBAAwB,KAC7B,IAAIC,EAAoB,IAAI7e,GAAkBse,EAAKC,GAEnD,GADA/kD,KAAKouC,OAAStG,GAAaC,cAAc+Q,GACrC+L,GAAmBl7C,IACnB3J,KAAK+oC,QAAU,IAAI6a,GAAmB5jD,KAAK84C,UAAW94C,KAAKs9C,cAAcx5C,KAAK9D,MAAOqlD,GAErF9/C,WAAWvF,KAAKu9C,iBAAiBz5C,KAAK9D,MAAM,GAAO,OAElD,CACD,IAAIslD,EAAeR,EAAItd,QAAQ,gCAE/B,GAA4B,qBAAjB8d,GAAiD,OAAjBA,EAAuB,CAC9D,GAA4B,kBAAjBA,EACP,MAAM,IAAIlhD,MAAM,sEAEpB,IACIzE,EAAKa,UAAU8kD,GAEnB,MAAO9jD,GACH,MAAM,IAAI4C,MAAM,kCAAoC5C,IAG5DxB,KAAKolD,sBAAwB,IAAI/H,GAAqBr9C,KAAK84C,UAAWgM,EAAItd,QAAQ+d,MAAOvlD,KAAKs9C,cAAcx5C,KAAK9D,MAAOA,KAAKu9C,iBAAiBz5C,KAAK9D,MAAOA,KAAKw9C,oBAAoB15C,KAAK9D,MAAOqlD,EAAmBC,GAClNtlD,KAAK+oC,QAAU/oC,KAAKolD,sBAExBC,EAAkBne,wBAAuB,SAAUyV,GAC/C58B,EAAMgpB,QAAQ2T,iBAAiBC,MAInC38C,KAAKwlD,eAAiB1d,GAAaI,oBAAoB4Q,GAAW,WAAc,OAAO,IAAIjQ,GAAc9oB,EAAMquB,OAAQruB,EAAMgpB,YAC7H/oC,KAAKylD,oBAELzlD,KAAK0lD,UAAY,IAAItf,GACrBpmC,KAAK2lD,cAAgB,IAAItkB,GAAS,CAC9B6C,eAAgB,SAAUh7B,EAAOo5B,EAAK+c,EAAezrC,GACjD,IAAIgyC,EAAa,GACbrwC,EAAOwK,EAAM2lC,UAAUj0B,QAAQvoB,EAAME,MASzC,OANKmM,EAAK9J,YACNm6C,EAAa7lC,EAAM4lC,cAAczjB,qBAAqBh5B,EAAME,KAAMmM,GAClEhQ,YAAW,WACPqO,EAAW,QACZ,IAEAgyC,GAEXrhB,cAAe,eAEnBvkC,KAAK6lD,YAAY,aAAa,GAC9B7lD,KAAK8lD,gBAAkB,IAAIzkB,GAAS,CAChC6C,eAAgB,SAAUh7B,EAAOo5B,EAAK+c,EAAezrC,GAMjD,OALAmM,EAAMgpB,QAAQqW,OAAOl2C,EAAOm2C,EAAe/c,GAAK,SAAUqD,EAAQhhC,GAC9D,IAAI80B,EAAS7lB,EAAW+xB,EAAQhhC,GAChCob,EAAMklC,YAAY9a,0BAA0BjhC,EAAME,KAAMqwB,MAGrD,IAEX8K,cAAe,SAAUr7B,EAAOo5B,GAC5BviB,EAAMgpB,QAAQ6X,SAAS13C,EAAOo5B,MA0U1C,OAnUAsiB,EAAK1kD,UAAUa,SAAW,WACtB,OAASf,KAAK84C,UAAU9qC,OAAS,WAAa,WAAahO,KAAK84C,UAAU/qC,MAK9E62C,EAAK1kD,UAAUY,KAAO,WAClB,OAAOd,KAAK84C,UAAU7qC,WAK1B22C,EAAK1kD,UAAU6lD,WAAa,WACxB,IAAIC,EAAahmD,KAAK0lD,UAAUj0B,QAAQ,IAAIxnB,EAAK,2BAC7Cg8C,EAASD,EAAW1vC,OAAS,EACjC,OAAO,IAAIoV,MAAOC,UAAYs6B,GAKlCrB,EAAK1kD,UAAUgmD,qBAAuB,WAClC,OAAO16B,GAAmB,CACtBywB,UAAWj8C,KAAK+lD,gBAMxBnB,EAAK1kD,UAAUo9C,cAAgB,SAAUxyC,EAAYnG,EAAMwhD,EAAS7jB,GAEhEtiC,KAAKglD,kBACL,IAAI57C,EAAO,IAAIa,EAAKa,GACpBnG,EAAO3E,KAAKmlD,6BACNnlD,KAAKmlD,6BAA6Br6C,EAAYnG,GAC9CA,EACN,IAAI80B,EAAS,GACb,GAAI6I,EACA,GAAI6jB,EAAS,CACT,IAAIC,EAAiBzmD,EAAKqgB,IAAIrb,GAAM,SAAU0hD,GAAO,OAAO7jC,GAAe6jC,MAC3E5sB,EAASz5B,KAAK8lD,gBAAgBjjB,sBAAsBz5B,EAAMg9C,EAAgB9jB,OAEzE,CACD,IAAIgkB,EAAa9jC,GAAe7d,GAChC80B,EAASz5B,KAAK8lD,gBAAgBzjB,0BAA0Bj5B,EAAMk9C,EAAYhkB,QAG7E,GAAI6jB,EAAS,CACd,IAAIhuB,EAAkBx4B,EAAKqgB,IAAIrb,GAAM,SAAU0hD,GAAO,OAAO7jC,GAAe6jC,MAC5E5sB,EAASz5B,KAAK8lD,gBAAgB3jB,iBAAiB/4B,EAAM+uB,OAEpD,CACD,IAAI1U,EAAOjB,GAAe7d,GAC1B80B,EAASz5B,KAAK8lD,gBAAgB5jB,qBAAqB94B,EAAMqa,GAE7D,IAAI6P,EAAelqB,EACfqwB,EAAO52B,OAAS,IAGhBywB,EAAetzB,KAAKumD,mBAAmBn9C,IAE3CpJ,KAAKilD,YAAY9a,0BAA0B7W,EAAcmG,IAG7DmrB,EAAK1kD,UAAUsmD,qBAAuB,SAAUl+B,GAC5CtoB,KAAKmlD,6BAA+B78B,GAExCs8B,EAAK1kD,UAAUq9C,iBAAmB,SAAUkJ,GACxCzmD,KAAK6lD,YAAY,YAAaY,IACR,IAAlBA,GACAzmD,KAAK0mD,0BAGb9B,EAAK1kD,UAAUs9C,oBAAsB,SAAU1f,GAC3C,IAAI/d,EAAQ/f,KACZkH,EAAK42B,GAAS,SAAU19B,EAAKZ,GACzBugB,EAAM8lC,YAAYzlD,EAAKZ,OAG/BolD,EAAK1kD,UAAU2lD,YAAc,SAAU/6C,EAAYtL,GAC/C,IAAI4J,EAAO,IAAIa,EAAK,UAAYa,GAC5BgL,EAAU0M,GAAehjB,GAC7BQ,KAAK0lD,UAAUpf,eAAel9B,EAAM0M,GACpC,IAAI2jB,EAASz5B,KAAK2lD,cAAczjB,qBAAqB94B,EAAM0M,GAC3D9V,KAAKilD,YAAY9a,0BAA0B/gC,EAAMqwB,IAErDmrB,EAAK1kD,UAAUymD,gBAAkB,WAC7B,OAAO3mD,KAAKklD,gBAEhBN,EAAK1kD,UAAUmU,gBAAkB,SAAUjL,EAAMw9C,EAAQhmC,EAAahN,GAClE,IAAImM,EAAQ/f,KACZA,KAAKmuC,KAAK,MAAO,CACb/kC,KAAMA,EAAKrI,WACXvB,MAAOonD,EACP70C,SAAU6O,IAId,IAAIkL,EAAe9rB,KAAKkmD,uBACpBW,EAAoBrkC,GAAeokC,EAAQhmC,GAC3CuL,EAAWnsB,KAAK8lD,gBAAgBv6B,uBAAuBniB,GACvD0M,EAAU4W,GAA6Bm6B,EAAmB16B,EAAUL,GACpEkT,EAAUh/B,KAAK2mD,kBACfltB,EAASz5B,KAAK8lD,gBAAgBnkB,mBAAmBv4B,EAAM0M,EAASkpB,GAAS,GAC7Eh/B,KAAKilD,YAAYtb,YAAYlQ,GAC7Bz5B,KAAK+oC,QAAQ0T,IAAIrzC,EAAKrI,WAAY8lD,EAAkBvwC,KAAgB,IAAO,SAAUqvB,EAAQ0b,GACzF,IAAIyF,EAAqB,OAAXnhB,EACTmhB,GACDziD,EAAK,UAAY+E,EAAO,YAAcu8B,GAE1C,IAAIohB,EAAchnC,EAAM+lC,gBAAgBzvB,aAAa2I,GAAU8nB,GAC/D/mC,EAAMklC,YAAY9a,0BAA0B/gC,EAAM29C,GAClDhnC,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,MAErD,IAAI/tB,EAAetzB,KAAKinD,mBAAmB79C,GAC3CpJ,KAAKumD,mBAAmBjzB,GAExBtzB,KAAKilD,YAAY9a,0BAA0B7W,EAAc,KAE7DsxB,EAAK1kD,UAAUkC,OAAS,SAAUgH,EAAM89C,EAAiBtzC,GACrD,IAAImM,EAAQ/f,KACZA,KAAKmuC,KAAK,SAAU,CAAE/kC,KAAMA,EAAKrI,WAAYvB,MAAO0nD,IAEpD,IAAIC,GAAQ,EACRr7B,EAAe9rB,KAAKkmD,uBACpB/tB,EAAkB,GAKtB,GAJAjxB,EAAKggD,GAAiB,SAAUE,EAAYC,GACxCF,GAAQ,EACRhvB,EAAgBivB,GAAc56B,GAAyBpjB,EAAKkC,MAAM87C,GAAa5kC,GAAe6kC,GAAetnC,EAAM+lC,gBAAiBh6B,MAEnIq7B,EAsBDtjD,EAAI,wDACJ7D,KAAKgnD,uBAAuBpzC,EAAY,UAvBhC,CACR,IAAI0zC,EAAYtnD,KAAK2mD,kBACjBltB,EAASz5B,KAAK8lD,gBAAgBhkB,eAAe14B,EAAM+uB,EAAiBmvB,GACxEtnD,KAAKilD,YAAYtb,YAAYlQ,GAC7Bz5B,KAAK+oC,QAAQ7S,MAAM9sB,EAAKrI,WAAYmmD,GAAiB,SAAUvhB,EAAQ0b,GACnE,IAAIyF,EAAqB,OAAXnhB,EACTmhB,GACDziD,EAAK,aAAe+E,EAAO,YAAcu8B,GAE7C,IAAIohB,EAAchnC,EAAM+lC,gBAAgBzvB,aAAaixB,GAAYR,GAC7DxzB,EAAeyzB,EAAYlkD,OAAS,EAAIkd,EAAMwmC,mBAAmBn9C,GAAQA,EAC7E2W,EAAMklC,YAAY9a,0BAA0B7W,EAAcyzB,GAC1DhnC,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,MAErDn6C,EAAKggD,GAAiB,SAAU9c,GAC5B,IAAI9W,EAAevT,EAAMknC,mBAAmB79C,EAAKkC,MAAM8+B,IACvDrqB,EAAMwmC,mBAAmBjzB,MAG7BtzB,KAAKilD,YAAY9a,0BAA0B/gC,EAAM,MAUzDw7C,EAAK1kD,UAAUwmD,uBAAyB,WACpC,IAAI3mC,EAAQ/f,KACZA,KAAKmuC,KAAK,sBACV,IAAIriB,EAAe9rB,KAAKkmD,uBACpBqB,EAA2B,IAAIz6B,GACnC9sB,KAAK0uC,cAAc9gB,YAAY3jB,EAAK+kB,OAAO,SAAU5lB,EAAMmM,GACvD,IAAIiyC,EAAWh7B,GAAyBpjB,EAAMmM,EAAMwK,EAAM+lC,gBAAiBh6B,GAC3Ey7B,EAAyBl6B,SAASjkB,EAAMo+C,MAE5C,IAAI/tB,EAAS,GACb8tB,EAAyB35B,YAAY3jB,EAAK+kB,OAAO,SAAU5lB,EAAMqa,GAC7DgW,EAASA,EAAOgC,OAAO1b,EAAM+lC,gBAAgB5jB,qBAAqB94B,EAAMqa,IACxE,IAAI6P,EAAevT,EAAMknC,mBAAmB79C,GAC5C2W,EAAMwmC,mBAAmBjzB,MAE7BtzB,KAAK0uC,cAAgB,IAAI5hB,GACzB9sB,KAAKilD,YAAY9a,0BAA0BlgC,EAAK+kB,MAAOyK,IAE3DmrB,EAAK1kD,UAAU+T,mBAAqB,SAAU7K,EAAMwK,GAChD,IAAImM,EAAQ/f,KACZA,KAAK+oC,QAAQ90B,mBAAmB7K,EAAKrI,YAAY,SAAU4kC,EAAQ0b,GAChD,OAAX1b,GACA5lB,EAAM2uB,cAAcnhB,OAAOnkB,GAE/B2W,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,OAGzDuD,EAAK1kD,UAAUkU,gBAAkB,SAAUhL,EAAM5J,EAAOoU,GACpD,IAAImM,EAAQ/f,KACR8V,EAAU0M,GAAehjB,GAC7BQ,KAAK+oC,QAAQ6T,gBAAgBxzC,EAAKrI,WAAY+U,EAAQQ,KAAgB,IAAO,SAAUqvB,EAAQ0b,GAC5E,OAAX1b,GACA5lB,EAAM2uB,cAAcrhB,SAASjkB,EAAM0M,GAEvCiK,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,OAGzDuD,EAAK1kD,UAAUoU,4BAA8B,SAAUlL,EAAM5J,EAAOuS,EAAU6B,GAC1E,IAAImM,EAAQ/f,KACR8V,EAAU0M,GAAehjB,EAAOuS,GACpC/R,KAAK+oC,QAAQ6T,gBAAgBxzC,EAAKrI,WAAY+U,EAAQQ,KAAgB,IAAO,SAAUqvB,EAAQ0b,GAC5E,OAAX1b,GACA5lB,EAAM2uB,cAAcrhB,SAASjkB,EAAM0M,GAEvCiK,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,OAGzDuD,EAAK1kD,UAAUuU,mBAAqB,SAAUrL,EAAM89C,EAAiBtzC,GACjE,IAAImM,EAAQ/f,KACZ,GAAIL,EAAK8L,QAAQy7C,GAGb,OAFArjD,EAAI,4EACJ7D,KAAKgnD,uBAAuBpzC,EAAY,MAG5C5T,KAAK+oC,QAAQ8T,kBAAkBzzC,EAAKrI,WAAYmmD,GAAiB,SAAUvhB,EAAQ0b,GAChE,OAAX1b,GACAz+B,EAAKggD,GAAiB,SAAUpvC,EAAWI,GACvC,IAAIE,EAAeoK,GAAetK,GAClC6H,EAAM2uB,cAAcrhB,SAASjkB,EAAKkC,MAAMwM,GAAYM,MAG5D2H,EAAMinC,uBAAuBpzC,EAAY+xB,EAAQ0b,OAGzDuD,EAAK1kD,UAAU8oB,yBAA2B,SAAU9f,EAAOyb,GACvD,IAAI8U,EAEAA,EAD0B,UAA1BvwB,EAAME,KAAKsB,WACF1K,KAAK2lD,cAAczqB,qBAAqBhyB,EAAOyb,GAG/C3kB,KAAK8lD,gBAAgB5qB,qBAAqBhyB,EAAOyb,GAE9D3kB,KAAKilD,YAAYhb,kBAAkB/gC,EAAME,KAAMqwB,IAEnDmrB,EAAK1kD,UAAUkpB,4BAA8B,SAAUlgB,EAAOyb,GAG1D,IAAI8U,EAEAA,EAD0B,UAA1BvwB,EAAME,KAAKsB,WACF1K,KAAK2lD,cAAcxqB,wBAAwBjyB,EAAOyb,GAGlD3kB,KAAK8lD,gBAAgB3qB,wBAAwBjyB,EAAOyb,GAEjE3kB,KAAKilD,YAAYhb,kBAAkB/gC,EAAME,KAAMqwB,IAEnDmrB,EAAK1kD,UAAU8iD,UAAY,WACnBhjD,KAAKolD,uBACLplD,KAAKolD,sBAAsBpC,UAAU2B,KAG7CC,EAAK1kD,UAAU+iD,OAAS,WAChBjjD,KAAKolD,uBACLplD,KAAKolD,sBAAsBnC,OAAO0B,KAG1CC,EAAK1kD,UAAUkpC,MAAQ,SAAUqe,GAE7B,QADkB,IAAdA,IAAwBA,GAAY,GACjB,qBAAZC,QAAX,CAGA,IAAIte,EACAqe,GACKznD,KAAKipC,iBACNjpC,KAAKipC,eAAiB,IAAIZ,GAAcroC,KAAKouC,SAEjDhF,EAAQppC,KAAKipC,eAAexoC,OAG5B2oC,EAAQppC,KAAKouC,OAAO3tC,MAExB,IAAIknD,EAActoD,OAAOmH,KAAK4iC,GAAOwe,QAAO,SAAUC,EAAeC,GACjE,OAAOtiD,KAAKoH,IAAIk7C,EAAajlD,OAAQglD,KACtC,GACH3gD,EAAKkiC,GAAO,SAAUX,EAAMjpC,GAGxB,IAFA,IAESuD,EAAI0lC,EAAK5lC,OAAQE,EAAI4kD,EAAc,EAAG5kD,IAC7B,SAK1B6hD,EAAK1kD,UAAU6nD,sBAAwB,SAAUC,GAC7ChoD,KAAKouC,OAAOzG,iBAAiBqgB,GAC7BhoD,KAAKwlD,eAAerc,YAAY6e,IAEpCpD,EAAK1kD,UAAUiuC,KAAO,WAElB,IADA,IAAIzrC,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,GAAMC,UAAUD,GAE5B,IAAIqB,EAAS,GACThE,KAAKolD,wBACLphD,EAAShE,KAAKolD,sBAAsBtjD,GAAK,KAE7C+B,EAAIV,WAAM,EAAQzD,EAAMuE,SAAS,CAACD,GAAStB,KAE/CkiD,EAAK1kD,UAAU8mD,uBAAyB,SAAU1+B,EAAUqd,EAAQ0b,GAC5D/4B,GACA7e,GAAe,WACX,GAAe,OAAXk8B,EACArd,EAAS,UAER,CACD,IAAIrf,GAAQ08B,GAAU,SAASt8B,cAC3BvG,EAAUmG,EACVo4C,IACAv+C,GAAW,KAAOu+C,GAEtB,IAAIn9C,EAAQ,IAAIE,MAAMtB,GAEtBoB,EAAM+E,KAAOA,EACbqf,EAASpkB,QAKzB7E,OAAOC,eAAeslD,EAAK1kD,UAAW,WAAY,CAC9CO,IAAK,WACD,OAAOT,KAAKioD,aAAejoD,KAAKioD,WAAa,IAAIC,GAASloD,QAE9DwK,YAAY,EACZC,cAAc,IAEXm6C,EApZc,GA6arBuD,GAA8B,WAI9B,SAASA,EAAap5C,GAClB/O,KAAKooD,eAAiB,IAAI/0B,GAActkB,EAAO4W,YAC/C3lB,KAAK+jB,OAAShV,EAAO4W,WACrB3lB,KAAKqoD,WAAaF,EAAaG,cAAcv5C,GAC7C/O,KAAKuoD,SAAWJ,EAAaK,YAAYz5C,GAuG7C,OAlGAo5C,EAAajoD,UAAUuoD,aAAe,WAClC,OAAOzoD,KAAKqoD,YAKhBF,EAAajoD,UAAUwoD,WAAa,WAChC,OAAO1oD,KAAKuoD,UAMhBJ,EAAajoD,UAAUgmB,QAAU,SAAU3Q,GACvC,OAAQvV,KAAK+jB,OAAOpO,QAAQ3V,KAAKyoD,eAAgBlzC,IAAS,GACtDvV,KAAK+jB,OAAOpO,QAAQJ,EAAMvV,KAAK0oD,eAAiB,GAKxDP,EAAajoD,UAAUmY,YAAc,SAAUoL,EAAMrjB,EAAKuvB,EAAU2D,EAAczE,EAAQ0E,GAItF,OAHKvzB,KAAKkmB,QAAQ,IAAI5Q,GAAUlV,EAAKuvB,MACjCA,EAAWpP,GAAa9I,YAErBzX,KAAKooD,eAAe/vC,YAAYoL,EAAMrjB,EAAKuvB,EAAU2D,EAAczE,EAAQ0E,IAKtF40B,EAAajoD,UAAUwzB,eAAiB,SAAUlB,EAASmB,EAASJ,GAC5DI,EAAQvc,eAERuc,EAAUpT,GAAa9I,YAE3B,IAAIua,EAAW2B,EAAQpa,UAAUvZ,KAAK+jB,QAEtCiO,EAAWA,EAASra,eAAe4I,GAAa9I,YAChD,IAAIkxC,EAAO3oD,KAMX,OALA2zB,EAAQnb,aAAawB,IAAgB,SAAU5Z,EAAK8X,GAC3CywC,EAAKziC,QAAQ,IAAI5Q,GAAUlV,EAAK8X,MACjC8Z,EAAWA,EAAS7Z,qBAAqB/X,EAAKmgB,GAAa9I,gBAG5DzX,KAAKooD,eAAe10B,eAAelB,EAASR,EAAUuB,IAKjE40B,EAAajoD,UAAUyX,eAAiB,SAAU6a,EAAS5R,GAEvD,OAAO4R,GAKX21B,EAAajoD,UAAU0zB,aAAe,WAClC,OAAO,GAKXu0B,EAAajoD,UAAU2zB,iBAAmB,WACtC,OAAO7zB,KAAKooD,gBAKhBD,EAAajoD,UAAUylB,SAAW,WAC9B,OAAO3lB,KAAK+jB,QAOhBokC,EAAaG,cAAgB,SAAUv5C,GACnC,GAAIA,EAAOwY,WAAY,CACnB,IAAIM,EAAY9Y,EAAO+Y,oBACvB,OAAO/Y,EAAO4W,WAAWjP,SAAS3H,EAAOyY,qBAAsBK,GAG/D,OAAO9Y,EAAO4W,WAAW1P,WAQjCkyC,EAAaK,YAAc,SAAUz5C,GACjC,GAAIA,EAAO0Y,SAAU,CACjB,IAAIM,EAAUhZ,EAAOiZ,kBACrB,OAAOjZ,EAAO4W,WAAWjP,SAAS3H,EAAO2Y,mBAAoBK,GAG7D,OAAOhZ,EAAO4W,WAAWlP,WAG1B0xC,EA/GsB,GAwI7BS,GAA+B,WAI/B,SAASA,EAAc75C,GACnB/O,KAAK6oD,cAAgB,IAAIV,GAAap5C,GACtC/O,KAAK+jB,OAAShV,EAAO4W,WACrB3lB,KAAK8oD,OAAS/5C,EAAOg6C,WACrB/oD,KAAKgpD,UAAYj6C,EAAOk6C,iBA0N5B,OArNAL,EAAc1oD,UAAUmY,YAAc,SAAUoL,EAAMrjB,EAAKuvB,EAAU2D,EAAczE,EAAQ0E,GAIvF,OAHKvzB,KAAK6oD,cAAc3iC,QAAQ,IAAI5Q,GAAUlV,EAAKuvB,MAC/CA,EAAWpP,GAAa9I,YAExBgM,EAAK5L,kBAAkBzX,GAAKiM,OAAOsjB,GAE5BlM,EAEFA,EAAKlL,cAAgBvY,KAAK8oD,OACxB9oD,KAAK6oD,cACPh1B,mBACAxb,YAAYoL,EAAMrjB,EAAKuvB,EAAU2D,EAAczE,EAAQ0E,GAGrDvzB,KAAKkpD,sBAAsBzlC,EAAMrjB,EAAKuvB,EAAUd,EAAQ0E,IAMvEq1B,EAAc1oD,UAAUwzB,eAAiB,SAAUlB,EAASmB,EAASJ,GACjE,IAAIvB,EACJ,GAAI2B,EAAQvc,cAAgBuc,EAAQloB,UAEhCumB,EAAWzR,GAAa9I,WAAW8B,UAAUvZ,KAAK+jB,aAGlD,GAAkB,EAAd/jB,KAAK8oD,OAAan1B,EAAQpb,eAC1Bob,EAAQna,UAAUxZ,KAAK+jB,QAAS,CAEhCiO,EAAWzR,GAAa9I,WAAW8B,UAAUvZ,KAAK+jB,QAElD,IAAInC,OAAW,EAEXA,EADA5hB,KAAKgpD,SACMr1B,EAAQ5W,uBAAuB/c,KAAK6oD,cAAcH,aAAc1oD,KAAK+jB,QAGrE4P,EAAQ7W,gBAAgB9c,KAAK6oD,cAAcJ,eAAgBzoD,KAAK+jB,QAE/E,IAAI/I,EAAQ,EACZ,MAAO4G,EAASnH,WAAaO,EAAQhb,KAAK8oD,OAAQ,CAC9C,IAAI74C,EAAO2R,EAASrH,UAChB4uC,OAAU,EASd,GAPIA,EADAnpD,KAAKgpD,SAEDhpD,KAAK+jB,OAAOpO,QAAQ3V,KAAK6oD,cAAcJ,eAAgBx4C,IAAS,EAIhEjQ,KAAK+jB,OAAOpO,QAAQ1F,EAAMjQ,KAAK6oD,cAAcH,eAAiB,GAElES,EAMA,MALAn3B,EAAWA,EAAS7Z,qBAAqBlI,EAAKnP,KAAMmP,EAAKsF,MACzDyF,SAQP,CAEDgX,EAAW2B,EAAQpa,UAAUvZ,KAAK+jB,QAElCiO,EAAWA,EAASra,eAAe4I,GAAa9I,YAChD,IAAIkK,OAAY,EACZE,OAAU,EACVzV,OAAM,EACNwV,OAAW,EACf,GAAI5hB,KAAKgpD,SAAU,CACfpnC,EAAWoQ,EAAShV,mBAAmBhd,KAAK+jB,QAC5CpC,EAAY3hB,KAAK6oD,cAAcH,aAC/B7mC,EAAU7hB,KAAK6oD,cAAcJ,eAC7B,IAAIW,EAAiBppD,KAAK+jB,OAAOrO,aACjCtJ,EAAM,SAAUrG,EAAGC,GAAK,OAAOojD,EAAepjD,EAAGD,SAGjD6b,EAAWoQ,EAASpV,YAAY5c,KAAK+jB,QACrCpC,EAAY3hB,KAAK6oD,cAAcJ,eAC/B5mC,EAAU7hB,KAAK6oD,cAAcH,aAC7Bt8C,EAAMpM,KAAK+jB,OAAOrO,aAElBsF,EAAQ,EAAZ,IACIquC,GAAiB,EACrB,MAAOznC,EAASnH,UAAW,CACnBxK,EAAO2R,EAASrH,WACf8uC,GAAkBj9C,EAAIuV,EAAW1R,IAAS,IAE3Co5C,GAAiB,GAEjBF,EAAUE,GAAkBruC,EAAQhb,KAAK8oD,QAAU18C,EAAI6D,EAAM4R,IAAY,EACzEsnC,EACAnuC,IAGAgX,EAAWA,EAAS7Z,qBAAqBlI,EAAKnP,KAAMyf,GAAa9I,aAKjF,OAAOzX,KAAK6oD,cACPh1B,mBACAH,eAAelB,EAASR,EAAUuB,IAK3Cq1B,EAAc1oD,UAAUyX,eAAiB,SAAU6a,EAAS5R,GAExD,OAAO4R,GAKXo2B,EAAc1oD,UAAU0zB,aAAe,WACnC,OAAO,GAKXg1B,EAAc1oD,UAAU2zB,iBAAmB,WACvC,OAAO7zB,KAAK6oD,cAAch1B,oBAK9B+0B,EAAc1oD,UAAUylB,SAAW,WAC/B,OAAO3lB,KAAK+jB,QAWhB6kC,EAAc1oD,UAAUgpD,sBAAwB,SAAUzlC,EAAM0J,EAAUiC,EAAWP,EAAQy6B,GAEzF,IAAIl9C,EACJ,GAAIpM,KAAKgpD,SAAU,CACf,IAAIO,EAAavpD,KAAK+jB,OAAOrO,aAC7BtJ,EAAM,SAAUrG,EAAGC,GAAK,OAAOujD,EAAWvjD,EAAGD,SAG7CqG,EAAMpM,KAAK+jB,OAAOrO,aAEtB,IAAIwjB,EAAgBzV,EACpB9jB,EAAK8D,OAAOy1B,EAAc3gB,gBAAkBvY,KAAK8oD,OAAQ,IACzD,IAAIU,EAAoB,IAAIl0C,GAAU6X,EAAUiC,GAC5Cq6B,EAAiBzpD,KAAKgpD,SACpB9vB,EAAc3X,cAAcvhB,KAAK+jB,QACjCmV,EAAczX,aAAazhB,KAAK+jB,QAClColC,EAAUnpD,KAAK6oD,cAAc3iC,QAAQsjC,GACzC,GAAItwB,EAAclhB,SAASmV,GAAW,CAClC,IAAIu8B,EAAexwB,EAAcrhB,kBAAkBsV,GAC/CkD,EAAYxB,EAAOyF,mBAAmBt0B,KAAK+jB,OAAQ0lC,EAAgBzpD,KAAKgpD,UAC5E,MAAoB,MAAb34B,IACFA,EAAUvvB,OAASqsB,GAAY+L,EAAclhB,SAASqY,EAAUvvB,OAIjEuvB,EAAYxB,EAAOyF,mBAAmBt0B,KAAK+jB,OAAQsM,EAAWrwB,KAAKgpD,UAEvE,IAAIW,EAA2B,MAAbt5B,EAAoB,EAAIjkB,EAAIikB,EAAWm5B,GACrDI,EAAkBT,IAAY/5B,EAAU3jB,WAAak+C,GAAe,EACxE,GAAIC,EAIA,OAHyB,MAArBN,GACAA,EAAkB71B,iBAAiBlB,GAAOQ,mBAAmB5F,EAAUiC,EAAWs6B,IAE/ExwB,EAAc/gB,qBAAqBgV,EAAUiC,GAG3B,MAArBk6B,GACAA,EAAkB71B,iBAAiBlB,GAAOM,mBAAmB1F,EAAUu8B,IAE3E,IAAI1yB,EAAgBkC,EAAc/gB,qBAAqBgV,EAAU5M,GAAa9I,YAC1EoyC,EAAgC,MAAbx5B,GAAqBrwB,KAAK6oD,cAAc3iC,QAAQmK,GACvE,OAAIw5B,GACyB,MAArBP,GACAA,EAAkB71B,iBAAiBlB,GAAOI,iBAAiBtC,EAAUvvB,KAAMuvB,EAAU9a,OAElFyhB,EAAc7e,qBAAqBkY,EAAUvvB,KAAMuvB,EAAU9a,OAG7DyhB,EAId,OAAI5H,EAAU3jB,UAERgY,EAEF0lC,GACD/8C,EAAIq9C,EAAgBD,IAAsB,GACjB,MAArBF,IACAA,EAAkB71B,iBAAiBlB,GAAOM,mBAAmB42B,EAAe3oD,KAAM2oD,EAAel0C,OACjG+zC,EAAkB71B,iBAAiBlB,GAAOI,iBAAiBxF,EAAUiC,KAElE8J,EACF/gB,qBAAqBgV,EAAUiC,GAC/BjX,qBAAqBsxC,EAAe3oD,KAAMyf,GAAa9I,aAOzDgM,GAGRmlC,EAlOuB,GA2P9BkB,GAA6B,WAC7B,SAASA,IACL9pD,KAAK+pD,WAAY,EACjB/pD,KAAKgqD,WAAY,EACjBhqD,KAAKiqD,eAAgB,EACrBjqD,KAAKkqD,SAAU,EACflqD,KAAKmqD,aAAc,EACnBnqD,KAAK8oD,OAAS,EACd9oD,KAAKoqD,UAAY,GACjBpqD,KAAKqqD,iBAAmB,KACxBrqD,KAAKsqD,gBAAkB,GACvBtqD,KAAKuqD,eAAiB,KACtBvqD,KAAKwqD,cAAgB,GACrBxqD,KAAK+jB,OAAS/J,GAmWlB,OA9VA8vC,EAAY5pD,UAAUqnB,SAAW,WAC7B,OAAOvnB,KAAKgqD,WAKhBF,EAAY5pD,UAAU+oD,eAAiB,WACnC,MAAuB,KAAnBjpD,KAAKoqD,UAKEpqD,KAAKgqD,UAGJhqD,KAAKoqD,YAAcN,EAAYW,yBAAyBC,gBAOxEZ,EAAY5pD,UAAUsnB,mBAAqB,WAEvC,OADA7nB,EAAK8D,OAAOzD,KAAKgqD,UAAW,oCACrBhqD,KAAKqqD,kBAOhBP,EAAY5pD,UAAU4nB,kBAAoB,WAEtC,OADAnoB,EAAK8D,OAAOzD,KAAKgqD,UAAW,oCACxBhqD,KAAKiqD,cACEjqD,KAAKsqD,gBAGL1kD,GAMfkkD,EAAY5pD,UAAUunB,OAAS,WAC3B,OAAOznB,KAAKkqD,SAMhBJ,EAAY5pD,UAAUwnB,iBAAmB,WAErC,OADA/nB,EAAK8D,OAAOzD,KAAKkqD,QAAS,kCACnBlqD,KAAKuqD,gBAOhBT,EAAY5pD,UAAU8nB,gBAAkB,WAEpC,OADAroB,EAAK8D,OAAOzD,KAAKkqD,QAAS,kCACtBlqD,KAAKmqD,YACEnqD,KAAKwqD,cAGL3kD,GAMfikD,EAAY5pD,UAAUgoB,SAAW,WAC7B,OAAOloB,KAAK+pD,WAKhBD,EAAY5pD,UAAUioB,iBAAmB,WACrC,OAAOnoB,KAAK+pD,WAAgC,KAAnB/pD,KAAKoqD,WAMlCN,EAAY5pD,UAAU6oD,SAAW,WAE7B,OADAppD,EAAK8D,OAAOzD,KAAK+pD,UAAW,oCACrB/pD,KAAK8oD,QAKhBgB,EAAY5pD,UAAUylB,SAAW,WAC7B,OAAO3lB,KAAK+jB,QAMhB+lC,EAAY5pD,UAAUyqD,MAAQ,WAC1B,IAAI5vC,EAAO,IAAI+uC,EAaf,OAZA/uC,EAAKgvC,UAAY/pD,KAAK+pD,UACtBhvC,EAAK+tC,OAAS9oD,KAAK8oD,OACnB/tC,EAAKivC,UAAYhqD,KAAKgqD,UACtBjvC,EAAKsvC,iBAAmBrqD,KAAKqqD,iBAC7BtvC,EAAKkvC,cAAgBjqD,KAAKiqD,cAC1BlvC,EAAKuvC,gBAAkBtqD,KAAKsqD,gBAC5BvvC,EAAKmvC,QAAUlqD,KAAKkqD,QACpBnvC,EAAKwvC,eAAiBvqD,KAAKuqD,eAC3BxvC,EAAKovC,YAAcnqD,KAAKmqD,YACxBpvC,EAAKyvC,cAAgBxqD,KAAKwqD,cAC1BzvC,EAAKgJ,OAAS/jB,KAAK+jB,OACnBhJ,EAAKqvC,UAAYpqD,KAAKoqD,UACfrvC,GAMX+uC,EAAY5pD,UAAU6pB,MAAQ,SAAU6gC,GACpC,IAAIzgC,EAAYnqB,KAAK2qD,QAIrB,OAHAxgC,EAAU4/B,WAAY,EACtB5/B,EAAU2+B,OAAS8B,EACnBzgC,EAAUigC,UAAY,GACfjgC,GAMX2/B,EAAY5pD,UAAU4pB,aAAe,SAAU8gC,GAC3C,IAAIzgC,EAAYnqB,KAAK2qD,QAIrB,OAHAxgC,EAAU4/B,WAAY,EACtB5/B,EAAU2+B,OAAS8B,EACnBzgC,EAAUigC,UAAYN,EAAYW,yBAAyBC,eACpDvgC,GAMX2/B,EAAY5pD,UAAU8pB,YAAc,SAAU4gC,GAC1C,IAAIzgC,EAAYnqB,KAAK2qD,QAIrB,OAHAxgC,EAAU4/B,WAAY,EACtB5/B,EAAU2+B,OAAS8B,EACnBzgC,EAAUigC,UAAYN,EAAYW,yBAAyBI,gBACpD1gC,GAOX2/B,EAAY5pD,UAAUsqB,QAAU,SAAU7T,EAAYvW,GAClD,IAAI+pB,EAAYnqB,KAAK2qD,QAcrB,OAbAxgC,EAAU6/B,WAAY,OACH53C,IAAfuE,IACAA,EAAa,MAEjBwT,EAAUkgC,iBAAmB1zC,EAClB,MAAPvW,GACA+pB,EAAU8/B,eAAgB,EAC1B9/B,EAAUmgC,gBAAkBlqD,IAG5B+pB,EAAU8/B,eAAgB,EAC1B9/B,EAAUmgC,gBAAkB,IAEzBngC,GAOX2/B,EAAY5pD,UAAUuqB,MAAQ,SAAU9T,EAAYvW,GAChD,IAAI+pB,EAAYnqB,KAAK2qD,QAcrB,OAbAxgC,EAAU+/B,SAAU,OACD93C,IAAfuE,IACAA,EAAa,MAEjBwT,EAAUogC,eAAiB5zC,OACfvE,IAARhS,GACA+pB,EAAUggC,aAAc,EACxBhgC,EAAUqgC,cAAgBpqD,IAG1B+pB,EAAUggC,aAAc,EACxBhgC,EAAUqgC,cAAgB,IAEvBrgC,GAMX2/B,EAAY5pD,UAAUkqB,QAAU,SAAU3R,GACtC,IAAI0R,EAAYnqB,KAAK2qD,QAErB,OADAxgC,EAAUpG,OAAStL,EACZ0R,GAKX2/B,EAAY5pD,UAAU0qB,eAAiB,WACnC,IAAIkgC,EAA0BhB,EAAYW,yBACtCnkD,EAAM,GAaV,GAZItG,KAAKgqD,YACL1jD,EAAIwkD,EAAwBC,mBAAqB/qD,KAAKqqD,iBAClDrqD,KAAKiqD,gBACL3jD,EAAIwkD,EAAwBE,kBAAoBhrD,KAAKsqD,kBAGzDtqD,KAAKkqD,UACL5jD,EAAIwkD,EAAwBG,iBAAmBjrD,KAAKuqD,eAChDvqD,KAAKmqD,cACL7jD,EAAIwkD,EAAwBI,gBAAkBlrD,KAAKwqD,gBAGvDxqD,KAAK+pD,UAAW,CAChBzjD,EAAIwkD,EAAwBK,OAASnrD,KAAK8oD,OAC1C,IAAIsC,EAAWprD,KAAKoqD,UACH,KAAbgB,IAEIA,EADAprD,KAAKipD,iBACM6B,EAAwBJ,eAGxBI,EAAwBD,iBAG3CvkD,EAAIwkD,EAAwBO,WAAaD,EAM7C,OAHIprD,KAAK+jB,SAAW/J,KAChB1T,EAAIwkD,EAAwBQ,OAAStrD,KAAK+jB,OAAOhjB,YAE9CuF,GAKXwjD,EAAY5pD,UAAU+6B,aAAe,WACjC,QAASj7B,KAAKgqD,WAAahqD,KAAKkqD,SAAWlqD,KAAK+pD,YAKpDD,EAAY5pD,UAAUolC,UAAY,WAC9B,OAAOtlC,KAAKi7B,gBAAkBj7B,KAAK+jB,SAAW/J,IAKlD8vC,EAAY5pD,UAAUu6B,cAAgB,WAClC,OAAIz6B,KAAKi7B,eACE,IAAI5H,GAAcrzB,KAAK2lB,YAEzB3lB,KAAKkoB,WACH,IAAI0gC,GAAc5oD,MAGlB,IAAImoD,GAAanoD,OAQhC8pD,EAAY5pD,UAAUgkD,4BAA8B,WAChD,IAKI95B,EALAmhC,EAAiBzB,EAAY0B,sBAC7BC,EAAK,GACT,OAAIzrD,KAAKslC,cAILtlC,KAAK+jB,SAAW/J,GAChBoQ,EAAUmhC,EAAevxC,eAEpBha,KAAK+jB,SAAWV,GACrB+G,EAAUmhC,EAAeloC,YAEpBrjB,KAAK+jB,SAAWnN,GACrBwT,EAAUmhC,EAAe30C,WAGzBjX,EAAK8D,OAAOzD,KAAK+jB,kBAAkBT,GAAW,4BAC9C8G,EAAUpqB,KAAK+jB,OAAOhjB,YAE1B0qD,EAAGF,EAAeG,UAAY/rD,EAAKa,UAAU4pB,GACzCpqB,KAAKgqD,YACLyB,EAAGF,EAAeI,UAAYhsD,EAAKa,UAAUR,KAAKqqD,kBAC9CrqD,KAAKiqD,gBACLwB,EAAGF,EAAeI,WAAa,IAAMhsD,EAAKa,UAAUR,KAAKsqD,mBAG7DtqD,KAAKkqD,UACLuB,EAAGF,EAAeK,QAAUjsD,EAAKa,UAAUR,KAAKuqD,gBAC5CvqD,KAAKmqD,cACLsB,EAAGF,EAAeK,SAAW,IAAMjsD,EAAKa,UAAUR,KAAKwqD,iBAG3DxqD,KAAK+pD,YACD/pD,KAAKipD,iBACLwC,EAAGF,EAAeM,gBAAkB7rD,KAAK8oD,OAGzC2C,EAAGF,EAAeO,eAAiB9rD,KAAK8oD,SAlCrC2C,GA6Cf3B,EAAYW,yBAA2B,CACnCM,kBAAmB,KACnBC,iBAAkB,KAClBC,gBAAiB,KACjBC,eAAgB,KAChBC,MAAO,IACPE,UAAW,KACXX,eAAgB,IAChBG,gBAAiB,IACjBS,MAAO,KAQXxB,EAAY0B,sBAAwB,CAChCE,SAAU,UACV1xC,eAAgB,YAChBqJ,YAAa,SACbzM,UAAW,OACX+0C,SAAU,UACVC,OAAQ,QACRC,eAAgB,eAChBC,cAAe,eAOnBhC,EAAYiC,QAAU,IAAIjC,EACnBA,EAhXqB,GAmY5BkC,GAA2B,SAAU51C,GAarC,SAAS41C,EAAU/kC,EAAM7d,GACrB,IAAI2W,EAAQ/f,KACZ,KAAMinB,aAAgB29B,IAClB,MAAM,IAAIxgD,MAAM,6DAIpB,OADA2b,EAAQ3J,EAAO7F,KAAKvQ,KAAMinB,EAAM7d,EAAM0gD,GAAYiC,SAAS,IAAU/rD,KAC9D+f,EAmPX,OAtQArgB,EAAM2W,UAAU21C,EAAW51C,GAsB3B41C,EAAU9rD,UAAUskB,OAAS,WAEzB,OADA7kB,EAAKkU,iBAAiB,gBAAiB,EAAG,EAAGjR,UAAUC,QACnD7C,KAAKoJ,KAAKqC,UACH,KAGAzL,KAAKoJ,KAAKyB,WAOzBmhD,EAAU9rD,UAAUoL,MAAQ,SAAUR,GAalC,OAZAnL,EAAKkU,iBAAiB,kBAAmB,EAAG,EAAGjR,UAAUC,QAC/B,kBAAfiI,EACPA,EAAaG,OAAOH,GAEbA,aAAsBb,IACA,OAAzBjK,KAAKoJ,KAAKsB,WACV0I,GAAuB,kBAAmB,EAAGtI,GAAY,GAGzDqI,GAAmB,kBAAmB,EAAGrI,GAAY,IAGtD,IAAIkhD,EAAUhsD,KAAKinB,KAAMjnB,KAAKoJ,KAAKkC,MAAMR,KAGpDkhD,EAAU9rD,UAAU6kB,UAAY,WAC5BplB,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QAC1D,IAAIopD,EAAajsD,KAAKoJ,KAAKgC,SAC3B,OAAsB,OAAf6gD,EAAsB,KAAO,IAAID,EAAUhsD,KAAKinB,KAAMglC,IAGjED,EAAU9rD,UAAUgsD,QAAU,WAC1BvsD,EAAKkU,iBAAiB,iBAAkB,EAAG,EAAGjR,UAAUC,QACxD,IAAIiiB,EAAM9kB,KACV,MAA2B,OAApB8kB,EAAIC,YACPD,EAAMA,EAAIC,YAEd,OAAOD,GAGXknC,EAAU9rD,UAAUisD,aAAe,WAC/B,OAAOnsD,KAAKinB,KAAKmlC,UAOrBJ,EAAU9rD,UAAUC,IAAM,SAAUymD,EAAQhzC,GACxCjU,EAAKkU,iBAAiB,gBAAiB,EAAG,EAAGjR,UAAUC,QACvDwQ,GAAqB,gBAAiBrT,KAAKoJ,MAC3C4I,GAAwB,gBAAiB,EAAG40C,EAAQ5mD,KAAKoJ,MAAM,GAC/DzJ,EAAKmU,iBAAiB,gBAAiB,EAAGF,GAAY,GACtD,IAAIG,EAAW,IAAIpU,EAAKqU,SAGxB,OAFAhU,KAAKinB,KAAK5S,gBAAgBrU,KAAKoJ,KAAMw9C,EACvB,KAAM7yC,EAASG,aAAaN,IACnCG,EAASI,SAOpB63C,EAAU9rD,UAAUkC,OAAS,SAAUmS,EAAeX,GAGlD,GAFAjU,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QAC1DwQ,GAAqB,mBAAoBrT,KAAKoJ,MAC1CnG,MAAMC,QAAQqR,GAAgB,CAE9B,IADA,IAAIC,EAAmB,GACdzR,EAAI,EAAGA,EAAIwR,EAAc1R,SAAUE,EACxCyR,EAAiB,GAAKzR,GAAKwR,EAAcxR,GAE7CwR,EAAgBC,EAChBnQ,EAAK,wMAKTyO,GAA6B,mBAAoB,EAAGyB,EAAevU,KAAKoJ,MAAM,GAC9EzJ,EAAKmU,iBAAiB,mBAAoB,EAAGF,GAAY,GACzD,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAKinB,KAAK7kB,OAAOpC,KAAKoJ,KAAMmL,EAAeR,EAASG,aAAaN,IAC1DG,EAASI,SAQpB63C,EAAU9rD,UAAUmU,gBAAkB,SAAUuyC,EAAQhmC,EAAahN,GAMjE,GALAjU,EAAKkU,iBAAiB,4BAA6B,EAAG,EAAGjR,UAAUC,QACnEwQ,GAAqB,4BAA6BrT,KAAKoJ,MACvD4I,GAAwB,4BAA6B,EAAG40C,EAAQ5mD,KAAKoJ,MAAM,GAC3E2J,GAAiB,4BAA6B,EAAG6N,GAAa,GAC9DjhB,EAAKmU,iBAAiB,4BAA6B,EAAGF,GAAY,GAC5C,YAAlB5T,KAAKwkB,UAA4C,UAAlBxkB,KAAKwkB,SACpC,KAAM,qCACFxkB,KAAKwkB,SACL,0BAER,IAAIzQ,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAKinB,KAAK5S,gBAAgBrU,KAAKoJ,KAAMw9C,EAAQhmC,EAAa7M,EAASG,aAAaN,IACzEG,EAASI,SAMpB63C,EAAU9rD,UAAUW,OAAS,SAAU+S,GAInC,OAHAjU,EAAKkU,iBAAiB,mBAAoB,EAAG,EAAGjR,UAAUC,QAC1DwQ,GAAqB,mBAAoBrT,KAAKoJ,MAC9CzJ,EAAKmU,iBAAiB,mBAAoB,EAAGF,GAAY,GAClD5T,KAAKG,IAAI,KAAMyT,IAQ1Bo4C,EAAU9rD,UAAUmsD,YAAc,SAAUC,EAAmB14C,EAAY24C,GAQvE,GAPA5sD,EAAKkU,iBAAiB,wBAAyB,EAAG,EAAGjR,UAAUC,QAC/DwQ,GAAqB,wBAAyBrT,KAAKoJ,MACnDzJ,EAAKmU,iBAAiB,wBAAyB,EAAGw4C,GAAmB,GACrE3sD,EAAKmU,iBAAiB,wBAAyB,EAAGF,GAAY,GAG9DL,GAAgB,wBAAyB,EAAGg5C,GAAc,GACpC,YAAlBvsD,KAAKwkB,UAA4C,UAAlBxkB,KAAKwkB,SACpC,KAAM,iCACFxkB,KAAKwkB,SACL,+BAEapS,IAAjBm6C,IACAA,GAAe,GAEnB,IAAIx4C,EAAW,IAAIpU,EAAKqU,SACE,oBAAfJ,GACPG,EAASI,QAAQsV,OAAM,eAE3B,IAAI+iC,EAAkB,SAAUtoD,EAAOyQ,EAAWC,GAC1C1Q,EACA6P,EAAS8V,OAAO3lB,GAGhB6P,EAAS4V,QAAQ,IAAIjV,GAAkBC,EAAWC,IAE5B,oBAAfhB,GACPA,EAAW1P,EAAOyQ,EAAWC,IAIrC,OADA5U,KAAKinB,KAAKwlC,iBAAiBzsD,KAAKoJ,KAAMkjD,EAAmBE,EAAiBD,GACnEx4C,EAASI,SAOpB63C,EAAU9rD,UAAUwsD,YAAc,SAAU36C,EAAU6B,GAClDjU,EAAKkU,iBAAiB,wBAAyB,EAAG,EAAGjR,UAAUC,QAC/DwQ,GAAqB,wBAAyBrT,KAAKoJ,MACnD2J,GAAiB,wBAAyB,EAAGhB,GAAU,GACvDpS,EAAKmU,iBAAiB,wBAAyB,EAAGF,GAAY,GAC9D,IAAIG,EAAW,IAAIpU,EAAKqU,SAExB,OADAhU,KAAKinB,KAAK5S,gBAAgBrU,KAAKoJ,KAAKkC,MAAM,aAAcyG,EAAU,KAAMgC,EAASG,aAAaN,IACvFG,EAASI,SAOpB63C,EAAU9rD,UAAUwG,KAAO,SAAUlH,EAAOoU,GACxCjU,EAAKkU,iBAAiB,iBAAkB,EAAG,EAAGjR,UAAUC,QACxDwQ,GAAqB,iBAAkBrT,KAAKoJ,MAC5C4I,GAAwB,iBAAkB,EAAGxS,EAAOQ,KAAKoJ,MAAM,GAC/DzJ,EAAKmU,iBAAiB,iBAAkB,EAAGF,GAAY,GACvD,IASIO,EATAe,EAAMlV,KAAKinB,KAAK8+B,aAChBjlD,EAAOgU,GAAWI,GAMlBy3C,EAAmB3sD,KAAKsL,MAAMxK,GAC9B8rD,EAAU5sD,KAAKsL,MAAMxK,GAazB,OAVIqT,EADS,MAAT3U,EACUmtD,EAAiBxsD,IAAIX,EAAOoU,GAAYizB,MAAK,WAAc,OAAO+lB,KAGlE3lB,QAAQtd,QAAQijC,GAE9BD,EAAiB9lB,KAAO1yB,EAAQ0yB,KAAK/iC,KAAKqQ,GAC1Cw4C,EAAiBljC,MAAQtV,EAAQ0yB,KAAK/iC,KAAKqQ,OAAS/B,GAC1B,oBAAfwB,GACPO,EAAQsV,OAAM,eAEXkjC,GAKXX,EAAU9rD,UAAUsuC,aAAe,WAE/B,OADAn7B,GAAqB,yBAA0BrT,KAAKoJ,MAC7C,IAAIqK,GAAazT,KAAKinB,KAAMjnB,KAAKoJ,OAE5C/J,OAAOC,eAAe0sD,EAAU9rD,UAAW,WAAY,CACnDO,IAAK,WACD,OAAOT,KAAKmsD,gBAEhB3hD,YAAY,EACZC,cAAc,IAElBpL,OAAOC,eAAe0sD,EAAU9rD,UAAW,MAAO,CAC9CO,IAAK,WACD,OAAOT,KAAKwkB,UAEhBha,YAAY,EACZC,cAAc,IAElBpL,OAAOC,eAAe0sD,EAAU9rD,UAAW,SAAU,CACjDO,IAAK,WACD,OAAOT,KAAK+kB,aAEhBva,YAAY,EACZC,cAAc,IAElBpL,OAAOC,eAAe0sD,EAAU9rD,UAAW,OAAQ,CAC/CO,IAAK,WACD,OAAOT,KAAKksD,WAEhB1hD,YAAY,EACZC,cAAc,IAEXuhD,EAvQmB,CAwQ5BhlC;;;;;;;;;;;;;;;;GAOFA,GAAM9D,uBAAyB8oC,GAC/BlwB,GAAU5Y,uBAAyB8oC;;;;;;;;;;;;;;;;;AAqBnC,IAsOIa,GAtOAC,GAA0B,WAC1B,SAASA,IAGL9sD,KAAK+sB,SAAW,GAChB/sB,KAAK+sD,WAAa,EAClB/sD,KAAKR,MAAQ,KAEjB,OAAOstD,EARkB,GAezBE,GAAsB,WAOtB,SAASA,EAAKC,EAAOC,EAASrpC,QACZ,IAAVopC,IAAoBA,EAAQ,SAChB,IAAZC,IAAsBA,EAAU,WACtB,IAAVrpC,IAAoBA,EAAQ,IAAIipC,IACpC9sD,KAAKitD,MAAQA,EACbjtD,KAAKktD,QAAUA,EACfltD,KAAK6jB,MAAQA,EAgLjB,OAxKAmpC,EAAK9sD,UAAUitD,QAAU,SAAUC,GAE/B,IAAIhkD,EAAOgkD,aAAmBnjD,EAAOmjD,EAAU,IAAInjD,EAAKmjD,GACpD9hD,EAAQtL,KAAMiQ,EAAO7G,EAAKsB,WAC9B,MAAgB,OAATuF,EAAe,CAClB,IAAIiI,EAAYvY,EAAKuf,QAAQ5T,EAAMuY,MAAMkJ,SAAU9c,IAAS,IAAI68C,GAChExhD,EAAQ,IAAI0hD,EAAK/8C,EAAM3E,EAAO4M,GAC9B9O,EAAOA,EAAKwB,WACZqF,EAAO7G,EAAKsB,WAEhB,OAAOY,GAOX0hD,EAAK9sD,UAAU0Y,SAAW,WACtB,OAAO5Y,KAAK6jB,MAAMrkB,OAOtBwtD,EAAK9sD,UAAUmtD,SAAW,SAAU7tD,GAChCG,EAAK8D,OAAwB,qBAAVjE,EAAuB,iCAC1CQ,KAAK6jB,MAAMrkB,MAAQA,EACnBQ,KAAKstD,kBAKTN,EAAK9sD,UAAUotB,MAAQ,WACnBttB,KAAK6jB,MAAMrkB,MAAQ,KACnBQ,KAAK6jB,MAAMkJ,SAAW,GACtB/sB,KAAK6jB,MAAMkpC,WAAa,EACxB/sD,KAAKstD,kBAKTN,EAAK9sD,UAAUqkB,YAAc,WACzB,OAAOvkB,KAAK6jB,MAAMkpC,WAAa,GAKnCC,EAAK9sD,UAAUuL,QAAU,WACrB,OAA2B,OAApBzL,KAAK4Y,aAAwB5Y,KAAKukB,eAO7CyoC,EAAK9sD,UAAUsY,aAAe,SAAUE,GACpC,IAAIqH,EAAQ/f,KACZkH,EAAKlH,KAAK6jB,MAAMkJ,UAAU,SAAUzhB,EAAOkT,GACvC9F,EAAO,IAAIs0C,EAAK1hD,EAAOyU,EAAOvB,QAYtCwuC,EAAK9sD,UAAUqtD,kBAAoB,SAAU70C,EAAQ80C,EAAaC,GAC1DD,IAAgBC,GAChB/0C,EAAO1Y,MAEXA,KAAKwY,cAAa,SAAUlN,GACxBA,EAAMiiD,kBAAkB70C,GAAyB,EAAM+0C,MAEvDD,GAAeC,GACf/0C,EAAO1Y,OAWfgtD,EAAK9sD,UAAUwtD,gBAAkB,SAAUh1C,EAAQ80C,GAC/C,IAAIj4C,EAAOi4C,EAAcxtD,KAAOA,KAAKoL,SACrC,MAAgB,OAATmK,EAAe,CAClB,GAAImD,EAAOnD,GACP,OAAO,EAEXA,EAAOA,EAAKnK,SAEhB,OAAO,GASX4hD,EAAK9sD,UAAUytD,oCAAsC,SAAUj1C,GAC3D1Y,KAAKwY,cAAa,SAAUlN,GACC,OAArBA,EAAMsN,WACNF,EAAOpN,GAGPA,EAAMqiD,oCAAoCj1C,OAOtDs0C,EAAK9sD,UAAUkJ,KAAO,WAClB,OAAO,IAAIa,EAAsB,OAAjBjK,KAAKktD,QACfltD,KAAKitD,MACLjtD,KAAKktD,QAAQ9jD,OAAS,IAAMpJ,KAAKitD,QAK3CD,EAAK9sD,UAAUY,KAAO,WAClB,OAAOd,KAAKitD,OAKhBD,EAAK9sD,UAAUkL,OAAS,WACpB,OAAOpL,KAAKktD,SAOhBF,EAAK9sD,UAAUotD,eAAiB,WACP,OAAjBttD,KAAKktD,SACLltD,KAAKktD,QAAQU,aAAa5tD,KAAKitD,MAAOjtD,OAU9CgtD,EAAK9sD,UAAU0tD,aAAe,SAAU91C,EAAWxM,GAC/C,IAAIuiD,EAAaviD,EAAMG,UACnBqiD,EAAcnuD,EAAKwB,SAASnB,KAAK6jB,MAAMkJ,SAAUjV,GACjD+1C,GAAcC,UACP9tD,KAAK6jB,MAAMkJ,SAASjV,GAC3B9X,KAAK6jB,MAAMkpC,aACX/sD,KAAKstD,kBAECO,GAAeC,IACrB9tD,KAAK6jB,MAAMkJ,SAASjV,GAAaxM,EAAMuY,MACvC7jB,KAAK6jB,MAAMkpC,aACX/sD,KAAKstD,mBAGNN,EA7Lc,IAwNzB,SAAWH,GAIPA,EAAkBA,EAAkB,OAAS,GAAK,MAGlDA,EAAkBA,EAAkB,QAAU,GAAK,OAGnDA,EAAkBA,EAAkB,aAAe,GAAK,YAGxDA,EAAkBA,EAAkB,oBAAsB,GAAK,mBAE/DA,EAAkBA,EAAkB,eAAiB,GAAK,eAf9D,CAgBGA,KAAsBA,GAAoB,KAS7CjI,GAAKmJ,yBAA2B,GAMhCnJ,GAAK1kD,UAAUulD,kBAAoB,WAO/BzlD,KAAKguD,sBAAwB,IAAIhB,IAUrCpI,GAAK1kD,UAAUusD,iBAAmB,SAAUrjD,EAAMkjD,EAAmB14C,EAAY24C,GAC7EvsD,KAAKmuC,KAAK,kBAAoB/kC,GAE9B,IAAI+f,EAAgB,aAChB8kC,EAAW,IAAIjC,GAAUhsD,KAAMoJ,GACnC6kD,EAAS5lC,GAAG,QAASc,GACrB,IAAI+kC,EAAY,WACZD,EAAShlC,IAAI,QAASE,IAGtBkjC,EAAc,CACdjjD,KAAMA,EACNhH,OAAQkqD,EACR14C,WAAYA,EAEZ+xB,OAAQ,KAERwoB,MAAOtsD,IAEP0qD,aAAcA,EAEd6B,WAAY,EAEZF,UAAWA,EAEXG,YAAa,KACbC,eAAgB,KAChBC,qBAAsB,KACtBC,yBAA0B,KAC1BC,8BAA+B,MAG/BC,EAAe1uD,KAAK2uD,gBAAgBvlD,GACxCijD,EAAYkC,qBAAuBG,EACnC,IAAI9H,EAASyF,EAAYjqD,OAAOssD,EAAap4C,OAC7C,QAAelE,IAAXw0C,GAKA,GAHAyF,EAAY6B,YACZ7B,EAAYmC,yBAA2B,KACvCnC,EAAYoC,8BAAgC,KACxCpC,EAAYz4C,WAAY,CAExB,IAAIgB,EAAW,IAAIgP,GAAayoC,EAAYkC,qBAAsB,IAAIvC,GAAUhsD,KAAMqsD,EAAYjjD,MAAO4Q,IACzGqyC,EAAYz4C,WAAW,MAAM,EAAOgB,QAGvC,CACDvC,GAAqB,qCAAsCu0C,EAAQyF,EAAYjjD,MAE/EijD,EAAY1mB,OAASknB,GAAkB+B,IACvC,IAAIC,EAAY7uD,KAAKguD,sBAAsBb,QAAQ/jD,GAC/C0lD,EAAYD,EAAUj2C,YAAc,GACxCk2C,EAAUpoD,KAAK2lD,GACfwC,EAAUxB,SAASyB,GAInB,IAAIC,OAAkB,EACtB,GAAsB,kBAAXnI,GACI,OAAXA,GACAjnD,EAAKwB,SAASylD,EAAQ,aAEtBmI,EAAkBpvD,EAAKuf,QAAQ0nC,EAAQ,aACvCjnD,EAAK8D,OAAOqO,GAAgBi9C,GAAkB,wHAG7C,CACD,IAAIC,EAAchvD,KAAK8lD,gBAAgBv6B,uBAAuBniB,IAC1DmX,GAAa9I,WACjBs3C,EAAkBC,EAAY33C,cAAcf,MAEhDy4C,EAAoDA,EACpD,IAAIjjC,EAAe9rB,KAAKkmD,uBACpBW,EAAoBrkC,GAAeokC,EAAQmI,GAC3Cj5C,EAAU4W,GAA6Bm6B,EAAmB6H,EAAc5iC,GAC5EugC,EAAYmC,yBAA2B3H,EACvCwF,EAAYoC,8BAAgC34C,EAC5Cu2C,EAAYiC,eAAiBtuD,KAAK2mD,kBAClC,IAAIltB,EAASz5B,KAAK8lD,gBAAgBnkB,mBAAmBv4B,EAAM0M,EAASu2C,EAAYiC,eAAgBjC,EAAYE,cAC5GvsD,KAAKilD,YAAY9a,0BAA0B/gC,EAAMqwB,GACjDz5B,KAAKivD,2BAUbrK,GAAK1kD,UAAUyuD,gBAAkB,SAAUvlD,EAAM8lD,GAC7C,OAAQlvD,KAAK8lD,gBAAgBv6B,uBAAuBniB,EAAM8lD,IACtD3uC,GAAa9I,YAarBmtC,GAAK1kD,UAAU+uD,uBAAyB,SAAU15C,GAC9C,IAAIwK,EAAQ/f,KAMZ,QALa,IAATuV,IAAmBA,EAAOvV,KAAKguD,uBAE9Bz4C,GACDvV,KAAKmvD,qCAAqC55C,GAEtB,OAApBA,EAAKqD,WAAqB,CAC1B,IAAIw2C,EAAQpvD,KAAKqvD,uBAAuB95C,GACxC5V,EAAK8D,OAAO2rD,EAAMvsD,OAAS,EAAG,yCAC9B,IAAIysD,EAASF,EAAMroC,OAAM,SAAUslC,GAAe,OAAOA,EAAY1mB,SAAWknB,GAAkB+B,OAE9FU,GACAtvD,KAAKuvD,sBAAsBh6C,EAAKnM,OAAQgmD,QAGvC75C,EAAKgP,eACVhP,EAAKiD,cAAa,SAAUN,GACxB6H,EAAMkvC,uBAAuB/2C,OAYzC0sC,GAAK1kD,UAAUqvD,sBAAwB,SAAUnmD,EAAMgmD,GASnD,IARA,IAAIrvC,EAAQ/f,KAERwvD,EAAeJ,EAAMpvC,KAAI,SAAUyvC,GACnC,OAAOA,EAAInB,kBAEXoB,EAAc1vD,KAAK2uD,gBAAgBvlD,EAAMomD,GACzCG,EAAaD,EACbE,EAAaF,EAAY72C,OACpB9V,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAAK,CACnC,IAAI0sD,EAAML,EAAMrsD,GAChBpD,EAAK8D,OAAOgsD,EAAI9pB,SAAWknB,GAAkB+B,IAAK,iEAClDa,EAAI9pB,OAASknB,GAAkBgD,KAC/BJ,EAAIrB,aACJ,IAAI1iD,EAAezB,EAAKyB,aAAatC,EAAMqmD,EAAIrmD,MAE/CumD,EAAaA,EAAWt3C,YAAY3M,EAAmC+jD,EAAIjB,0BAE/E,IAAIsB,EAAaH,EAAWr5C,KAAI,GAC5By5C,EAAa3mD,EAEjBpJ,KAAK+oC,QAAQ0T,IAAIsT,EAAWhvD,WAAY+uD,GAAY,SAAUnqB,GAC1D5lB,EAAMouB,KAAK,2BAA4B,CACnC/kC,KAAM2mD,EAAWhvD,WACjB4kC,OAAQA,IAEZ,IAAIlM,EAAS,GACb,GAAe,OAAXkM,EAAiB,CAIjB,IADA,IAAI/c,EAAY,GACP7lB,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAAK,CAGnC,GAFAqsD,EAAMrsD,GAAG4iC,OAASknB,GAAkBmD,UACpCv2B,EAASA,EAAOgC,OAAO1b,EAAM+lC,gBAAgBzvB,aAAa+4B,EAAMrsD,GAAGurD,iBAC/Dc,EAAMrsD,GAAG6Q,WAAY,CAErB,IAAI2B,EAAO65C,EAAMrsD,GAAG0rD,8BAChB3pC,EAAM,IAAIknC,GAAUjsC,EAAOqvC,EAAMrsD,GAAGqG,MACpCwL,EAAW,IAAIgP,GAAarO,EAAMuP,EAAK9K,IAC3C4O,EAAUliB,KAAK0oD,EAAMrsD,GAAG6Q,WAAW9P,KAAK,KAAM,MAAM,EAAM8Q,IAE9Dw6C,EAAMrsD,GAAGmrD,YAGbnuC,EAAMovC,qCAAqCpvC,EAAMiuC,sBAAsBb,QAAQ/jD,IAE/E2W,EAAMkvC,yBACNlvC,EAAMklC,YAAY9a,0BAA0B/gC,EAAMqwB,GAElD,IAAS12B,EAAI,EAAGA,EAAI6lB,EAAU/lB,OAAQE,IAClC0G,EAAemf,EAAU7lB,QAG5B,CAED,GAAe,cAAX4iC,EACA,IAAS5iC,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAC1BqsD,EAAMrsD,GAAG4iC,SAAWknB,GAAkBoD,iBACtCb,EAAMrsD,GAAG4iC,OAASknB,GAAkBqD,YAGpCd,EAAMrsD,GAAG4iC,OAASknB,GAAkB+B,QAI3C,CACDvqD,EAAK,kBAAoB0rD,EAAWhvD,WAAa,YAAc4kC,GAC/D,IAAS5iC,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAC9BqsD,EAAMrsD,GAAG4iC,OAASknB,GAAkBqD,YACpCd,EAAMrsD,GAAGsrD,YAAc1oB,EAG/B5lB,EAAMwmC,mBAAmBn9C,MAE9BwmD,IAePhL,GAAK1kD,UAAUqmD,mBAAqB,SAAUnc,GAC1C,IAAI+lB,EAA0BnwD,KAAKowD,4BAA4BhmB,GAC3DhhC,EAAO+mD,EAAwB/mD,OAC/BgmD,EAAQpvD,KAAKqvD,uBAAuBc,GAExC,OADAnwD,KAAKqwD,uBAAuBjB,EAAOhmD,GAC5BA,GAUXw7C,GAAK1kD,UAAUmwD,uBAAyB,SAAUjB,EAAOhmD,GACrD,GAAqB,IAAjBgmD,EAAMvsD,OAAV,CAcA,IATA,IAAI+lB,EAAY,GACZ6Q,EAAS,GAET62B,EAAclB,EAAMt1B,QAAO,SAAUqpB,GACrC,OAAOA,EAAExd,SAAWknB,GAAkB+B,OAEtCY,EAAec,EAAYtwC,KAAI,SAAUmjC,GACzC,OAAOA,EAAEmL,kBAEJvrD,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAAK,CACnC,IAAIspD,EAAc+C,EAAMrsD,GACpB2I,EAAezB,EAAKyB,aAAatC,EAAMijD,EAAYjjD,MACnDmnD,GAAmB,EAAOlC,OAAc,EAE5C,GADA1uD,EAAK8D,OAAwB,OAAjBiI,EAAuB,iEAC/B2gD,EAAY1mB,SAAWknB,GAAkBqD,YACzCK,GAAmB,EACnBlC,EAAchC,EAAYgC,YAC1B50B,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBzvB,aAAag2B,EAAYiC,gBAAgB,SAEpF,GAAIjC,EAAY1mB,SAAWknB,GAAkB+B,IAE9C,GAAIvC,EAAY+B,YAAcxJ,GAAKmJ,yBAC/BwC,GAAmB,EACnBlC,EAAc,WACd50B,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBzvB,aAAag2B,EAAYiC,gBAAgB,QAEpF,CAED,IAAIU,EAAchvD,KAAK2uD,gBAAgBtC,EAAYjjD,KAAMomD,GACzDnD,EAAYkC,qBAAuBS,EACnC,IAAIptB,EAAUwtB,EAAMrsD,GAAGX,OAAO4sD,EAAY14C,OAC1C,QAAgBlE,IAAZwvB,EAAuB,CACvBvvB,GAAqB,qCAAsCuvB,EAASyqB,EAAYjjD,MAChF,IAAIonD,EAAchuC,GAAeof,GAC7B6uB,EAAyC,kBAAZ7uB,GAClB,MAAXA,GACAjiC,EAAKwB,SAASygC,EAAS,aACtB6uB,IAEDD,EAAcA,EAAY74C,eAAeq3C,EAAY33C,gBAEzD,IAAIq5C,EAAarE,EAAYiC,eACzBxiC,EAAe9rB,KAAKkmD,uBACpByK,EAAkBjkC,GAA6B8jC,EAAaxB,EAAaljC,GAC7EugC,EAAYmC,yBAA2BgC,EACvCnE,EAAYoC,8BAAgCkC,EAC5CtE,EAAYiC,eAAiBtuD,KAAK2mD,kBAElC6I,EAAajwB,OAAOiwB,EAAa/qD,QAAQisD,GAAa,GACtDj3B,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBnkB,mBAAmB0qB,EAAYjjD,KAAMunD,EAAiBtE,EAAYiC,eAAgBjC,EAAYE,eAC1I9yB,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBzvB,aAAaq6B,GAAY,SAGrEH,GAAmB,EACnBlC,EAAc,SACd50B,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBzvB,aAAag2B,EAAYiC,gBAAgB,IAMjG,GAFAtuD,KAAKilD,YAAY9a,0BAA0B/gC,EAAMqwB,GACjDA,EAAS,GACL82B,IAEAnB,EAAMrsD,GAAG4iC,OAASknB,GAAkBmD,UAGpC,SAAW9B,GACP3oD,WAAW2oD,EAAW1oD,KAAKC,MAAM,IADrC,CAEG2pD,EAAMrsD,GAAGmrD,WACRkB,EAAMrsD,GAAG6Q,YACT,GAAoB,WAAhBy6C,EAA0B,CAC1B,IAAIvpC,EAAM,IAAIknC,GAAUhsD,KAAMovD,EAAMrsD,GAAGqG,MAEnCwnD,EAAiCxB,EAAMrsD,GAAGwrD,qBAC1C35C,EAAW,IAAIgP,GAAagtC,EAAW9rC,EAAK9K,IAChD4O,EAAUliB,KAAK0oD,EAAMrsD,GAAG6Q,WAAW9P,KAAK,KAAM,MAAM,EAAO8Q,SAG3DgU,EAAUliB,KAAK0oD,EAAMrsD,GAAG6Q,WAAW9P,KAAK,KAAM,IAAIM,MAAMiqD,IAAc,EAAO,OAM7FruD,KAAKmvD,qCAAqCnvD,KAAKguD,uBAE/C,IAASjrD,EAAI,EAAGA,EAAI6lB,EAAU/lB,OAAQE,IAClC0G,EAAemf,EAAU7lB,IAG7B/C,KAAKivD,2BAWTrK,GAAK1kD,UAAUkwD,4BAA8B,SAAUhnD,GACnD,IAAIkP,EAEAu4C,EAAkB7wD,KAAKguD,sBAC3B11C,EAAQlP,EAAKsB,WACb,MAAiB,OAAV4N,GAAiD,OAA/Bu4C,EAAgBj4C,WACrCi4C,EAAkBA,EAAgB1D,QAAQ70C,GAC1ClP,EAAOA,EAAKwB,WACZ0N,EAAQlP,EAAKsB,WAEjB,OAAOmmD,GAUXjM,GAAK1kD,UAAUmvD,uBAAyB,SAAUwB,GAE9C,IAAIC,EAAmB,GAMvB,OALA9wD,KAAK+wD,mCAAmCF,EAAiBC,GAEzDA,EAAiBnqD,MAAK,SAAUZ,EAAGC,GAC/B,OAAOD,EAAEooD,MAAQnoD,EAAEmoD,SAEhB2C,GAQXlM,GAAK1kD,UAAU6wD,mCAAqC,SAAUx7C,EAAM65C,GAChE,IAAIrvC,EAAQ/f,KACR8uD,EAAYv5C,EAAKqD,WACrB,GAAkB,OAAdk2C,EACA,IAAK,IAAI/rD,EAAI,EAAGA,EAAI+rD,EAAUjsD,OAAQE,IAClCqsD,EAAM1oD,KAAKooD,EAAU/rD,IAG7BwS,EAAKiD,cAAa,SAAUlN,GACxByU,EAAMgxC,mCAAmCzlD,EAAO8jD,OAUxDxK,GAAK1kD,UAAUivD,qCAAuC,SAAU55C,GAC5D,IAAIwK,EAAQ/f,KACRovD,EAAQ75C,EAAKqD,WACjB,GAAIw2C,EAAO,CAEP,IADA,IAAI4B,EAAK,EACA78B,EAAO,EAAGA,EAAOi7B,EAAMvsD,OAAQsxB,IAChCi7B,EAAMj7B,GAAMwR,SAAWknB,GAAkBmD,YACzCZ,EAAM4B,GAAM5B,EAAMj7B,GAClB68B,KAGR5B,EAAMvsD,OAASmuD,EACfz7C,EAAK83C,SAAS+B,EAAMvsD,OAAS,EAAIusD,EAAQ,MAE7C75C,EAAKiD,cAAa,SAAUN,GACxB6H,EAAMovC,qCAAqCj3C,OAYnD0sC,GAAK1kD,UAAU+mD,mBAAqB,SAAU79C,GAC1C,IAAI2W,EAAQ/f,KACRszB,EAAetzB,KAAKowD,4BAA4BhnD,GAAMA,OACtDynD,EAAkB7wD,KAAKguD,sBAAsBb,QAAQ/jD,GAQzD,OAPAynD,EAAgBnD,iBAAgB,SAAUn4C,GACtCwK,EAAMkxC,yBAAyB17C,MAEnCvV,KAAKixD,yBAAyBJ,GAC9BA,EAAgBtD,mBAAkB,SAAUh4C,GACxCwK,EAAMkxC,yBAAyB17C,MAE5B+d,GASXsxB,GAAK1kD,UAAU+wD,yBAA2B,SAAU17C,GAChD,IAAI65C,EAAQ75C,EAAKqD,WACjB,GAAc,OAAVw2C,EAAgB,CAQhB,IALA,IAAIxmC,EAAY,GAGZ6Q,EAAS,GACTy3B,GAAY,EACPnuD,EAAI,EAAGA,EAAIqsD,EAAMvsD,OAAQE,IAC9B,GAAIqsD,EAAMrsD,GAAG4iC,SAAWknB,GAAkBoD,uBACrC,GAAIb,EAAMrsD,GAAG4iC,SAAWknB,GAAkBgD,KAC3ClwD,EAAK8D,OAAOytD,IAAanuD,EAAI,EAAG,mDAChCmuD,EAAWnuD,EAEXqsD,EAAMrsD,GAAG4iC,OAASknB,GAAkBoD,iBACpCb,EAAMrsD,GAAGsrD,YAAc,WAOvB,GAJA1uD,EAAK8D,OAAO2rD,EAAMrsD,GAAG4iC,SAAWknB,GAAkB+B,IAAK,0CAEvDQ,EAAMrsD,GAAGmrD,YACTz0B,EAASA,EAAOgC,OAAOz7B,KAAK8lD,gBAAgBzvB,aAAa+4B,EAAMrsD,GAAGurD,gBAAgB,IAC9Ec,EAAMrsD,GAAG6Q,WAAY,CACrB,IAAIgB,EAAW,KACfgU,EAAUliB,KAAK0oD,EAAMrsD,GAAG6Q,WAAW9P,KAAK,KAAM,IAAIM,MAAM,QAAQ,EAAOwQ,KAIjE,IAAds8C,EAEA37C,EAAK83C,SAAS,MAId+B,EAAMvsD,OAASquD,EAAW,EAG9BlxD,KAAKilD,YAAY9a,0BAA0B50B,EAAKnM,OAAQqwB,GACxD,IAAS12B,EAAI,EAAGA,EAAI6lB,EAAU/lB,OAAQE,IAClC0G,EAAemf,EAAU7lB;;;;;;;;;;;;;;;;;AAsBrC,IAUIouD,GAVAC,GAAsB,cAStBC,GAAsC,kCAKtCC,GAA6B,WAC7B,SAASA,IAILtxD,KAAKuxD,OAAS,GAKdvxD,KAAKwxD,gBAAiB,EA4I1B,OA1IAF,EAAYhmB,YAAc,WAItB,OAHK6lB,KACDA,GAAkB,IAAIG,GAEnBH,IAGXG,EAAYpxD,UAAU8iD,UAAY,WAC9B,IAAItzC,EAAKC,EAAIysB,EAAKtsB,EAClB,IACI,IAAK,IAAIE,EAAKtQ,EAAMqQ,SAAS1Q,OAAOmH,KAAKxG,KAAKuxD,SAAU90B,EAAKzsB,EAAGC,QAASwsB,EAAGvsB,KAAMusB,EAAKzsB,EAAGC,OAAQ,CAC9F,IAAIwhD,EAAUh1B,EAAGj9B,MACjB,IACI,IAAK,IAAI+jD,GAAMnnB,OAAM,EAAQ18B,EAAMqQ,SAAS1Q,OAAOmH,KAAKxG,KAAKuxD,OAAOE,MAAajO,EAAKD,EAAGtzC,QAASuzC,EAAGtzC,KAAMszC,EAAKD,EAAGtzC,OAAQ,CACvH,IAAIyhD,EAAQlO,EAAGhkD,MACfQ,KAAKuxD,OAAOE,GAASC,GAAO1O,aAGpC,MAAOpmB,GAASR,EAAM,CAAEl4B,MAAO04B,GAC/B,QACI,IACQ4mB,IAAOA,EAAGtzC,OAASJ,EAAKyzC,EAAGjzC,SAASR,EAAGS,KAAKgzC,GAEpD,QAAU,GAAInnB,EAAK,MAAMA,EAAIl4B,SAIzC,MAAOmM,GAASX,EAAM,CAAExL,MAAOmM,GAC/B,QACI,IACQosB,IAAOA,EAAGvsB,OAASP,EAAKK,EAAGM,SAASX,EAAGY,KAAKP,GAEpD,QAAU,GAAIN,EAAK,MAAMA,EAAIxL,SAGrCotD,EAAYpxD,UAAU+iD,OAAS,WAC3B,IAAInmB,EAAKntB,EAAIqtB,EAAKltB,EAClB,IACI,IAAK,IAAIE,EAAKtQ,EAAMqQ,SAAS1Q,OAAOmH,KAAKxG,KAAKuxD,SAAU90B,EAAKzsB,EAAGC,QAASwsB,EAAGvsB,KAAMusB,EAAKzsB,EAAGC,OAAQ,CAC9F,IAAIwhD,EAAUh1B,EAAGj9B,MACjB,IACI,IAAK,IAAI+jD,GAAMvmB,OAAM,EAAQt9B,EAAMqQ,SAAS1Q,OAAOmH,KAAKxG,KAAKuxD,OAAOE,MAAajO,EAAKD,EAAGtzC,QAASuzC,EAAGtzC,KAAMszC,EAAKD,EAAGtzC,OAAQ,CACvH,IAAIyhD,EAAQlO,EAAGhkD,MACfQ,KAAKuxD,OAAOE,GAASC,GAAOzO,UAGpC,MAAOhmB,GAASD,EAAM,CAAE94B,MAAO+4B,GAC/B,QACI,IACQumB,IAAOA,EAAGtzC,OAASJ,EAAKyzC,EAAGjzC,SAASR,EAAGS,KAAKgzC,GAEpD,QAAU,GAAIvmB,EAAK,MAAMA,EAAI94B,SAIzC,MAAO64B,GAASD,EAAM,CAAE54B,MAAO64B,GAC/B,QACI,IACQN,IAAOA,EAAGvsB,OAASP,EAAKK,EAAGM,SAASX,EAAGY,KAAKP,GAEpD,QAAU,GAAI8sB,EAAK,MAAMA,EAAI54B,SASrCotD,EAAYpxD,UAAUyxD,gBAAkB,SAAU7M,EAAKC,EAAc1R,GACjE,IAAIqe,EAAQre,GAAOyR,EAAItd,QAAQ4pB,SACjBh/C,IAAVs/C,GACAvtD,EAAM,8DACFitD,GACA,kDAER,IAAIxgD,EAAYF,GAAcghD,GAC1B3gD,EAAWH,EAAUG,SACrB6gD,OAAiBx/C,EACE,qBAAZgjC,IACPwc,EAAiB,gGAAYP,KAE7BO,IACAF,EAAQ,UAAYE,EAAiB,OAAS7gD,EAAS9C,UACvD2C,EAAYF,GAAcghD,GAC1B3gD,EAAWH,EAAUG,UAEzBuC,GAAY,gCAAiC,EAAG1C,GAC3CA,EAAUxH,KAAKqC,WAChBtH,EAAM,4FAGV,IAAI8iB,EAAOjnB,KAAK6xD,WAAW9gD,EAAU+zC,EAAKC,GAC1C,OAAO99B,EAAKmlC,UAOhBkF,EAAYpxD,UAAU4xD,WAAa,SAAU7qC,GACzC,IAAI8qC,EAAWpyD,EAAKuf,QAAQlf,KAAKuxD,OAAQtqC,EAAK69B,IAAIhkD,MAE7CixD,GAAYpyD,EAAKuf,QAAQ6yC,EAAU9qC,EAAK6xB,UAAU5pC,iBAAmB+X,GACtE9iB,EAAM,YAAc8iB,EAAK69B,IAAIhkD,KAAO,IAAMmmB,EAAK6xB,UAAY,+BAE/D7xB,EAAK+7B,mBACE+O,EAAS9qC,EAAK6xB,UAAU5pC,gBAUnCoiD,EAAYpxD,UAAU2xD,WAAa,SAAU9gD,EAAU+zC,EAAKC,GACxD,IAAIgN,EAAWpyD,EAAKuf,QAAQlf,KAAKuxD,OAAQzM,EAAIhkD,MACxCixD,IACDA,EAAW,GACX/xD,KAAKuxD,OAAOzM,EAAIhkD,MAAQixD,GAE5B,IAAI9qC,EAAOtnB,EAAKuf,QAAQ6yC,EAAUhhD,EAAS7B,eAM3C,OALI+X,GACA9iB,EAAM,2HAEV8iB,EAAO,IAAI29B,GAAK7zC,EAAU/Q,KAAKwxD,eAAgB1M,EAAKC,GACpDgN,EAAShhD,EAAS7B,eAAiB+X,EAC5BA,GAMXqqC,EAAYpxD,UAAU2kD,gBAAkB,SAAUA,GAC9C7kD,KAAKwxD,eAAiB3M,GAEnByM,EAtJqB,GA6K5BpJ,GAA0B,WAK1B,SAASA,EAASx0C,GACd1T,KAAK0T,MAAQA,EACPA,aAAiBkxC,IACnBzgD,EAAM,wEAGVnE,KAAKyc,MAAQ,IAAIuvC,GAAUt4C,EAAOzJ,EAAK+kB,OACvChvB,KAAKgyD,SAAW,IAAIC,GAAkBjyD,MA0E1C,OAxEAX,OAAOC,eAAe4oD,EAAShoD,UAAW,MAAO,CAC7CO,IAAK,WACD,OAAOT,KAAK0T,MAAMoxC,KAEtBt6C,YAAY,EACZC,cAAc,IAElBy9C,EAAShoD,UAAU4kB,IAAM,SAAU1b,GAG/B,OAFApJ,KAAKkyD,cAAc,OACnBvyD,EAAKkU,iBAAiB,eAAgB,EAAG,EAAGjR,UAAUC,QAClDuG,aAAgB4iD,GACThsD,KAAKmyD,WAAW/oD,EAAKrI,iBAEhBqR,IAAThJ,EAAqBpJ,KAAKyc,MAAMnR,MAAMlC,GAAQpJ,KAAKyc,OAS9DyrC,EAAShoD,UAAUiyD,WAAa,SAAU9e,GAEtC,IAAI+e,EAAU,sBACdpyD,KAAKkyD,cAAcE,GACnBzyD,EAAKkU,iBAAiBu+C,EAAS,EAAG,EAAGxvD,UAAUC,QAC/C,IAAIwvD,EAAY3hD,GAAc2iC,GAC9B//B,GAAY8+C,EAAS,EAAGC,GACxB,IAAIthD,EAAWshD,EAAUthD,SAUzB,OATIA,EAAShD,OAAS/N,KAAK0T,MAAMolC,UAAU/qC,MACvC5J,EAAMiuD,6DAGFrhD,EAAShD,KACT,iBACA/N,KAAK0T,MAAMolC,UAAU/qC,KACrB,KAED/N,KAAK8kB,IAAIutC,EAAUjpD,KAAKrI,aAKnCmnD,EAAShoD,UAAUgyD,cAAgB,SAAUE,GACtB,OAAfpyD,KAAK0T,OACLvP,EAAM,eAAiBiuD,EAAU,4BAIzClK,EAAShoD,UAAUoyD,UAAY,WAC3B3yD,EAAKkU,iBAAiB,qBAAsB,EAAG,EAAGjR,UAAUC,QAC5D7C,KAAKkyD,cAAc,aACnBlyD,KAAK0T,MAAMsvC,aAEfkF,EAAShoD,UAAUqyD,SAAW,WAC1B5yD,EAAKkU,iBAAiB,oBAAqB,EAAG,EAAGjR,UAAUC,QAC3D7C,KAAKkyD,cAAc,YACnBlyD,KAAK0T,MAAMuvC,UAEfiF,EAASsK,YAAc,CACnBC,UAAW,CACP,MAAO,aAEXC,UAAW,SAAUrmC,GACjB,MAAO,CACH,MAAO,CACH,UAAaA,MAKtB67B,EAtFkB,GAwFzB+J,GAAmC,WAEnC,SAASA,EAAkB7F,GACvBpsD,KAAKosD,SAAWA,EAoBpB,OAjBA6F,EAAkB/xD,UAAUytB,OAAS,WACjC,OAAOjuB,EAAMizD,UAAU3yD,UAAM,OAAQ,GAAQ,WACzC,OAAON,EAAMkzD,YAAY5yD,MAAM,SAAU2P,GAWrC,OATA3P,KAAKosD,SAAS8F,cAAc,UAE5BZ,GAAYhmB,cAAcwmB,WAAW9xD,KAAKosD,SAAS14C,OAEnD1T,KAAKosD,SAAS14C,MAAQ,KAEtB1T,KAAKosD,SAAS3vC,MAAQ,KACtBzc,KAAKosD,SAAS4F,SAAW,KACzBhyD,KAAKosD,SAAW,KACT,CAAC,UAIb6F,EAvB2B,GAiDlCY,GAAmB,WACnBle,GAAoBxE,gBACpBxC,GAAsBsC,cAEtB6iB,GAAkB,WAClBnlB,GAAsBwC,iBAGtBoH,GAAwB,WACxB,OAAO5C,GAAoB,kBAE3Boe,GAA2B,SAAUjuC,EAAKwD,GAE1CxD,EAAImC,KAAKm+B,sBAAsBhH,uBAAyB91B,GAExD8gB,GAAQ,SAAUtkB,EAAK2iC,GACvB3iC,EAAImC,KAAKmiB,MAAMqe,IAEfM,GAAwB,SAAUjjC,EAAKkjC,GACvCljC,EAAImC,KAAK8gC,sBAAsBC,IAE/BhD,GAAkB,SAAUlgC,GAC5B,OAAOA,EAAImC,KAAK+9B,iBAEhBgO,GAAsB,SAAUluC,EAAKwD,GACrC,OAAOxD,EAAImC,KAAKu/B,qBAAqBl+B,IAGrC0pC,GAAwB3yD,OAAO4zD,OAAO,CACxCC,UAAW,KACXL,iBAAkBA,GAClBC,gBAAiBA,GACjBvb,sBAAuBA,GACvBwb,yBAA0BA,GAC1B3pB,MAAOA,GACP2e,sBAAuBA,GACvB/C,gBAAiBA,GACjBgO,oBAAqBA,KAmBnBG,GAAiB9V,GAMrBA,GAAqBn9C,UAAUkzD,aAAe,SAAUtoD,EAAY8I,GAChE5T,KAAK06C,YAAY,IAAK,CAAE+E,EAAG30C,GAAc8I,IAO7CypC,GAAqBn9C,UAAUmzD,KAAO,SAAU1uD,EAAM2uD,GAClDtzD,KAAK06C,YAAY,OAAQ,CAAE7H,EAAGluC,GAAQ2uD,IAG1C,IAAIC,GAAqB1a,GAKrB2a,GAAa,SAAUC,GACvB,IAAIC,EAASrW,GAAqBn9C,UAAUu8C,IAO5C,OANAY,GAAqBn9C,UAAUu8C,IAAM,SAAU3xC,EAAYnG,EAAMiP,EAAYiF,QAC5DzG,IAATyG,IACAA,EAAO46C,KAEXC,EAAOnjD,KAAKvQ,KAAM8K,EAAYnG,EAAMiP,EAAYiF,IAE7C,WACHwkC,GAAqBn9C,UAAUu8C,IAAMiX,IAMzCC,GAAmB7lD,GAKnB+c,GAAkB,SAAU3hB,GAC5B,OAAOA,EAAM2hB,mBAObg6B,GAAkB,SAAUA,GAC5ByM,GAAYhmB,cAAcuZ,gBAAgBA,IAG1C+O,GAA2Bv0D,OAAO4zD,OAAO,CAC3CC,UAAW,KACXC,eAAgBA,GAChBI,mBAAoBA,GACpBC,WAAYA,GACZG,iBAAkBA,GAClB9oC,gBAAiBA,GACjBg6B,gBAAiBA,KAGf/jD,GAAO,qBACPuzC,GAAU,QAkBVme,GAActK,GAASsK,YAC3B,SAASqB,GAAiBC,GAEtB1f,GAAc0f,EAAS3f,aAEvB,IAAIlmC,EAAY6lD,EAAS9B,SAAS+B,kBAAkB,IAAIl0D,EAAUm0D,UAAU,YAAY,SAAUjrC,EAAWsqB,GAGzG,IAAIyR,EAAM/7B,EAAUkrC,YAAY,OAAOrtB,eACnCme,EAAeh8B,EAAUkrC,YAAY,iBACzC,OAAO3C,GAAYhmB,cAAcqmB,gBAAgB7M,EAAKC,EAAc1R,KACrE,UACE6gB,gBAEL,CACIlI,UAAWA,GACXhlC,MAAOA,GACPkhC,SAAUA,GACVtkC,aAAcA,GACdtgB,cAAeA,EACf0uD,SAAUA,GACVQ,YAAaA,GACboB,YAAaA,KAEZO,sBAAqB,IAC1BL,EAASM,gBAAgBtzD,GAAMuzC,IAC3B10C,EAAKsF,cACLovD,EAAO90D,QAAU0O,GAGzB4lD,GAAiBp0D,GAEjBF,EAAQqkB,aAAeA,GACvBrkB,EAAQ2oD,SAAWA,GACnB3oD,EAAQkU,aAAeA,GACvBlU,EAAQynB,MAAQA,GAChBznB,EAAQysD,UAAYA,GACpBzsD,EAAQizD,YAAcA,GACtBjzD,EAAQ+D,cAAgBA,EACxB/D,EAAQs0D,iBAAmBA,K","file":"js/app~c1554789.f2b765db.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar firebase = _interopDefault(require('@firebase/app'));\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\nvar component = require('@firebase/component');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger$1.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < varArgs.length; i++) {\r\n        var arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += util.stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger$1.LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\r\nvar log = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        var message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var varArgs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            varArgs[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, tslib.__spread([prefix], varArgs));\r\n    };\r\n};\r\n/**\r\n * @param {...string} varArgs\r\n */\r\nvar error = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} varArgs\r\n */\r\nvar fatal = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} varArgs\r\n */\r\nvar warn = function () {\r\n    var varArgs = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        varArgs[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn_1();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return util.stringify(obj);\r\n    }\r\n    var keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1;\r\n    var s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    var bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    var str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length) {\r\n            return null;\r\n        }\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length) {\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        }\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length) {\r\n            return null;\r\n        }\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\r\n            pieces.push(this.pieces_[i]);\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            pieces.push(this.pieces_[i]);\r\n        }\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0) {\r\n                    pieces.push(childPieces[i]);\r\n                }\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0) {\r\n                return cmp;\r\n            }\r\n        }\r\n        if (leftKeys.length === rightKeys.length) {\r\n            return 0;\r\n        }\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length === 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar APPLICATION_ID_PARAM = 'p';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return (this.host !== this.internalHost ||\r\n            this.isCustomHost() ||\r\n            this.includeNamespaceInQueryParams);\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        each(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var e_1, _a;\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    try {\r\n        for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var segment = _c.value;\r\n            if (segment.length === 0) {\r\n                continue;\r\n            }\r\n            var kv = segment.split('=');\r\n            if (kv.length === 2) {\r\n                results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n            }\r\n            else {\r\n                warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\r\nvar parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        var hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            var dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString,\r\n        namespace: namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false;\r\n        var hasActualChild_1 = false;\r\n        each(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    each(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var n = this;\r\n        var cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        var blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    };\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = tslib.__assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = tslib.__assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            var newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (var key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj = json;\r\n        each(hinzeJsonObj, function (key, child) {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        each(json, function (key, childData) {\r\n            if (util.contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode()) {\r\n            return false;\r\n        }\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this.node_.isEmpty();\r\n        }\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ change.childName);\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        var _this = this;\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherKeys = Object.keys(other.callbacks_);\r\n                var thisKeys = Object.keys(this.callbacks_);\r\n                var otherCount = otherKeys.length;\r\n                var thisCount = thisKeys.length;\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    // If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey = otherKeys[0];\r\n                        var thisKey = thisKeys[0];\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return thisKeys.every(function (eventType) {\r\n                            return other.callbacks_[eventType] === _this.callbacks_[eventType];\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName !== MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName !== MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param failureCallbackOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel) {\r\n                ret.cancel.bind(ret.context)(err);\r\n            }\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ExistingValueProvider = /** @class */ (function () {\r\n    function ExistingValueProvider(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    ExistingValueProvider.prototype.getImmediateChild = function (childName) {\r\n        var child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    };\r\n    ExistingValueProvider.prototype.node = function () {\r\n        return this.node_;\r\n    };\r\n    return ExistingValueProvider;\r\n}());\r\nvar DeferredValueProvider = /** @class */ (function () {\r\n    function DeferredValueProvider(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    DeferredValueProvider.prototype.getImmediateChild = function (childName) {\r\n        var childPath = this.path_.child(childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    };\r\n    DeferredValueProvider.prototype.node = function () {\r\n        return this.syncTree_.calcCompleteEventCache(this.path_);\r\n    };\r\n    return DeferredValueProvider;\r\n}());\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            util.assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nvar resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    var delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        util.assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    var existingNode = existing.node();\r\n    util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    var leaf = existingNode;\r\n    var existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!Path} path path to which write is relative\r\n * @param {!Node} node new data written at path\r\n * @param {!SyncTree} syncTree current data\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        this.value = null;\r\n        this.children = new Map();\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @return The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value != null) {\r\n            return this.value.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children.size > 0) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children.has(childKey)) {\r\n                var childTree = this.children.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @param data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value = data;\r\n            this.children.clear();\r\n        }\r\n        else if (this.value !== null) {\r\n            this.value = this.value.updateChild(path, data);\r\n        }\r\n        else {\r\n            var childKey = path.getFront();\r\n            if (!this.children.has(childKey)) {\r\n                this.children.set(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param path Path to look up snapshot for.\r\n     * @return True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value = null;\r\n            this.children.clear();\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value !== null) {\r\n                if (this.value.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value;\r\n                    this.value = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children.size > 0) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children.has(childKey)) {\r\n                    var safeToRemove = this.children.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children.delete(childKey);\r\n                    }\r\n                }\r\n                return this.children.size === 0;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param prefixPath Path to look up node for.\r\n     * @param func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value !== null) {\r\n            func(prefixPath, this.value);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        this.children.forEach(function (tree, key) {\r\n            func(key, tree);\r\n        });\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        each(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap = new Map();\r\n    }\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey = change.childName;\r\n        util.assert(type === Change.CHILD_ADDED ||\r\n            type === Change.CHILD_CHANGED ||\r\n            type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\r\n                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === Change.CHILD_REMOVED &&\r\n                oldType === Change.CHILD_ADDED) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === Change.CHILD_REMOVED &&\r\n                oldType === Change.CHILD_CHANGED) {\r\n                this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === Change.CHILD_CHANGED &&\r\n                oldType === Change.CHILD_ADDED) {\r\n                this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === Change.CHILD_CHANGED &&\r\n                oldType === Change.CHILD_CHANGED) {\r\n                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    };\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return Array.from(this.changeMap.values());\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\n// eslint-disable-next-line @typescript-eslint/class-name-casing\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey === '.priority') {\r\n                    util.assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey === '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return this.views.size === 0;\r\n    };\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var e_1, _a;\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = this.views.get(queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events = [];\r\n            try {\r\n                for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var view = _c.value;\r\n                    events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = this.views.get(queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ serverCache, serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views.set(queryId, view);\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var e_2, _a;\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            try {\r\n                // When you do ref.off(...), we search all views for the registration to remove.\r\n                for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var _d = tslib.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];\r\n                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                    if (view.isEmpty()) {\r\n                        this.views.delete(viewQueryId);\r\n                        // We'll deal with complete views later.\r\n                        if (!view\r\n                            .getQuery()\r\n                            .getQueryParams()\r\n                            .loadsAllData()) {\r\n                            removed.push(view.getQuery());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = this.views.get(queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    this.views.delete(queryId);\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var e_3, _a;\r\n        var result = [];\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                if (!view\r\n                    .getQuery()\r\n                    .getQueryParams()\r\n                    .loadsAllData()) {\r\n                    result.push(view);\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * @param path The path to the desired complete snapshot\r\n     * @return A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var e_4, _a;\r\n        var serverCache = null;\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                serverCache = serverCache || view.getCompleteServerCache(path);\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n        return serverCache;\r\n    };\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return this.views.get(queryId);\r\n        }\r\n    };\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var e_5, _a;\r\n        try {\r\n            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var view = _c.value;\r\n                if (view\r\n                    .getQuery()\r\n                    .getQueryParams()\r\n                    .loadsAllData()) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_5) throw e_5.error; }\r\n        }\r\n        return null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        each(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param path The path to check for\r\n     * @return Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param path The path to get a complete write\r\n     * @return The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param node The node to apply this CompoundWrite to\r\n     * @return The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return applySubtreeWrite(Path.Empty, this.writeTree_, node);\r\n    };\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    return CompoundWrite;\r\n}());\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        var priorityWrite_1 = null;\r\n        writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite_1 = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n            node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                each(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            for (var childName in writeRecord.children) {\r\n                if (writeRecord.children.hasOwnProperty(childName) &&\r\n                    writeRecord.path.child(childName).contains(path)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param revert True if the given write failed and needs to be reverted\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                each(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @return Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap.set(queryKey, tag);\r\n            this.tagToQueryMap.set(tag, queryKey);\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param eventRegistration If null, all callbacks are removed.\r\n     * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n     * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n     *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     *\r\n     * @param path The path to the data we want\r\n     * @param writeIdsToExclude A specific set to be excluded\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                each(childMap, function (_key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\r\n                this.queryToTagMap.delete(removedQueryKey);\r\n                this.tagToQueryMap.delete(removedQueryTag);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     *\r\n     * @return The normalized query\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @return This method can return events to support synchronous data sources\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    each(childMap, function (_key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap.get(tag);\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return this.queryToTagMap.get(queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n     *\r\n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n     *\r\n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    function AuthTokenProvider(app_, authProvider_) {\r\n        var _this = this;\r\n        this.app_ = app_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });\r\n        }\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        if (!this.auth_) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(function (error) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            setTimeout(function () { return listener(null); }, 0);\r\n            this.authProvider_\r\n                .get()\r\n                .then(function (auth) { return auth.addAuthTokenListener(listener); });\r\n        }\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(function (auth) { return auth.removeAuthTokenListener(listener); });\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = tslib.__assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        each(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} varArgs\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var varArgs = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            varArgs[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = tslib.__spread(this.listeners_[eventType]);\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var _a = tslib.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var _a = tslib.__read(args, 2), pN = _a[0], data = _a[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (_this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = _this.applicationId;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        if (util.isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.delete(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nvar SDK_VERSION = '';\r\n// SDK_VERSION should be set before any database instance is created\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                var options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                _this.log_(error);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var e_1, _a;\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports = (this.transports_ = []);\r\n            try {\r\n                for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var transport = _c.value;\r\n                    if (transport && transport['isAvailable']()) {\r\n                        transports.push(transport);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param repoInfo_ Data about the namespace we are connecting to\r\n     * @param applicationId_ The Firebase App ID for this project\r\n     * @param onDataUpdate_ A callback for new data from the server\r\n     */\r\n    function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.applicationId_ = applicationId_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        _this.interruptReasons_ = {};\r\n        /** Map<path, Map<queryId, ListenSpec>> */\r\n        _this.listens = new Map();\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        _this.establishConnectionTimer_ = null;\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        _this.realtime_ = null;\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens.get(pathString) &&\r\n                _this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    };\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error) {\r\n                self_1.log_('Failed to get token: ' + error);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    };\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            var map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var e_1, _a, e_2, _b;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        try {\r\n            // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n            // make sure to send listens before puts.\r\n            for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var queries = _d.value;\r\n                try {\r\n                    for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var listenSpec = _f.value;\r\n                        this.sendListen_(listenSpec);\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\r\n            var data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    function Repo(repoInfo_, forceRestClient, app, authProvider) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        var authTokenProvider = new AuthTokenProvider(app, authProvider);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactionsInit_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) { return nodeFromJSON$1(raw); });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) { return nodeFromJSON$1(raw); });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    // TODO: This should be @private but it's used by test_access.js and internal.js\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (key, value) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var existing = this.serverSyncTree_.calcCompleteEventCache(path);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        each(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            each(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = new SparseSnapshotTree();\r\n        this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {\r\n            var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);\r\n            resolvedOnDisconnectTree.remember(path, resolved);\r\n        });\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                each(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined') {\r\n            return;\r\n        }\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_) {\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            }\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        each(stats, function (stat, value) {\r\n            var paddedStat = stat;\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++) {\r\n                paddedStat += ' ';\r\n            }\r\n            console.log(paddedStat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    Repo.prototype.log_ = function () {\r\n        var varArgs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            varArgs[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, tslib.__spread([prefix], varArgs));\r\n    };\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status === 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason) {\r\n                        message += ': ' + errorReason;\r\n                    }\r\n                    var error = new Error(message);\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    error.code = code;\r\n                    callback(error);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() === this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty()) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.path.getBack();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null) {\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            }\r\n            else {\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n            }\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys') {\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        }\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys') {\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        }\r\n        if (applyLocally === undefined) {\r\n            applyLocally = true;\r\n        }\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error, committed, snapshot) {\r\n            if (error) {\r\n                deferred.reject(error);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next = path.getFront();\r\n        while (next !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n            next = path.getFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        each(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst) {\r\n            action(this);\r\n        }\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst) {\r\n            action(this);\r\n        }\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null) {\r\n                action(child);\r\n            }\r\n            else {\r\n                child.forEachImmediateDescendantWithValue(action);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null) {\r\n            this.parent_.updateChild_(this.name_, this);\r\n        }\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.transactionsInit_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    }\r\n                    else {\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    front = path.getFront();\r\n    while (front !== null && transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n        front = path.getFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        var e_1, _a, e_2, _b;\r\n        try {\r\n            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var appName = _d.value;\r\n                try {\r\n                    for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var dbUrl = _f.value;\r\n                        this.repos_[appName][dbUrl].interrupt();\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        var e_3, _a, e_4, _b;\r\n        try {\r\n            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\r\n                var appName = _d.value;\r\n                try {\r\n                    for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var dbUrl = _f.value;\r\n                        this.repos_[appName][dbUrl].resume();\r\n                    }\r\n                }\r\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\r\n                    }\r\n                    finally { if (e_4) throw e_4.error; }\r\n                }\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        var dbEmulatorHost = undefined;\r\n        if (typeof process !== 'undefined') {\r\n            dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n        }\r\n        if (dbEmulatorHost) {\r\n            dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\r\n            parsedUrl = parseRepoInfo(dbUrl);\r\n            repoInfo = parsedUrl.repoInfo;\r\n        }\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app, authProvider);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app, authProvider) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        },\r\n        increment: function (delta) {\r\n            return {\r\n                '.sv': {\r\n                    'increment': delta\r\n                }\r\n            };\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_a) {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.checkDeleted_('delete');\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.repo_ = null;\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\n\nvar name = \"@firebase/database\";\nvar version = \"0.6.6\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // set SDK_VERSION\r\n    setSDKVersion(instance.SDK_VERSION);\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var authProvider = container.getProvider('auth-internal');\r\n        return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        DataSnapshot: DataSnapshot,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;\n//# sourceMappingURL=index.cjs.js.map\n"],"sourceRoot":""}